   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	old_diff
  18              		.section	.bss.old_diff,"aw",%nobits
  19              		.align	2
  22              	old_diff:
  23 0000 00000000 		.space	4
  24              		.comm	old_steer,4,4
  25              		.global	border
  26              		.section	.data.border,"aw",%progbits
  27              		.align	2
  30              	border:
  31 0000 2C010000 		.word	300
  32              		.global	derivative
  33              		.section	.bss.derivative,"aw",%nobits
  34              		.align	2
  37              	derivative:
  38 0000 00000000 		.space	4
  39              		.global	proportional
  40              		.section	.bss.proportional,"aw",%nobits
  41              		.align	2
  44              	proportional:
  45 0000 00000000 		.space	4
  46              		.global	integral
  47              		.section	.bss.integral,"aw",%nobits
  48              		.align	2
  51              	integral:
  52 0000 00000000 		.space	4
  53              		.global	integrald
  54              		.section	.bss.integrald,"aw",%nobits
  55              		.align	2
  58              	integrald:
  59 0000 00000000 		.space	4
  60              		.global	rate
  61              		.section	.bss.rate,"aw",%nobits
  62              		.align	2
  65              	rate:
  66 0000 00000000 		.space	4
  67              		.global	prevposition
  68              		.section	.bss.prevposition,"aw",%nobits
  69              		.align	2
  72              	prevposition:
  73 0000 00000000 		.space	4
  74              		.global	control
  75              		.section	.bss.control,"aw",%nobits
  76              		.align	2
  79              	control:
  80 0000 00000000 		.space	4
  81              		.global	speed
  82              		.section	.bss.speed,"aw",%nobits
  83              		.align	2
  86              	speed:
  87 0000 00000000 		.space	4
  88              		.global	overStart
  89              		.section	.bss.overStart,"aw",%nobits
  92              	overStart:
  93 0000 00       		.space	1
  94              		.global	lastMode
  95              		.section	.bss.lastMode,"aw",%nobits
  96              		.align	1
  99              	lastMode:
 100 0000 0000     		.space	2
 101              		.global	ttl
 102              		.section	.data.ttl,"aw",%progbits
 103              		.align	1
 106              	ttl:
 107 0000 6400     		.short	100
 108              		.global	angle
 109              		.section	.bss.angle,"aw",%nobits
 110              		.align	2
 113              	angle:
 114 0000 00000000 		.space	4
 115              		.global	slowdown
 116              		.section	.bss.slowdown,"aw",%nobits
 119              	slowdown:
 120 0000 00       		.space	1
 121              		.global	hill
 122              		.section	.bss.hill,"aw",%nobits
 125              	hill:
 126 0000 00       		.space	1
 127              		.global	startCounter
 128              		.section	.bss.startCounter,"aw",%nobits
 129              		.align	1
 132              	startCounter:
 133 0000 0000     		.space	2
 134              		.global	hillCounter
 135              		.section	.bss.hillCounter,"aw",%nobits
 136              		.align	1
 139              	hillCounter:
 140 0000 0000     		.space	2
 141              		.global	hillBrakeCounter
 142              		.section	.bss.hillBrakeCounter,"aw",%nobits
 143              		.align	1
 146              	hillBrakeCounter:
 147 0000 0000     		.space	2
 148              		.global	brakeCounter
 149              		.section	.bss.brakeCounter,"aw",%nobits
 150              		.align	1
 153              	brakeCounter:
 154 0000 0000     		.space	2
 155              		.global	straightCounter
 156              		.section	.bss.straightCounter,"aw",%nobits
 157              		.align	1
 160              	straightCounter:
 161 0000 0000     		.space	2
 162              		.global	cameraImageCounter
 163              		.section	.bss.cameraImageCounter,"aw",%nobits
 164              		.align	1
 167              	cameraImageCounter:
 168 0000 0000     		.space	2
 169              		.global	endOfRoundCounter
 170              		.section	.bss.endOfRoundCounter,"aw",%nobits
 171              		.align	1
 174              	endOfRoundCounter:
 175 0000 0000     		.space	2
 176              		.global	brakeDelayCounter
 177              		.section	.bss.brakeDelayCounter,"aw",%nobits
 178              		.align	1
 181              	brakeDelayCounter:
 182 0000 0000     		.space	2
 183              		.global	startLeft
 184              		.section	.bss.startLeft,"aw",%nobits
 187              	startLeft:
 188 0000 00       		.space	1
 189              		.global	startRight
 190              		.section	.bss.startRight,"aw",%nobits
 193              	startRight:
 194 0000 00       		.space	1
 195              		.global	straightCounterMax
 196              		.section	.bss.straightCounterMax,"aw",%nobits
 197              		.align	1
 200              	straightCounterMax:
 201 0000 0000     		.space	2
 202              		.section	.text.isBlack,"ax",%progbits
 203              		.align	2
 204              		.global	isBlack
 205              		.code	16
 206              		.thumb_func
 208              	isBlack:
 209              	.LFB0:
 210              		.file 1 "../Sources/main.c"
   1:../Sources/main.c **** #include "derivative.h" /* include peripheral declarations */
   2:../Sources/main.c **** #include "TFC\TFC.h"
   3:../Sources/main.c **** 
   4:../Sources/main.c **** #define BORDER 			300
   5:../Sources/main.c **** #define STDOFFSET 		5	//Offset in LineScanImage-Array - Cutting of the noise
   6:../Sources/main.c **** #define STDLENGTH 		96	//Effective Duration of LineScanImage-Arrays
   7:../Sources/main.c **** #define PIXELPERINCH 	7	
   8:../Sources/main.c **** #define DISTANCE 		14 	//Distance between wheel to focal in INCH
   9:../Sources/main.c **** #define MAXWHITE 		3	//
  10:../Sources/main.c **** #define TTL				100
  11:../Sources/main.c **** #define MINCURVESPEED	0.6
  12:../Sources/main.c **** #define BRAKECOUNTERMAX 25
  13:../Sources/main.c **** #define STRAIGHTCOUNTERINIT 70
  14:../Sources/main.c **** 
  15:../Sources/main.c **** float old_diff = 0;
  16:../Sources/main.c **** float old_steer;
  17:../Sources/main.c **** int border = BORDER;
  18:../Sources/main.c **** float derivative=0,proportional=0,integral=0,integrald=0,rate=0,prevposition=0,control=0;
  19:../Sources/main.c **** float speed = 0;
  20:../Sources/main.c **** 
  21:../Sources/main.c **** 
  22:../Sources/main.c **** bool overStart = false;
  23:../Sources/main.c **** uint16_t lastMode = 0; 
  24:../Sources/main.c **** uint16_t ttl = TTL;
  25:../Sources/main.c **** float angle = 0;
  26:../Sources/main.c **** bool slowdown = false;
  27:../Sources/main.c **** bool hill = false;
  28:../Sources/main.c **** uint16_t startCounter=0;
  29:../Sources/main.c **** uint16_t hillCounter = 0;
  30:../Sources/main.c **** uint16_t hillBrakeCounter=0;
  31:../Sources/main.c **** uint16_t brakeCounter = 0;
  32:../Sources/main.c **** uint16_t straightCounter = 0;
  33:../Sources/main.c **** uint16_t cameraImageCounter = 0;
  34:../Sources/main.c **** uint16_t endOfRoundCounter = 0;
  35:../Sources/main.c **** uint16_t brakeDelayCounter = 0;
  36:../Sources/main.c **** 
  37:../Sources/main.c **** bool startLeft = false;
  38:../Sources/main.c **** bool startRight = false;
  39:../Sources/main.c **** uint16_t straightCounterMax=0;
  40:../Sources/main.c **** 
  41:../Sources/main.c **** bool isBlack(uint16_t index)
  42:../Sources/main.c **** {
 211              		.loc 1 42 0
 212              		.cfi_startproc
 213 0000 80B5     		push	{r7, lr}
 214              	.LCFI0:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 7, -8
 217              		.cfi_offset 14, -4
 218 0002 82B0     		sub	sp, sp, #8
 219              	.LCFI1:
 220              		.cfi_def_cfa_offset 16
 221 0004 00AF     		add	r7, sp, #0
 222              	.LCFI2:
 223              		.cfi_def_cfa_register 7
 224 0006 021C     		mov	r2, r0
 225 0008 BB1D     		add	r3, r7, #6
 226 000a 1A80     		strh	r2, [r3]
  43:../Sources/main.c **** 	return LineScanImage0[index] < border;
 227              		.loc 1 43 0
 228 000c 094B     		ldr	r3, .L4
 229 000e 1A68     		ldr	r2, [r3]
 230 0010 BB1D     		add	r3, r7, #6
 231 0012 1B88     		ldrh	r3, [r3]
 232 0014 5B00     		lsl	r3, r3, #1
 233 0016 D318     		add	r3, r2, r3
 234 0018 1B88     		ldrh	r3, [r3]
 235 001a 9BB2     		uxth	r3, r3
 236 001c 191C     		mov	r1, r3
 237 001e 064B     		ldr	r3, .L4+4
 238 0020 1A68     		ldr	r2, [r3]
 239 0022 0123     		mov	r3, #1
 240 0024 9142     		cmp	r1, r2
 241 0026 00DB     		blt	.L2
 242 0028 0023     		mov	r3, #0
 243              	.L2:
 244 002a DBB2     		uxtb	r3, r3
  44:../Sources/main.c **** }
 245              		.loc 1 44 0
 246 002c 181C     		mov	r0, r3
 247 002e BD46     		mov	sp, r7
 248 0030 02B0     		add	sp, sp, #8
 249              		@ sp needed for prologue
 250 0032 80BD     		pop	{r7, pc}
 251              	.L5:
 252              		.align	2
 253              	.L4:
 254 0034 00000000 		.word	LineScanImage0
 255 0038 00000000 		.word	border
 256              		.cfi_endproc
 257              	.LFE0:
 259              		.section	.text.isWhite,"ax",%progbits
 260              		.align	2
 261              		.global	isWhite
 262              		.code	16
 263              		.thumb_func
 265              	isWhite:
 266              	.LFB1:
  45:../Sources/main.c **** 
  46:../Sources/main.c **** bool isWhite(uint16_t index)
  47:../Sources/main.c **** {
 267              		.loc 1 47 0
 268              		.cfi_startproc
 269 0000 80B5     		push	{r7, lr}
 270              	.LCFI3:
 271              		.cfi_def_cfa_offset 8
 272              		.cfi_offset 7, -8
 273              		.cfi_offset 14, -4
 274 0002 82B0     		sub	sp, sp, #8
 275              	.LCFI4:
 276              		.cfi_def_cfa_offset 16
 277 0004 00AF     		add	r7, sp, #0
 278              	.LCFI5:
 279              		.cfi_def_cfa_register 7
 280 0006 021C     		mov	r2, r0
 281 0008 BB1D     		add	r3, r7, #6
 282 000a 1A80     		strh	r2, [r3]
  48:../Sources/main.c **** 	return !isBlack(index);
 283              		.loc 1 48 0
 284 000c BB1D     		add	r3, r7, #6
 285 000e 1B88     		ldrh	r3, [r3]
 286 0010 181C     		mov	r0, r3
 287 0012 FFF7FEFF 		bl	isBlack
 288 0016 031C     		mov	r3, r0
 289 0018 5A42     		neg	r2, r3
 290 001a 5341     		adc	r3, r3, r2
 291 001c DBB2     		uxtb	r3, r3
  49:../Sources/main.c **** }
 292              		.loc 1 49 0
 293 001e 181C     		mov	r0, r3
 294 0020 BD46     		mov	sp, r7
 295 0022 02B0     		add	sp, sp, #8
 296              		@ sp needed for prologue
 297 0024 80BD     		pop	{r7, pc}
 298              		.cfi_endproc
 299              	.LFE1:
 301 0026 C046     		.section	.text.isCentrical,"ax",%progbits
 302              		.align	2
 303              		.global	isCentrical
 304              		.code	16
 305              		.thumb_func
 307              	isCentrical:
 308              	.LFB2:
  50:../Sources/main.c **** 
  51:../Sources/main.c **** bool isCentrical(uint16_t index)
  52:../Sources/main.c **** {
 309              		.loc 1 52 0
 310              		.cfi_startproc
 311 0000 80B5     		push	{r7, lr}
 312              	.LCFI6:
 313              		.cfi_def_cfa_offset 8
 314              		.cfi_offset 7, -8
 315              		.cfi_offset 14, -4
 316 0002 82B0     		sub	sp, sp, #8
 317              	.LCFI7:
 318              		.cfi_def_cfa_offset 16
 319 0004 00AF     		add	r7, sp, #0
 320              	.LCFI8:
 321              		.cfi_def_cfa_register 7
 322 0006 021C     		mov	r2, r0
 323 0008 BB1D     		add	r3, r7, #6
 324 000a 1A80     		strh	r2, [r3]
  53:../Sources/main.c **** 	return (index > 40 && index < 88);
 325              		.loc 1 53 0
 326 000c BB1D     		add	r3, r7, #6
 327 000e 1B88     		ldrh	r3, [r3]
 328 0010 282B     		cmp	r3, #40
 329 0012 05D9     		bls	.L9
 330              		.loc 1 53 0 is_stmt 0
 331 0014 BB1D     		add	r3, r7, #6
 332 0016 1B88     		ldrh	r3, [r3]
 333 0018 572B     		cmp	r3, #87
 334 001a 01D8     		bhi	.L9
 335              		.loc 1 53 0
 336 001c 0123     		mov	r3, #1
 337 001e 00E0     		b	.L10
 338              	.L9:
 339              		.loc 1 53 0
 340 0020 0023     		mov	r3, #0
 341              	.L10:
 342              		.loc 1 53 0
 343 0022 DBB2     		uxtb	r3, r3
  54:../Sources/main.c **** //	return (index > 30 && index < 98);
  55:../Sources/main.c **** }
 344              		.loc 1 55 0 is_stmt 1
 345 0024 181C     		mov	r0, r3
 346 0026 BD46     		mov	sp, r7
 347 0028 02B0     		add	sp, sp, #8
 348              		@ sp needed for prologue
 349 002a 80BD     		pop	{r7, pc}
 350              		.cfi_endproc
 351              	.LFE2:
 353              		.section	.rodata
 354              		.align	2
 355              	.LC3:
 356 0000 48494C4C 		.ascii	"HILL\000"
 356      00
 357              		.section	.text.isHill,"ax",%progbits
 358              		.align	2
 359              		.global	isHill
 360              		.code	16
 361              		.thumb_func
 363              	isHill:
 364              	.LFB3:
  56:../Sources/main.c **** 
  57:../Sources/main.c **** bool isHill()
  58:../Sources/main.c **** {
 365              		.loc 1 58 0
 366              		.cfi_startproc
 367 0000 80B5     		push	{r7, lr}
 368              	.LCFI9:
 369              		.cfi_def_cfa_offset 8
 370              		.cfi_offset 7, -8
 371              		.cfi_offset 14, -4
 372 0002 82B0     		sub	sp, sp, #8
 373              	.LCFI10:
 374              		.cfi_def_cfa_offset 16
 375 0004 00AF     		add	r7, sp, #0
 376              	.LCFI11:
 377              		.cfi_def_cfa_register 7
  59:../Sources/main.c **** 	uint16_t range = 10;
 378              		.loc 1 59 0
 379 0006 BB1C     		add	r3, r7, #2
 380 0008 0A22     		mov	r2, #10
 381 000a 1A80     		strh	r2, [r3]
  60:../Sources/main.c **** 	int16_t k;
  61:../Sources/main.c **** 	uint16_t sum = 0;
 382              		.loc 1 61 0
 383 000c 3B1D     		add	r3, r7, #4
 384 000e 0022     		mov	r2, #0
 385 0010 1A80     		strh	r2, [r3]
  62:../Sources/main.c **** 	//if(isCentrical(old_diff))
  63:../Sources/main.c **** 	//{
  64:../Sources/main.c **** 		for(k=0; k<range; k++)
 386              		.loc 1 64 0
 387 0012 BB1D     		add	r3, r7, #6
 388 0014 0022     		mov	r2, #0
 389 0016 1A80     		strh	r2, [r3]
 390 0018 23E0     		b	.L13
 391              	.L16:
  65:../Sources/main.c **** 		{
  66:../Sources/main.c **** 			if(isBlack(63-k))
 392              		.loc 1 66 0
 393 001a BB1D     		add	r3, r7, #6
 394 001c 1B88     		ldrh	r3, [r3]
 395 001e 3F22     		mov	r2, #63
 396 0020 D31A     		sub	r3, r2, r3
 397 0022 9BB2     		uxth	r3, r3
 398 0024 181C     		mov	r0, r3
 399 0026 FFF7FEFF 		bl	isBlack
 400 002a 031C     		mov	r3, r0
 401 002c 002B     		cmp	r3, #0
 402 002e 04D0     		beq	.L14
  67:../Sources/main.c **** 			{
  68:../Sources/main.c **** 				sum++;
 403              		.loc 1 68 0
 404 0030 3B1D     		add	r3, r7, #4
 405 0032 3A1D     		add	r2, r7, #4
 406 0034 1288     		ldrh	r2, [r2]
 407 0036 0132     		add	r2, r2, #1
 408 0038 1A80     		strh	r2, [r3]
 409              	.L14:
  69:../Sources/main.c **** 			}
  70:../Sources/main.c **** 			
  71:../Sources/main.c **** 			if(isBlack(64+k))
 410              		.loc 1 71 0
 411 003a BB1D     		add	r3, r7, #6
 412 003c 1B88     		ldrh	r3, [r3]
 413 003e 4033     		add	r3, r3, #64
 414 0040 9BB2     		uxth	r3, r3
 415 0042 181C     		mov	r0, r3
 416 0044 FFF7FEFF 		bl	isBlack
 417 0048 031C     		mov	r3, r0
 418 004a 002B     		cmp	r3, #0
 419 004c 04D0     		beq	.L15
  72:../Sources/main.c **** 			{
  73:../Sources/main.c **** 				sum++;
 420              		.loc 1 73 0
 421 004e 3B1D     		add	r3, r7, #4
 422 0050 3A1D     		add	r2, r7, #4
 423 0052 1288     		ldrh	r2, [r2]
 424 0054 0132     		add	r2, r2, #1
 425 0056 1A80     		strh	r2, [r3]
 426              	.L15:
  64:../Sources/main.c **** 		for(k=0; k<range; k++)
 427              		.loc 1 64 0
 428 0058 BB1D     		add	r3, r7, #6
 429 005a BA1D     		add	r2, r7, #6
 430 005c 1288     		ldrh	r2, [r2]
 431 005e 0132     		add	r2, r2, #1
 432 0060 1A80     		strh	r2, [r3]
 433              	.L13:
  64:../Sources/main.c **** 		for(k=0; k<range; k++)
 434              		.loc 1 64 0 is_stmt 0
 435 0062 BB1D     		add	r3, r7, #6
 436 0064 0021     		mov	r1, #0
 437 0066 5A5E     		ldrsh	r2, [r3, r1]
 438 0068 BB1C     		add	r3, r7, #2
 439 006a 1B88     		ldrh	r3, [r3]
 440 006c 9A42     		cmp	r2, r3
 441 006e D4DB     		blt	.L16
  74:../Sources/main.c **** 			}
  75:../Sources/main.c **** 		}
  76:../Sources/main.c **** 	//}
  77:../Sources/main.c **** 	
  78:../Sources/main.c **** 	if(sum >= 8 && sum < 12)
 442              		.loc 1 78 0 is_stmt 1
 443 0070 3B1D     		add	r3, r7, #4
 444 0072 1B88     		ldrh	r3, [r3]
 445 0074 072B     		cmp	r3, #7
 446 0076 11D9     		bls	.L17
 447              		.loc 1 78 0 is_stmt 0
 448 0078 3B1D     		add	r3, r7, #4
 449 007a 1B88     		ldrh	r3, [r3]
 450 007c 0B2B     		cmp	r3, #11
 451 007e 0DD8     		bhi	.L17
  79:../Sources/main.c **** 	{
  80:../Sources/main.c **** 		TERMINAL_PRINTF("HILL");
 452              		.loc 1 80 0 is_stmt 1
 453 0080 0A4A     		ldr	r2, .L19
 454 0082 0B4B     		ldr	r3, .L19+4
 455 0084 101C     		mov	r0, r2
 456 0086 191C     		mov	r1, r3
 457 0088 FFF7FEFF 		bl	Qprintf
  81:../Sources/main.c **** 		hillCounter++;
 458              		.loc 1 81 0
 459 008c 094B     		ldr	r3, .L19+8
 460 008e 1B88     		ldrh	r3, [r3]
 461 0090 0133     		add	r3, r3, #1
 462 0092 9AB2     		uxth	r2, r3
 463 0094 074B     		ldr	r3, .L19+8
 464 0096 1A80     		strh	r2, [r3]
  82:../Sources/main.c **** 		return true;
 465              		.loc 1 82 0
 466 0098 0123     		mov	r3, #1
 467 009a 03E0     		b	.L18
 468              	.L17:
  83:../Sources/main.c **** 	}
  84:../Sources/main.c **** 	hillCounter=0;
 469              		.loc 1 84 0
 470 009c 054B     		ldr	r3, .L19+8
 471 009e 0022     		mov	r2, #0
 472 00a0 1A80     		strh	r2, [r3]
  85:../Sources/main.c **** 	return false;
 473              		.loc 1 85 0
 474 00a2 0023     		mov	r3, #0
 475              	.L18:
  86:../Sources/main.c **** }
 476              		.loc 1 86 0
 477 00a4 181C     		mov	r0, r3
 478 00a6 BD46     		mov	sp, r7
 479 00a8 02B0     		add	sp, sp, #8
 480              		@ sp needed for prologue
 481 00aa 80BD     		pop	{r7, pc}
 482              	.L20:
 483              		.align	2
 484              	.L19:
 485 00ac 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 486 00b0 00000000 		.word	.LC3
 487 00b4 00000000 		.word	hillCounter
 488              		.cfi_endproc
 489              	.LFE3:
 491              		.section	.text.isStart,"ax",%progbits
 492              		.align	2
 493              		.global	isStart
 494              		.code	16
 495              		.thumb_func
 497              	isStart:
 498              	.LFB4:
  87:../Sources/main.c **** 
  88:../Sources/main.c **** bool isStart(uint16_t index)
  89:../Sources/main.c **** {
 499              		.loc 1 89 0
 500              		.cfi_startproc
 501 0000 80B5     		push	{r7, lr}
 502              	.LCFI12:
 503              		.cfi_def_cfa_offset 8
 504              		.cfi_offset 7, -8
 505              		.cfi_offset 14, -4
 506 0002 84B0     		sub	sp, sp, #16
 507              	.LCFI13:
 508              		.cfi_def_cfa_offset 24
 509 0004 00AF     		add	r7, sp, #0
 510              	.LCFI14:
 511              		.cfi_def_cfa_register 7
 512 0006 021C     		mov	r2, r0
 513 0008 BB1D     		add	r3, r7, #6
 514 000a 1A80     		strh	r2, [r3]
  90:../Sources/main.c **** 	bool tmpLeft = false;
 515              		.loc 1 90 0
 516 000c 3B1C     		mov	r3, r7
 517 000e 0F33     		add	r3, r3, #15
 518 0010 0022     		mov	r2, #0
 519 0012 1A70     		strb	r2, [r3]
  91:../Sources/main.c **** 	bool tmpRight = false;
 520              		.loc 1 91 0
 521 0014 3B1C     		mov	r3, r7
 522 0016 0E33     		add	r3, r3, #14
 523 0018 0022     		mov	r2, #0
 524 001a 1A70     		strb	r2, [r3]
  92:../Sources/main.c **** 	
  93:../Sources/main.c **** 	if(isBlack(index-(uint16)(2.5*PIXELPERINCH)) && isWhite(index-PIXELPERINCH))
 525              		.loc 1 93 0
 526 001c BB1D     		add	r3, r7, #6
 527 001e 1B88     		ldrh	r3, [r3]
 528 0020 113B     		sub	r3, r3, #17
 529 0022 9BB2     		uxth	r3, r3
 530 0024 181C     		mov	r0, r3
 531 0026 FFF7FEFF 		bl	isBlack
 532 002a 031C     		mov	r3, r0
 533 002c 002B     		cmp	r3, #0
 534 002e 0DD0     		beq	.L22
 535              		.loc 1 93 0 is_stmt 0
 536 0030 BB1D     		add	r3, r7, #6
 537 0032 1B88     		ldrh	r3, [r3]
 538 0034 073B     		sub	r3, r3, #7
 539 0036 9BB2     		uxth	r3, r3
 540 0038 181C     		mov	r0, r3
 541 003a FFF7FEFF 		bl	isWhite
 542 003e 031C     		mov	r3, r0
 543 0040 002B     		cmp	r3, #0
 544 0042 03D0     		beq	.L22
  94:../Sources/main.c **** 	{
  95:../Sources/main.c **** 		tmpLeft = true;
 545              		.loc 1 95 0 is_stmt 1
 546 0044 3B1C     		mov	r3, r7
 547 0046 0F33     		add	r3, r3, #15
 548 0048 0122     		mov	r2, #1
 549 004a 1A70     		strb	r2, [r3]
 550              	.L22:
  96:../Sources/main.c **** 	}
  97:../Sources/main.c **** 	if(isBlack(index+(uint16)(2.5*PIXELPERINCH)) && isWhite(index+PIXELPERINCH))
 551              		.loc 1 97 0
 552 004c BB1D     		add	r3, r7, #6
 553 004e 1B88     		ldrh	r3, [r3]
 554 0050 1133     		add	r3, r3, #17
 555 0052 9BB2     		uxth	r3, r3
 556 0054 181C     		mov	r0, r3
 557 0056 FFF7FEFF 		bl	isBlack
 558 005a 031C     		mov	r3, r0
 559 005c 002B     		cmp	r3, #0
 560 005e 0DD0     		beq	.L23
 561              		.loc 1 97 0 is_stmt 0
 562 0060 BB1D     		add	r3, r7, #6
 563 0062 1B88     		ldrh	r3, [r3]
 564 0064 0733     		add	r3, r3, #7
 565 0066 9BB2     		uxth	r3, r3
 566 0068 181C     		mov	r0, r3
 567 006a FFF7FEFF 		bl	isWhite
 568 006e 031C     		mov	r3, r0
 569 0070 002B     		cmp	r3, #0
 570 0072 03D0     		beq	.L23
  98:../Sources/main.c **** 	{
  99:../Sources/main.c **** 		tmpRight= true;
 571              		.loc 1 99 0 is_stmt 1
 572 0074 3B1C     		mov	r3, r7
 573 0076 0E33     		add	r3, r3, #14
 574 0078 0122     		mov	r2, #1
 575 007a 1A70     		strb	r2, [r3]
 576              	.L23:
 100:../Sources/main.c **** 	}
 101:../Sources/main.c **** 	if(startLeft && tmpRight)
 577              		.loc 1 101 0
 578 007c 184B     		ldr	r3, .L28
 579 007e 1B78     		ldrb	r3, [r3]
 580 0080 002B     		cmp	r3, #0
 581 0082 06D0     		beq	.L24
 582              		.loc 1 101 0 is_stmt 0
 583 0084 3B1C     		mov	r3, r7
 584 0086 0E33     		add	r3, r3, #14
 585 0088 1B78     		ldrb	r3, [r3]
 586 008a 002B     		cmp	r3, #0
 587 008c 01D0     		beq	.L24
 102:../Sources/main.c **** 	{
 103:../Sources/main.c **** 		return true;
 588              		.loc 1 103 0 is_stmt 1
 589 008e 0123     		mov	r3, #1
 590 0090 21E0     		b	.L25
 591              	.L24:
 104:../Sources/main.c **** 	}
 105:../Sources/main.c **** 	
 106:../Sources/main.c **** 	if(startRight && tmpLeft)
 592              		.loc 1 106 0
 593 0092 144B     		ldr	r3, .L28+4
 594 0094 1B78     		ldrb	r3, [r3]
 595 0096 002B     		cmp	r3, #0
 596 0098 06D0     		beq	.L26
 597              		.loc 1 106 0 is_stmt 0
 598 009a 3B1C     		mov	r3, r7
 599 009c 0F33     		add	r3, r3, #15
 600 009e 1B78     		ldrb	r3, [r3]
 601 00a0 002B     		cmp	r3, #0
 602 00a2 01D0     		beq	.L26
 107:../Sources/main.c **** 	{
 108:../Sources/main.c **** 		return true;
 603              		.loc 1 108 0 is_stmt 1
 604 00a4 0123     		mov	r3, #1
 605 00a6 16E0     		b	.L25
 606              	.L26:
 109:../Sources/main.c **** 	}
 110:../Sources/main.c **** 	
 111:../Sources/main.c **** 	if(tmpRight && tmpLeft)
 607              		.loc 1 111 0
 608 00a8 3B1C     		mov	r3, r7
 609 00aa 0E33     		add	r3, r3, #14
 610 00ac 1B78     		ldrb	r3, [r3]
 611 00ae 002B     		cmp	r3, #0
 612 00b0 06D0     		beq	.L27
 613              		.loc 1 111 0 is_stmt 0
 614 00b2 3B1C     		mov	r3, r7
 615 00b4 0F33     		add	r3, r3, #15
 616 00b6 1B78     		ldrb	r3, [r3]
 617 00b8 002B     		cmp	r3, #0
 618 00ba 01D0     		beq	.L27
 112:../Sources/main.c **** 	{
 113:../Sources/main.c **** 		return true;
 619              		.loc 1 113 0 is_stmt 1
 620 00bc 0123     		mov	r3, #1
 621 00be 0AE0     		b	.L25
 622              	.L27:
 114:../Sources/main.c **** 	}
 115:../Sources/main.c **** 	
 116:../Sources/main.c **** 	startLeft = tmpLeft;
 623              		.loc 1 116 0
 624 00c0 074B     		ldr	r3, .L28
 625 00c2 3A1C     		mov	r2, r7
 626 00c4 0F32     		add	r2, r2, #15
 627 00c6 1278     		ldrb	r2, [r2]
 628 00c8 1A70     		strb	r2, [r3]
 117:../Sources/main.c **** 	startRight = tmpRight;
 629              		.loc 1 117 0
 630 00ca 064B     		ldr	r3, .L28+4
 631 00cc 3A1C     		mov	r2, r7
 632 00ce 0E32     		add	r2, r2, #14
 633 00d0 1278     		ldrb	r2, [r2]
 634 00d2 1A70     		strb	r2, [r3]
 118:../Sources/main.c **** 
 119:../Sources/main.c **** 	return false;
 635              		.loc 1 119 0
 636 00d4 0023     		mov	r3, #0
 637              	.L25:
 120:../Sources/main.c **** }
 638              		.loc 1 120 0
 639 00d6 181C     		mov	r0, r3
 640 00d8 BD46     		mov	sp, r7
 641 00da 04B0     		add	sp, sp, #16
 642              		@ sp needed for prologue
 643 00dc 80BD     		pop	{r7, pc}
 644              	.L29:
 645 00de C046     		.align	2
 646              	.L28:
 647 00e0 00000000 		.word	startLeft
 648 00e4 00000000 		.word	startRight
 649              		.cfi_endproc
 650              	.LFE4:
 652              		.section	.text.checkModeChange,"ax",%progbits
 653              		.align	2
 654              		.global	checkModeChange
 655              		.code	16
 656              		.thumb_func
 658              	checkModeChange:
 659              	.LFB5:
 121:../Sources/main.c **** 
 122:../Sources/main.c **** void checkModeChange(uint16_t currentMode)
 123:../Sources/main.c **** {
 660              		.loc 1 123 0
 661              		.cfi_startproc
 662 0000 80B5     		push	{r7, lr}
 663              	.LCFI15:
 664              		.cfi_def_cfa_offset 8
 665              		.cfi_offset 7, -8
 666              		.cfi_offset 14, -4
 667 0002 82B0     		sub	sp, sp, #8
 668              	.LCFI16:
 669              		.cfi_def_cfa_offset 16
 670 0004 00AF     		add	r7, sp, #0
 671              	.LCFI17:
 672              		.cfi_def_cfa_register 7
 673 0006 021C     		mov	r2, r0
 674 0008 BB1D     		add	r3, r7, #6
 675 000a 1A80     		strh	r2, [r3]
 124:../Sources/main.c **** 	if(currentMode != lastMode)
 676              		.loc 1 124 0
 677 000c 0A4B     		ldr	r3, .L32
 678 000e 1B88     		ldrh	r3, [r3]
 679 0010 BA1D     		add	r2, r7, #6
 680 0012 1288     		ldrh	r2, [r2]
 681 0014 9A42     		cmp	r2, r3
 682 0016 0CD0     		beq	.L30
 125:../Sources/main.c **** 	{
 126:../Sources/main.c **** 		lastMode = currentMode;
 683              		.loc 1 126 0
 684 0018 074B     		ldr	r3, .L32
 685 001a BA1D     		add	r2, r7, #6
 686 001c 1288     		ldrh	r2, [r2]
 687 001e 1A80     		strh	r2, [r3]
 127:../Sources/main.c **** 		overStart = false;
 688              		.loc 1 127 0
 689 0020 064B     		ldr	r3, .L32+4
 690 0022 0022     		mov	r2, #0
 691 0024 1A70     		strb	r2, [r3]
 128:../Sources/main.c **** 		ttl = TTL;
 692              		.loc 1 128 0
 693 0026 064B     		ldr	r3, .L32+8
 694 0028 6422     		mov	r2, #100
 695 002a 1A80     		strh	r2, [r3]
 129:../Sources/main.c **** 		hill = false;
 696              		.loc 1 129 0
 697 002c 054B     		ldr	r3, .L32+12
 698 002e 0022     		mov	r2, #0
 699 0030 1A70     		strb	r2, [r3]
 700              	.L30:
 130:../Sources/main.c **** 	}
 131:../Sources/main.c **** }
 701              		.loc 1 131 0
 702 0032 BD46     		mov	sp, r7
 703 0034 02B0     		add	sp, sp, #8
 704              		@ sp needed for prologue
 705 0036 80BD     		pop	{r7, pc}
 706              	.L33:
 707              		.align	2
 708              	.L32:
 709 0038 00000000 		.word	lastMode
 710 003c 00000000 		.word	overStart
 711 0040 00000000 		.word	ttl
 712 0044 00000000 		.word	hill
 713              		.cfi_endproc
 714              	.LFE5:
 716              		.section	.text.disableMotor,"ax",%progbits
 717              		.align	2
 718              		.global	disableMotor
 719              		.code	16
 720              		.thumb_func
 722              	disableMotor:
 723              	.LFB6:
 132:../Sources/main.c **** 
 133:../Sources/main.c **** void disableMotor() 
 134:../Sources/main.c **** {
 724              		.loc 1 134 0
 725              		.cfi_startproc
 726 0000 80B5     		push	{r7, lr}
 727              	.LCFI18:
 728              		.cfi_def_cfa_offset 8
 729              		.cfi_offset 7, -8
 730              		.cfi_offset 14, -4
 731 0002 00AF     		add	r7, sp, #0
 732              	.LCFI19:
 733              		.cfi_def_cfa_register 7
 135:../Sources/main.c **** 	TFC_SetMotorPWM(0, 0);
 734              		.loc 1 135 0
 735 0004 0022     		mov	r2, #0
 736 0006 0023     		mov	r3, #0
 737 0008 101C     		add	r0, r2, #0
 738 000a 191C     		add	r1, r3, #0
 739 000c FFF7FEFF 		bl	TFC_SetMotorPWM
 136:../Sources/main.c **** 	TFC_HBRIDGE_DISABLE;
 740              		.loc 1 136 0
 741 0010 024B     		ldr	r3, .L35
 742 0012 8022     		mov	r2, #128
 743 0014 9203     		lsl	r2, r2, #14
 744 0016 9A60     		str	r2, [r3, #8]
 137:../Sources/main.c **** }
 745              		.loc 1 137 0
 746 0018 BD46     		mov	sp, r7
 747              		@ sp needed for prologue
 748 001a 80BD     		pop	{r7, pc}
 749              	.L36:
 750              		.align	2
 751              	.L35:
 752 001c 00F10F40 		.word	1074786560
 753              		.cfi_endproc
 754              	.LFE6:
 756              		.section	.text.enableMotor,"ax",%progbits
 757              		.align	2
 758              		.global	enableMotor
 759              		.code	16
 760              		.thumb_func
 762              	enableMotor:
 763              	.LFB7:
 138:../Sources/main.c **** 
 139:../Sources/main.c **** void enableMotor() 
 140:../Sources/main.c **** {
 764              		.loc 1 140 0
 765              		.cfi_startproc
 766 0000 80B5     		push	{r7, lr}
 767              	.LCFI20:
 768              		.cfi_def_cfa_offset 8
 769              		.cfi_offset 7, -8
 770              		.cfi_offset 14, -4
 771 0002 00AF     		add	r7, sp, #0
 772              	.LCFI21:
 773              		.cfi_def_cfa_register 7
 141:../Sources/main.c **** 	TFC_HBRIDGE_ENABLE;
 774              		.loc 1 141 0
 775 0004 024B     		ldr	r3, .L38
 776 0006 8022     		mov	r2, #128
 777 0008 9203     		lsl	r2, r2, #14
 778 000a 5A60     		str	r2, [r3, #4]
 142:../Sources/main.c **** }
 779              		.loc 1 142 0
 780 000c BD46     		mov	sp, r7
 781              		@ sp needed for prologue
 782 000e 80BD     		pop	{r7, pc}
 783              	.L39:
 784              		.align	2
 785              	.L38:
 786 0010 00F10F40 		.word	1074786560
 787              		.cfi_endproc
 788              	.LFE7:
 790              		.section	.text.resetImage,"ax",%progbits
 791              		.align	2
 792              		.global	resetImage
 793              		.code	16
 794              		.thumb_func
 796              	resetImage:
 797              	.LFB8:
 143:../Sources/main.c **** 
 144:../Sources/main.c **** void resetImage()
 145:../Sources/main.c **** {
 798              		.loc 1 145 0
 799              		.cfi_startproc
 800 0000 80B5     		push	{r7, lr}
 801              	.LCFI22:
 802              		.cfi_def_cfa_offset 8
 803              		.cfi_offset 7, -8
 804              		.cfi_offset 14, -4
 805 0002 00AF     		add	r7, sp, #0
 806              	.LCFI23:
 807              		.cfi_def_cfa_register 7
 146:../Sources/main.c **** 	LineScanImageReady=0;
 808              		.loc 1 146 0
 809 0004 024B     		ldr	r3, .L41
 810 0006 0022     		mov	r2, #0
 811 0008 1A70     		strb	r2, [r3]
 147:../Sources/main.c **** }
 812              		.loc 1 147 0
 813 000a BD46     		mov	sp, r7
 814              		@ sp needed for prologue
 815 000c 80BD     		pop	{r7, pc}
 816              	.L42:
 817 000e C046     		.align	2
 818              	.L41:
 819 0010 00000000 		.word	LineScanImageReady
 820              		.cfi_endproc
 821              	.LFE8:
 823              		.section	.text.resetTicker,"ax",%progbits
 824              		.align	2
 825              		.global	resetTicker
 826              		.code	16
 827              		.thumb_func
 829              	resetTicker:
 830              	.LFB9:
 148:../Sources/main.c **** 
 149:../Sources/main.c **** void resetTicker()
 150:../Sources/main.c **** {
 831              		.loc 1 150 0
 832              		.cfi_startproc
 833 0000 80B5     		push	{r7, lr}
 834              	.LCFI24:
 835              		.cfi_def_cfa_offset 8
 836              		.cfi_offset 7, -8
 837              		.cfi_offset 14, -4
 838 0002 00AF     		add	r7, sp, #0
 839              	.LCFI25:
 840              		.cfi_def_cfa_register 7
 151:../Sources/main.c **** 	TFC_Ticker[0] = 0;
 841              		.loc 1 151 0
 842 0004 024B     		ldr	r3, .L44
 843 0006 0022     		mov	r2, #0
 844 0008 1A60     		str	r2, [r3]
 152:../Sources/main.c **** }
 845              		.loc 1 152 0
 846 000a BD46     		mov	sp, r7
 847              		@ sp needed for prologue
 848 000c 80BD     		pop	{r7, pc}
 849              	.L45:
 850 000e C046     		.align	2
 851              	.L44:
 852 0010 00000000 		.word	TFC_Ticker
 853              		.cfi_endproc
 854              	.LFE9:
 856              		.section	.text.checkImageReadiness,"ax",%progbits
 857              		.align	2
 858              		.global	checkImageReadiness
 859              		.code	16
 860              		.thumb_func
 862              	checkImageReadiness:
 863              	.LFB10:
 153:../Sources/main.c **** 
 154:../Sources/main.c **** bool checkImageReadiness()
 155:../Sources/main.c **** {
 864              		.loc 1 155 0
 865              		.cfi_startproc
 866 0000 80B5     		push	{r7, lr}
 867              	.LCFI26:
 868              		.cfi_def_cfa_offset 8
 869              		.cfi_offset 7, -8
 870              		.cfi_offset 14, -4
 871 0002 00AF     		add	r7, sp, #0
 872              	.LCFI27:
 873              		.cfi_def_cfa_register 7
 156:../Sources/main.c **** 	return LineScanImageReady==1;
 874              		.loc 1 156 0
 875 0004 044B     		ldr	r3, .L48
 876 0006 1B78     		ldrb	r3, [r3]
 877 0008 DBB2     		uxtb	r3, r3
 878 000a 013B     		sub	r3, r3, #1
 879 000c 5A42     		neg	r2, r3
 880 000e 5341     		adc	r3, r3, r2
 881 0010 DBB2     		uxtb	r3, r3
 157:../Sources/main.c **** }
 882              		.loc 1 157 0
 883 0012 181C     		mov	r0, r3
 884 0014 BD46     		mov	sp, r7
 885              		@ sp needed for prologue
 886 0016 80BD     		pop	{r7, pc}
 887              	.L49:
 888              		.align	2
 889              	.L48:
 890 0018 00000000 		.word	LineScanImageReady
 891              		.cfi_endproc
 892              	.LFE10:
 894              		.global	__aeabi_f2d
 895              		.global	__aeabi_dcmplt
 896              		.global	__aeabi_dcmpgt
 897              		.global	__aeabi_dadd
 898              		.global	__aeabi_dmul
 899              		.global	__aeabi_d2f
 900              		.section	.text.getInnerSpeed,"ax",%progbits
 901              		.align	2
 902              		.global	getInnerSpeed
 903              		.code	16
 904              		.thumb_func
 906              	getInnerSpeed:
 907              	.LFB11:
 158:../Sources/main.c **** 
 159:../Sources/main.c **** float getInnerSpeed(float outerSpeed, float angle)
 160:../Sources/main.c **** {
 908              		.loc 1 160 0
 909              		.cfi_startproc
 910 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 911              	.LCFI28:
 912              		.cfi_def_cfa_offset 20
 913              		.cfi_offset 4, -20
 914              		.cfi_offset 5, -16
 915              		.cfi_offset 6, -12
 916              		.cfi_offset 7, -8
 917              		.cfi_offset 14, -4
 918 0002 83B0     		sub	sp, sp, #12
 919              	.LCFI29:
 920              		.cfi_def_cfa_offset 32
 921 0004 00AF     		add	r7, sp, #0
 922              	.LCFI30:
 923              		.cfi_def_cfa_register 7
 924 0006 7860     		str	r0, [r7, #4]
 925 0008 3960     		str	r1, [r7]
 161:../Sources/main.c **** 	if(angle < 20.2 && angle > -20.2)
 926              		.loc 1 161 0
 927 000a 3868     		ldr	r0, [r7]
 928 000c FFF7FEFF 		bl	__aeabi_f2d
 929 0010 031C     		mov	r3, r0
 930 0012 0C1C     		mov	r4, r1
 931 0014 181C     		mov	r0, r3
 932 0016 211C     		mov	r1, r4
 933 0018 264B     		ldr	r3, .L57+4
 934 001a 254A     		ldr	r2, .L57
 935 001c FFF7FEFF 		bl	__aeabi_dcmplt
 936 0020 031C     		mov	r3, r0
 937 0022 002B     		cmp	r3, #0
 938 0024 0FD0     		beq	.L51
 939              	.L55:
 940              		.loc 1 161 0 is_stmt 0
 941 0026 3868     		ldr	r0, [r7]
 942 0028 FFF7FEFF 		bl	__aeabi_f2d
 943 002c 031C     		mov	r3, r0
 944 002e 0C1C     		mov	r4, r1
 945 0030 181C     		mov	r0, r3
 946 0032 211C     		mov	r1, r4
 947 0034 204A     		ldr	r2, .L57+8
 948 0036 214B     		ldr	r3, .L57+12
 949 0038 FFF7FEFF 		bl	__aeabi_dcmpgt
 950 003c 031C     		mov	r3, r0
 951 003e 002B     		cmp	r3, #0
 952 0040 01D0     		beq	.L51
 953              	.L56:
 162:../Sources/main.c **** 		return outerSpeed;
 954              		.loc 1 162 0 is_stmt 1
 955 0042 7B68     		ldr	r3, [r7, #4]
 956 0044 2EE0     		b	.L54
 957              	.L51:
 163:../Sources/main.c **** 	return ((0+cos(angle))*outerSpeed+0.25);
 958              		.loc 1 163 0
 959 0046 3868     		ldr	r0, [r7]
 960 0048 FFF7FEFF 		bl	__aeabi_f2d
 961 004c 031C     		mov	r3, r0
 962 004e 0C1C     		mov	r4, r1
 963 0050 181C     		mov	r0, r3
 964 0052 211C     		mov	r1, r4
 965 0054 FFF7FEFF 		bl	cos
 966 0058 031C     		mov	r3, r0
 967 005a 0C1C     		mov	r4, r1
 968 005c 181C     		mov	r0, r3
 969 005e 211C     		mov	r1, r4
 970 0060 174A     		ldr	r2, .L57+16
 971 0062 184B     		ldr	r3, .L57+20
 972 0064 FFF7FEFF 		bl	__aeabi_dadd
 973 0068 031C     		mov	r3, r0
 974 006a 0C1C     		mov	r4, r1
 975 006c 1D1C     		mov	r5, r3
 976 006e 261C     		mov	r6, r4
 977 0070 7868     		ldr	r0, [r7, #4]
 978 0072 FFF7FEFF 		bl	__aeabi_f2d
 979 0076 031C     		mov	r3, r0
 980 0078 0C1C     		mov	r4, r1
 981 007a 281C     		mov	r0, r5
 982 007c 311C     		mov	r1, r6
 983 007e 1A1C     		mov	r2, r3
 984 0080 231C     		mov	r3, r4
 985 0082 FFF7FEFF 		bl	__aeabi_dmul
 986 0086 031C     		mov	r3, r0
 987 0088 0C1C     		mov	r4, r1
 988 008a 181C     		mov	r0, r3
 989 008c 211C     		mov	r1, r4
 990 008e 0E4A     		ldr	r2, .L57+24
 991 0090 0E4B     		ldr	r3, .L57+28
 992 0092 FFF7FEFF 		bl	__aeabi_dadd
 993 0096 031C     		mov	r3, r0
 994 0098 0C1C     		mov	r4, r1
 995 009a 181C     		mov	r0, r3
 996 009c 211C     		mov	r1, r4
 997 009e FFF7FEFF 		bl	__aeabi_d2f
 998 00a2 031C     		add	r3, r0, #0
 999              	.L54:
 164:../Sources/main.c **** }
 1000              		.loc 1 164 0
 1001 00a4 181C     		add	r0, r3, #0
 1002 00a6 BD46     		mov	sp, r7
 1003 00a8 03B0     		add	sp, sp, #12
 1004              		@ sp needed for prologue
 1005 00aa F0BD     		pop	{r4, r5, r6, r7, pc}
 1006              	.L58:
 1007 00ac C046C046 		.align	3
 1008              	.L57:
 1009 00b0 33333333 		.word	858993459
 1010 00b4 33333440 		.word	1077162803
 1011 00b8 33333333 		.word	858993459
 1012 00bc 333334C0 		.word	-1070320845
 1013 00c0 00000000 		.word	0
 1014 00c4 00000000 		.word	0
 1015 00c8 00000000 		.word	0
 1016 00cc 0000D03F 		.word	1070596096
 1017              		.cfi_endproc
 1018              	.LFE11:
 1020              		.global	__aeabi_i2d
 1021              		.global	__aeabi_ddiv
 1022              		.global	__aeabi_d2uiz
 1023              		.global	__aeabi_fcmple
 1024              		.global	__aeabi_dsub
 1025              		.section	.text.findBlack_IT,"ax",%progbits
 1026              		.align	2
 1027              		.global	findBlack_IT
 1028              		.code	16
 1029              		.thumb_func
 1031              	findBlack_IT:
 1032              	.LFB12:
 165:../Sources/main.c **** 
 166:../Sources/main.c **** uint16_t findBlack_IT(uint16_t offset, uint16_t length)
 167:../Sources/main.c **** {
 1033              		.loc 1 167 0
 1034              		.cfi_startproc
 1035 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1036              	.LCFI31:
 1037              		.cfi_def_cfa_offset 20
 1038              		.cfi_offset 4, -20
 1039              		.cfi_offset 5, -16
 1040              		.cfi_offset 6, -12
 1041              		.cfi_offset 7, -8
 1042              		.cfi_offset 14, -4
 1043 0002 8FB0     		sub	sp, sp, #60
 1044              	.LCFI32:
 1045              		.cfi_def_cfa_offset 80
 1046 0004 00AF     		add	r7, sp, #0
 1047              	.LCFI33:
 1048              		.cfi_def_cfa_register 7
 1049 0006 0A1C     		mov	r2, r1
 1050 0008 3B1C     		mov	r3, r7
 1051 000a 2633     		add	r3, r3, #38
 1052 000c 011C     		add	r1, r0, #0
 1053 000e 1980     		strh	r1, [r3]
 1054 0010 3B1C     		mov	r3, r7
 1055 0012 2433     		add	r3, r3, #36
 1056 0014 1A80     		strh	r2, [r3]
 168:../Sources/main.c **** 	int i,j;
 169:../Sources/main.c **** 	uint16_t halfLength = (uint16_t)(length/2.0);
 1057              		.loc 1 169 0
 1058 0016 3B1C     		mov	r3, r7
 1059 0018 2433     		add	r3, r3, #36
 1060 001a 1B88     		ldrh	r3, [r3]
 1061 001c 181C     		mov	r0, r3
 1062 001e FFF7FEFF 		bl	__aeabi_i2d
 1063 0022 031C     		mov	r3, r0
 1064 0024 0C1C     		mov	r4, r1
 1065 0026 181C     		mov	r0, r3
 1066 0028 211C     		mov	r1, r4
 1067 002a 8E4B     		ldr	r3, .L70+4
 1068 002c 8C4A     		ldr	r2, .L70
 1069 002e FFF7FEFF 		bl	__aeabi_ddiv
 1070 0032 031C     		mov	r3, r0
 1071 0034 0C1C     		mov	r4, r1
 1072 0036 3D1C     		mov	r5, r7
 1073 0038 2E35     		add	r5, r5, #46
 1074 003a 181C     		mov	r0, r3
 1075 003c 211C     		mov	r1, r4
 1076 003e FFF7FEFF 		bl	__aeabi_d2uiz
 1077 0042 031C     		mov	r3, r0
 1078 0044 2B80     		strh	r3, [r5]
 170:../Sources/main.c **** 	for(i=0; i<5; i++)
 1079              		.loc 1 170 0
 1080 0046 0023     		mov	r3, #0
 1081 0048 7B63     		str	r3, [r7, #52]
 1082 004a FDE0     		b	.L60
 1083              	.L67:
 171:../Sources/main.c **** 	{
 172:../Sources/main.c **** 		for(j=0; j<pow(2, i+1); j=j+2)
 1084              		.loc 1 172 0
 1085 004c 0023     		mov	r3, #0
 1086 004e 3B63     		str	r3, [r7, #48]
 1087 0050 D0E0     		b	.L61
 1088              	.L66:
 173:../Sources/main.c **** 		{
 174:../Sources/main.c **** 			if(old_diff<=0)
 1089              		.loc 1 174 0
 1090 0052 874B     		ldr	r3, .L70+16
 1091 0054 1B68     		ldr	r3, [r3]
 1092 0056 181C     		add	r0, r3, #0
 1093 0058 0021     		mov	r1, #0
 1094 005a FFF7FEFF 		bl	__aeabi_fcmple
 1095 005e 031C     		mov	r3, r0
 1096 0060 002B     		cmp	r3, #0
 1097 0062 21D0     		beq	.L69
 1098              	.L68:
 175:../Sources/main.c **** 			{	
 176:../Sources/main.c **** 				if(isBlack(offset + (j+1)*halfLength))
 1099              		.loc 1 176 0
 1100 0064 3B6B     		ldr	r3, [r7, #48]
 1101 0066 0133     		add	r3, r3, #1
 1102 0068 9BB2     		uxth	r3, r3
 1103 006a 3A1C     		mov	r2, r7
 1104 006c 2E32     		add	r2, r2, #46
 1105 006e 1288     		ldrh	r2, [r2]
 1106 0070 5343     		mul	r3, r2
 1107 0072 9AB2     		uxth	r2, r3
 1108 0074 3B1C     		mov	r3, r7
 1109 0076 2633     		add	r3, r3, #38
 1110 0078 1B88     		ldrh	r3, [r3]
 1111 007a D318     		add	r3, r2, r3
 1112 007c 9BB2     		uxth	r3, r3
 1113 007e 181C     		mov	r0, r3
 1114 0080 FFF7FEFF 		bl	isBlack
 1115 0084 031C     		mov	r3, r0
 1116 0086 002B     		cmp	r3, #0
 1117 0088 00D1     		bne	.LCB819
 1118 008a B0E0     		b	.L64	@long jump
 1119              	.LCB819:
 177:../Sources/main.c **** 					return offset + (j+1)*halfLength;
 1120              		.loc 1 177 0
 1121 008c 3B6B     		ldr	r3, [r7, #48]
 1122 008e 0133     		add	r3, r3, #1
 1123 0090 9BB2     		uxth	r3, r3
 1124 0092 3A1C     		mov	r2, r7
 1125 0094 2E32     		add	r2, r2, #46
 1126 0096 1288     		ldrh	r2, [r2]
 1127 0098 5343     		mul	r3, r2
 1128 009a 9AB2     		uxth	r2, r3
 1129 009c 3B1C     		mov	r3, r7
 1130 009e 2633     		add	r3, r3, #38
 1131 00a0 1B88     		ldrh	r3, [r3]
 1132 00a2 D318     		add	r3, r2, r3
 1133 00a4 9BB2     		uxth	r3, r3
 1134 00a6 D4E0     		b	.L65
 1135              	.L69:
 178:../Sources/main.c **** 			}
 179:../Sources/main.c **** 			else
 180:../Sources/main.c **** 			{
 181:../Sources/main.c **** 				if(isBlack(offset + (pow(2, i+1)-j-1)*halfLength))
 1136              		.loc 1 181 0
 1137 00a8 3B1C     		mov	r3, r7
 1138 00aa 2633     		add	r3, r3, #38
 1139 00ac 1B88     		ldrh	r3, [r3]
 1140 00ae 181C     		mov	r0, r3
 1141 00b0 FFF7FEFF 		bl	__aeabi_i2d
 1142 00b4 051C     		mov	r5, r0
 1143 00b6 0E1C     		mov	r6, r1
 1144 00b8 7B6B     		ldr	r3, [r7, #52]
 1145 00ba 0133     		add	r3, r3, #1
 1146 00bc 181C     		mov	r0, r3
 1147 00be FFF7FEFF 		bl	__aeabi_i2d
 1148 00c2 031C     		mov	r3, r0
 1149 00c4 0C1C     		mov	r4, r1
 1150 00c6 674A     		ldr	r2, .L70+4
 1151 00c8 6549     		ldr	r1, .L70
 1152 00ca 081C     		mov	r0, r1
 1153 00cc 111C     		mov	r1, r2
 1154 00ce 1A1C     		mov	r2, r3
 1155 00d0 231C     		mov	r3, r4
 1156 00d2 FFF7FEFF 		bl	pow
 1157 00d6 B861     		str	r0, [r7, #24]
 1158 00d8 F961     		str	r1, [r7, #28]
 1159 00da 386B     		ldr	r0, [r7, #48]
 1160 00dc FFF7FEFF 		bl	__aeabi_i2d
 1161 00e0 031C     		mov	r3, r0
 1162 00e2 0C1C     		mov	r4, r1
 1163 00e4 B869     		ldr	r0, [r7, #24]
 1164 00e6 F969     		ldr	r1, [r7, #28]
 1165 00e8 1A1C     		mov	r2, r3
 1166 00ea 231C     		mov	r3, r4
 1167 00ec FFF7FEFF 		bl	__aeabi_dsub
 1168 00f0 031C     		mov	r3, r0
 1169 00f2 0C1C     		mov	r4, r1
 1170 00f4 181C     		mov	r0, r3
 1171 00f6 211C     		mov	r1, r4
 1172 00f8 5B4A     		ldr	r2, .L70+8
 1173 00fa 5C4B     		ldr	r3, .L70+12
 1174 00fc FFF7FEFF 		bl	__aeabi_dsub
 1175 0100 031C     		mov	r3, r0
 1176 0102 0C1C     		mov	r4, r1
 1177 0104 3B61     		str	r3, [r7, #16]
 1178 0106 7C61     		str	r4, [r7, #20]
 1179 0108 3B1C     		mov	r3, r7
 1180 010a 2E33     		add	r3, r3, #46
 1181 010c 1B88     		ldrh	r3, [r3]
 1182 010e 181C     		mov	r0, r3
 1183 0110 FFF7FEFF 		bl	__aeabi_i2d
 1184 0114 031C     		mov	r3, r0
 1185 0116 0C1C     		mov	r4, r1
 1186 0118 3869     		ldr	r0, [r7, #16]
 1187 011a 7969     		ldr	r1, [r7, #20]
 1188 011c 1A1C     		mov	r2, r3
 1189 011e 231C     		mov	r3, r4
 1190 0120 FFF7FEFF 		bl	__aeabi_dmul
 1191 0124 031C     		mov	r3, r0
 1192 0126 0C1C     		mov	r4, r1
 1193 0128 281C     		mov	r0, r5
 1194 012a 311C     		mov	r1, r6
 1195 012c 1A1C     		mov	r2, r3
 1196 012e 231C     		mov	r3, r4
 1197 0130 FFF7FEFF 		bl	__aeabi_dadd
 1198 0134 031C     		mov	r3, r0
 1199 0136 0C1C     		mov	r4, r1
 1200 0138 181C     		mov	r0, r3
 1201 013a 211C     		mov	r1, r4
 1202 013c FFF7FEFF 		bl	__aeabi_d2uiz
 1203 0140 031C     		mov	r3, r0
 1204 0142 9BB2     		uxth	r3, r3
 1205 0144 181C     		mov	r0, r3
 1206 0146 FFF7FEFF 		bl	isBlack
 1207 014a 031C     		mov	r3, r0
 1208 014c 002B     		cmp	r3, #0
 1209 014e 4ED0     		beq	.L64
 182:../Sources/main.c **** 					return offset + (pow(2, i+1)-j-1)*halfLength;
 1210              		.loc 1 182 0
 1211 0150 3B1C     		mov	r3, r7
 1212 0152 2633     		add	r3, r3, #38
 1213 0154 1B88     		ldrh	r3, [r3]
 1214 0156 181C     		mov	r0, r3
 1215 0158 FFF7FEFF 		bl	__aeabi_i2d
 1216 015c 051C     		mov	r5, r0
 1217 015e 0E1C     		mov	r6, r1
 1218 0160 7B6B     		ldr	r3, [r7, #52]
 1219 0162 0133     		add	r3, r3, #1
 1220 0164 181C     		mov	r0, r3
 1221 0166 FFF7FEFF 		bl	__aeabi_i2d
 1222 016a 031C     		mov	r3, r0
 1223 016c 0C1C     		mov	r4, r1
 1224 016e 3D4A     		ldr	r2, .L70+4
 1225 0170 3B49     		ldr	r1, .L70
 1226 0172 081C     		mov	r0, r1
 1227 0174 111C     		mov	r1, r2
 1228 0176 1A1C     		mov	r2, r3
 1229 0178 231C     		mov	r3, r4
 1230 017a FFF7FEFF 		bl	pow
 1231 017e B860     		str	r0, [r7, #8]
 1232 0180 F960     		str	r1, [r7, #12]
 1233 0182 386B     		ldr	r0, [r7, #48]
 1234 0184 FFF7FEFF 		bl	__aeabi_i2d
 1235 0188 031C     		mov	r3, r0
 1236 018a 0C1C     		mov	r4, r1
 1237 018c B868     		ldr	r0, [r7, #8]
 1238 018e F968     		ldr	r1, [r7, #12]
 1239 0190 1A1C     		mov	r2, r3
 1240 0192 231C     		mov	r3, r4
 1241 0194 FFF7FEFF 		bl	__aeabi_dsub
 1242 0198 031C     		mov	r3, r0
 1243 019a 0C1C     		mov	r4, r1
 1244 019c 181C     		mov	r0, r3
 1245 019e 211C     		mov	r1, r4
 1246 01a0 314A     		ldr	r2, .L70+8
 1247 01a2 324B     		ldr	r3, .L70+12
 1248 01a4 FFF7FEFF 		bl	__aeabi_dsub
 1249 01a8 031C     		mov	r3, r0
 1250 01aa 0C1C     		mov	r4, r1
 1251 01ac 3B60     		str	r3, [r7]
 1252 01ae 7C60     		str	r4, [r7, #4]
 1253 01b0 3B1C     		mov	r3, r7
 1254 01b2 2E33     		add	r3, r3, #46
 1255 01b4 1B88     		ldrh	r3, [r3]
 1256 01b6 181C     		mov	r0, r3
 1257 01b8 FFF7FEFF 		bl	__aeabi_i2d
 1258 01bc 031C     		mov	r3, r0
 1259 01be 0C1C     		mov	r4, r1
 1260 01c0 3868     		ldr	r0, [r7]
 1261 01c2 7968     		ldr	r1, [r7, #4]
 1262 01c4 1A1C     		mov	r2, r3
 1263 01c6 231C     		mov	r3, r4
 1264 01c8 FFF7FEFF 		bl	__aeabi_dmul
 1265 01cc 031C     		mov	r3, r0
 1266 01ce 0C1C     		mov	r4, r1
 1267 01d0 281C     		mov	r0, r5
 1268 01d2 311C     		mov	r1, r6
 1269 01d4 1A1C     		mov	r2, r3
 1270 01d6 231C     		mov	r3, r4
 1271 01d8 FFF7FEFF 		bl	__aeabi_dadd
 1272 01dc 031C     		mov	r3, r0
 1273 01de 0C1C     		mov	r4, r1
 1274 01e0 181C     		mov	r0, r3
 1275 01e2 211C     		mov	r1, r4
 1276 01e4 FFF7FEFF 		bl	__aeabi_d2uiz
 1277 01e8 031C     		mov	r3, r0
 1278 01ea 9BB2     		uxth	r3, r3
 1279 01ec 31E0     		b	.L65
 1280              	.L64:
 172:../Sources/main.c **** 		for(j=0; j<pow(2, i+1); j=j+2)
 1281              		.loc 1 172 0
 1282 01ee 3B6B     		ldr	r3, [r7, #48]
 1283 01f0 0233     		add	r3, r3, #2
 1284 01f2 3B63     		str	r3, [r7, #48]
 1285              	.L61:
 172:../Sources/main.c **** 		for(j=0; j<pow(2, i+1); j=j+2)
 1286              		.loc 1 172 0 is_stmt 0
 1287 01f4 386B     		ldr	r0, [r7, #48]
 1288 01f6 FFF7FEFF 		bl	__aeabi_i2d
 1289 01fa 051C     		mov	r5, r0
 1290 01fc 0E1C     		mov	r6, r1
 1291 01fe 7B6B     		ldr	r3, [r7, #52]
 1292 0200 0133     		add	r3, r3, #1
 1293 0202 181C     		mov	r0, r3
 1294 0204 FFF7FEFF 		bl	__aeabi_i2d
 1295 0208 031C     		mov	r3, r0
 1296 020a 0C1C     		mov	r4, r1
 1297 020c 154A     		ldr	r2, .L70+4
 1298 020e 1449     		ldr	r1, .L70
 1299 0210 081C     		mov	r0, r1
 1300 0212 111C     		mov	r1, r2
 1301 0214 1A1C     		mov	r2, r3
 1302 0216 231C     		mov	r3, r4
 1303 0218 FFF7FEFF 		bl	pow
 1304 021c 031C     		mov	r3, r0
 1305 021e 0C1C     		mov	r4, r1
 1306 0220 281C     		mov	r0, r5
 1307 0222 311C     		mov	r1, r6
 1308 0224 1A1C     		mov	r2, r3
 1309 0226 231C     		mov	r3, r4
 1310 0228 FFF7FEFF 		bl	__aeabi_dcmplt
 1311 022c 031C     		mov	r3, r0
 1312 022e 002B     		cmp	r3, #0
 1313 0230 00D0     		beq	.LCB1000
 1314 0232 0EE7     		b	.L66	@long jump
 1315              	.LCB1000:
 183:../Sources/main.c **** 			}
 184:../Sources/main.c **** 		}
 185:../Sources/main.c **** 		halfLength = halfLength / 2;
 1316              		.loc 1 185 0 is_stmt 1
 1317 0234 3B1C     		mov	r3, r7
 1318 0236 2E33     		add	r3, r3, #46
 1319 0238 3A1C     		mov	r2, r7
 1320 023a 2E32     		add	r2, r2, #46
 1321 023c 1288     		ldrh	r2, [r2]
 1322 023e 5208     		lsr	r2, r2, #1
 1323 0240 1A80     		strh	r2, [r3]
 170:../Sources/main.c **** 	for(i=0; i<5; i++)
 1324              		.loc 1 170 0
 1325 0242 7B6B     		ldr	r3, [r7, #52]
 1326 0244 0133     		add	r3, r3, #1
 1327 0246 7B63     		str	r3, [r7, #52]
 1328              	.L60:
 170:../Sources/main.c **** 	for(i=0; i<5; i++)
 1329              		.loc 1 170 0 is_stmt 0
 1330 0248 7B6B     		ldr	r3, [r7, #52]
 1331 024a 042B     		cmp	r3, #4
 1332 024c 00DC     		bgt	.LCB1015
 1333 024e FDE6     		b	.L67	@long jump
 1334              	.LCB1015:
 186:../Sources/main.c **** 	}
 187:../Sources/main.c **** 	return 200;
 1335              		.loc 1 187 0 is_stmt 1
 1336 0250 C823     		mov	r3, #200
 1337              	.L65:
 188:../Sources/main.c **** }
 1338              		.loc 1 188 0
 1339 0252 181C     		mov	r0, r3
 1340 0254 BD46     		mov	sp, r7
 1341 0256 0FB0     		add	sp, sp, #60
 1342              		@ sp needed for prologue
 1343 0258 F0BD     		pop	{r4, r5, r6, r7, pc}
 1344              	.L71:
 1345 025a C046C046 		.align	3
 1345      C046
 1346              	.L70:
 1347 0260 00000000 		.word	0
 1348 0264 00000040 		.word	1073741824
 1349 0268 00000000 		.word	0
 1350 026c 0000F03F 		.word	1072693248
 1351 0270 00000000 		.word	old_diff
 1352              		.cfi_endproc
 1353              	.LFE12:
 1355 0274 C046C046 		.section	.text.findBlack,"ax",%progbits
 1356              		.align	2
 1357              		.global	findBlack
 1358              		.code	16
 1359              		.thumb_func
 1361              	findBlack:
 1362              	.LFB13:
 189:../Sources/main.c **** 
 190:../Sources/main.c **** uint16_t findBlack(uint16_t offset, uint16_t length, uint16_t ttl)
 191:../Sources/main.c **** {
 1363              		.loc 1 191 0
 1364              		.cfi_startproc
 1365 0000 B0B5     		push	{r4, r5, r7, lr}
 1366              	.LCFI34:
 1367              		.cfi_def_cfa_offset 16
 1368              		.cfi_offset 4, -16
 1369              		.cfi_offset 5, -12
 1370              		.cfi_offset 7, -8
 1371              		.cfi_offset 14, -4
 1372 0002 84B0     		sub	sp, sp, #16
 1373              	.LCFI35:
 1374              		.cfi_def_cfa_offset 32
 1375 0004 00AF     		add	r7, sp, #0
 1376              	.LCFI36:
 1377              		.cfi_def_cfa_register 7
 1378 0006 BB1D     		add	r3, r7, #6
 1379 0008 1880     		strh	r0, [r3]
 1380 000a 3B1D     		add	r3, r7, #4
 1381 000c 1980     		strh	r1, [r3]
 1382 000e BB1C     		add	r3, r7, #2
 1383 0010 1A80     		strh	r2, [r3]
 192:../Sources/main.c **** 	if(ttl==0)
 1384              		.loc 1 192 0
 1385 0012 BB1C     		add	r3, r7, #2
 1386 0014 1B88     		ldrh	r3, [r3]
 1387 0016 002B     		cmp	r3, #0
 1388 0018 01D1     		bne	.L73
 193:../Sources/main.c **** 		return 0;
 1389              		.loc 1 193 0
 1390 001a 0023     		mov	r3, #0
 1391 001c 6FE0     		b	.L74
 1392              	.L73:
 194:../Sources/main.c **** 	uint16_t halfLength = (uint16_t)(length/2.0);
 1393              		.loc 1 194 0
 1394 001e 3B1D     		add	r3, r7, #4
 1395 0020 1B88     		ldrh	r3, [r3]
 1396 0022 181C     		mov	r0, r3
 1397 0024 FFF7FEFF 		bl	__aeabi_i2d
 1398 0028 031C     		mov	r3, r0
 1399 002a 0C1C     		mov	r4, r1
 1400 002c 181C     		mov	r0, r3
 1401 002e 211C     		mov	r1, r4
 1402 0030 364B     		ldr	r3, .L78+4
 1403 0032 354A     		ldr	r2, .L78
 1404 0034 FFF7FEFF 		bl	__aeabi_ddiv
 1405 0038 031C     		mov	r3, r0
 1406 003a 0C1C     		mov	r4, r1
 1407 003c 3D1C     		mov	r5, r7
 1408 003e 0E35     		add	r5, r5, #14
 1409 0040 181C     		mov	r0, r3
 1410 0042 211C     		mov	r1, r4
 1411 0044 FFF7FEFF 		bl	__aeabi_d2uiz
 1412 0048 031C     		mov	r3, r0
 1413 004a 2B80     		strh	r3, [r5]
 195:../Sources/main.c **** 	if (isBlack(offset + halfLength) || isBlack(offset + halfLength -1))
 1414              		.loc 1 195 0
 1415 004c BA1D     		add	r2, r7, #6
 1416 004e 3B1C     		mov	r3, r7
 1417 0050 0E33     		add	r3, r3, #14
 1418 0052 1288     		ldrh	r2, [r2]
 1419 0054 1B88     		ldrh	r3, [r3]
 1420 0056 D318     		add	r3, r2, r3
 1421 0058 9BB2     		uxth	r3, r3
 1422 005a 181C     		mov	r0, r3
 1423 005c FFF7FEFF 		bl	isBlack
 1424 0060 031C     		mov	r3, r0
 1425 0062 002B     		cmp	r3, #0
 1426 0064 0ED1     		bne	.L75
 1427              		.loc 1 195 0 is_stmt 0
 1428 0066 BA1D     		add	r2, r7, #6
 1429 0068 3B1C     		mov	r3, r7
 1430 006a 0E33     		add	r3, r3, #14
 1431 006c 1288     		ldrh	r2, [r2]
 1432 006e 1B88     		ldrh	r3, [r3]
 1433 0070 D318     		add	r3, r2, r3
 1434 0072 9BB2     		uxth	r3, r3
 1435 0074 013B     		sub	r3, r3, #1
 1436 0076 9BB2     		uxth	r3, r3
 1437 0078 181C     		mov	r0, r3
 1438 007a FFF7FEFF 		bl	isBlack
 1439 007e 031C     		mov	r3, r0
 1440 0080 002B     		cmp	r3, #0
 1441 0082 07D0     		beq	.L76
 1442              	.L75:
 196:../Sources/main.c **** 		return offset+halfLength;
 1443              		.loc 1 196 0 is_stmt 1
 1444 0084 BA1D     		add	r2, r7, #6
 1445 0086 3B1C     		mov	r3, r7
 1446 0088 0E33     		add	r3, r3, #14
 1447 008a 1288     		ldrh	r2, [r2]
 1448 008c 1B88     		ldrh	r3, [r3]
 1449 008e D318     		add	r3, r2, r3
 1450 0090 9BB2     		uxth	r3, r3
 1451 0092 34E0     		b	.L74
 1452              	.L76:
 197:../Sources/main.c **** 
 198:../Sources/main.c **** 
 199:../Sources/main.c **** 	uint16_t left = findBlack(offset, halfLength, ttl-1);
 1453              		.loc 1 199 0
 1454 0094 BB1C     		add	r3, r7, #2
 1455 0096 1B88     		ldrh	r3, [r3]
 1456 0098 013B     		sub	r3, r3, #1
 1457 009a 9BB2     		uxth	r3, r3
 1458 009c 3C1C     		mov	r4, r7
 1459 009e 0C34     		add	r4, r4, #12
 1460 00a0 BA1D     		add	r2, r7, #6
 1461 00a2 1188     		ldrh	r1, [r2]
 1462 00a4 3A1C     		mov	r2, r7
 1463 00a6 0E32     		add	r2, r2, #14
 1464 00a8 1288     		ldrh	r2, [r2]
 1465 00aa 081C     		mov	r0, r1
 1466 00ac 111C     		mov	r1, r2
 1467 00ae 1A1C     		mov	r2, r3
 1468 00b0 FFF7FEFF 		bl	findBlack
 1469 00b4 031C     		mov	r3, r0
 1470 00b6 2380     		strh	r3, [r4]
 200:../Sources/main.c **** 	uint16_t right = findBlack(offset + halfLength, halfLength, ttl-1);
 1471              		.loc 1 200 0
 1472 00b8 BA1D     		add	r2, r7, #6
 1473 00ba 3B1C     		mov	r3, r7
 1474 00bc 0E33     		add	r3, r3, #14
 1475 00be 1288     		ldrh	r2, [r2]
 1476 00c0 1B88     		ldrh	r3, [r3]
 1477 00c2 D318     		add	r3, r2, r3
 1478 00c4 99B2     		uxth	r1, r3
 1479 00c6 BB1C     		add	r3, r7, #2
 1480 00c8 1B88     		ldrh	r3, [r3]
 1481 00ca 013B     		sub	r3, r3, #1
 1482 00cc 9BB2     		uxth	r3, r3
 1483 00ce 3C1C     		mov	r4, r7
 1484 00d0 0A34     		add	r4, r4, #10
 1485 00d2 3A1C     		mov	r2, r7
 1486 00d4 0E32     		add	r2, r2, #14
 1487 00d6 1288     		ldrh	r2, [r2]
 1488 00d8 081C     		mov	r0, r1
 1489 00da 111C     		mov	r1, r2
 1490 00dc 1A1C     		mov	r2, r3
 1491 00de FFF7FEFF 		bl	findBlack
 1492 00e2 031C     		mov	r3, r0
 1493 00e4 2380     		strh	r3, [r4]
 201:../Sources/main.c **** 
 202:../Sources/main.c **** 	if(left>0)
 1494              		.loc 1 202 0
 1495 00e6 3B1C     		mov	r3, r7
 1496 00e8 0C33     		add	r3, r3, #12
 1497 00ea 1B88     		ldrh	r3, [r3]
 1498 00ec 002B     		cmp	r3, #0
 1499 00ee 03D0     		beq	.L77
 203:../Sources/main.c **** 		return left;
 1500              		.loc 1 203 0
 1501 00f0 3B1C     		mov	r3, r7
 1502 00f2 0C33     		add	r3, r3, #12
 1503 00f4 1B88     		ldrh	r3, [r3]
 1504 00f6 02E0     		b	.L74
 1505              	.L77:
 204:../Sources/main.c **** 	else
 205:../Sources/main.c **** 		return right;
 1506              		.loc 1 205 0
 1507 00f8 3B1C     		mov	r3, r7
 1508 00fa 0A33     		add	r3, r3, #10
 1509 00fc 1B88     		ldrh	r3, [r3]
 1510              	.L74:
 206:../Sources/main.c **** }
 1511              		.loc 1 206 0
 1512 00fe 181C     		mov	r0, r3
 1513 0100 BD46     		mov	sp, r7
 1514 0102 04B0     		add	sp, sp, #16
 1515              		@ sp needed for prologue
 1516 0104 B0BD     		pop	{r4, r5, r7, pc}
 1517              	.L79:
 1518 0106 C046     		.align	3
 1519              	.L78:
 1520 0108 00000000 		.word	0
 1521 010c 00000040 		.word	1073741824
 1522              		.cfi_endproc
 1523              	.LFE13:
 1525              		.global	__aeabi_fadd
 1526              		.global	__aeabi_i2f
 1527              		.global	__aeabi_fsub
 1528              		.global	__aeabi_f2iz
 1529              		.global	__aeabi_fcmplt
 1530              		.global	__aeabi_fcmpgt
 1531              		.section	.text.IMPROVEDfindBlack,"ax",%progbits
 1532              		.align	2
 1533              		.global	IMPROVEDfindBlack
 1534              		.code	16
 1535              		.thumb_func
 1537              	IMPROVEDfindBlack:
 1538              	.LFB14:
 207:../Sources/main.c **** 
 208:../Sources/main.c **** int IMPROVEDfindBlack()
 209:../Sources/main.c **** {
 1539              		.loc 1 209 0
 1540              		.cfi_startproc
 1541 0000 90B5     		push	{r4, r7, lr}
 1542              	.LCFI37:
 1543              		.cfi_def_cfa_offset 12
 1544              		.cfi_offset 4, -12
 1545              		.cfi_offset 7, -8
 1546              		.cfi_offset 14, -4
 1547 0002 85B0     		sub	sp, sp, #20
 1548              	.LCFI38:
 1549              		.cfi_def_cfa_offset 32
 1550 0004 00AF     		add	r7, sp, #0
 1551              	.LCFI39:
 1552              		.cfi_def_cfa_register 7
 210:../Sources/main.c **** 	int i = 0, left, right;
 1553              		.loc 1 210 0
 1554 0006 0023     		mov	r3, #0
 1555 0008 FB60     		str	r3, [r7, #12]
 211:../Sources/main.c **** 
 212:../Sources/main.c **** 	for(i = 0; i <= 48; i++)
 1556              		.loc 1 212 0
 1557 000a 0023     		mov	r3, #0
 1558 000c FB60     		str	r3, [r7, #12]
 1559 000e 48E0     		b	.L81
 1560              	.L85:
 213:../Sources/main.c **** 	{
 214:../Sources/main.c **** 		left = 63+old_diff-i;
 1561              		.loc 1 214 0
 1562 0010 334B     		ldr	r3, .L96
 1563 0012 1B68     		ldr	r3, [r3]
 1564 0014 181C     		add	r0, r3, #0
 1565 0016 3349     		ldr	r1, .L96+4
 1566 0018 FFF7FEFF 		bl	__aeabi_fadd
 1567 001c 031C     		add	r3, r0, #0
 1568 001e 1C1C     		add	r4, r3, #0
 1569 0020 F868     		ldr	r0, [r7, #12]
 1570 0022 FFF7FEFF 		bl	__aeabi_i2f
 1571 0026 031C     		add	r3, r0, #0
 1572 0028 201C     		add	r0, r4, #0
 1573 002a 191C     		add	r1, r3, #0
 1574 002c FFF7FEFF 		bl	__aeabi_fsub
 1575 0030 031C     		add	r3, r0, #0
 1576 0032 181C     		add	r0, r3, #0
 1577 0034 FFF7FEFF 		bl	__aeabi_f2iz
 1578 0038 031C     		mov	r3, r0
 1579 003a BB60     		str	r3, [r7, #8]
 215:../Sources/main.c **** 		if(left>=STDOFFSET && isBlack(left))
 1580              		.loc 1 215 0
 1581 003c BB68     		ldr	r3, [r7, #8]
 1582 003e 042B     		cmp	r3, #4
 1583 0040 09DD     		ble	.L82
 1584              		.loc 1 215 0 is_stmt 0
 1585 0042 BB68     		ldr	r3, [r7, #8]
 1586 0044 9BB2     		uxth	r3, r3
 1587 0046 181C     		mov	r0, r3
 1588 0048 FFF7FEFF 		bl	isBlack
 1589 004c 031C     		mov	r3, r0
 1590 004e 002B     		cmp	r3, #0
 1591 0050 01D0     		beq	.L82
 216:../Sources/main.c **** 		{
 217:../Sources/main.c **** 			return left;
 1592              		.loc 1 217 0 is_stmt 1
 1593 0052 BB68     		ldr	r3, [r7, #8]
 1594 0054 3FE0     		b	.L83
 1595              	.L82:
 218:../Sources/main.c **** 		}
 219:../Sources/main.c **** 
 220:../Sources/main.c **** 		right = 63+old_diff+i;
 1596              		.loc 1 220 0
 1597 0056 224B     		ldr	r3, .L96
 1598 0058 1B68     		ldr	r3, [r3]
 1599 005a 181C     		add	r0, r3, #0
 1600 005c 2149     		ldr	r1, .L96+4
 1601 005e FFF7FEFF 		bl	__aeabi_fadd
 1602 0062 031C     		add	r3, r0, #0
 1603 0064 1C1C     		add	r4, r3, #0
 1604 0066 F868     		ldr	r0, [r7, #12]
 1605 0068 FFF7FEFF 		bl	__aeabi_i2f
 1606 006c 031C     		add	r3, r0, #0
 1607 006e 201C     		add	r0, r4, #0
 1608 0070 191C     		add	r1, r3, #0
 1609 0072 FFF7FEFF 		bl	__aeabi_fadd
 1610 0076 031C     		add	r3, r0, #0
 1611 0078 181C     		add	r0, r3, #0
 1612 007a FFF7FEFF 		bl	__aeabi_f2iz
 1613 007e 031C     		mov	r3, r0
 1614 0080 7B60     		str	r3, [r7, #4]
 221:../Sources/main.c **** 		if(right<(STDOFFSET+STDLENGTH) && isBlack(right))
 1615              		.loc 1 221 0
 1616 0082 7B68     		ldr	r3, [r7, #4]
 1617 0084 642B     		cmp	r3, #100
 1618 0086 09DC     		bgt	.L84
 1619              		.loc 1 221 0 is_stmt 0
 1620 0088 7B68     		ldr	r3, [r7, #4]
 1621 008a 9BB2     		uxth	r3, r3
 1622 008c 181C     		mov	r0, r3
 1623 008e FFF7FEFF 		bl	isBlack
 1624 0092 031C     		mov	r3, r0
 1625 0094 002B     		cmp	r3, #0
 1626 0096 01D0     		beq	.L84
 222:../Sources/main.c **** 		{
 223:../Sources/main.c **** 			return right;
 1627              		.loc 1 223 0 is_stmt 1
 1628 0098 7B68     		ldr	r3, [r7, #4]
 1629 009a 1CE0     		b	.L83
 1630              	.L84:
 212:../Sources/main.c **** 	for(i = 0; i <= 48; i++)
 1631              		.loc 1 212 0
 1632 009c FB68     		ldr	r3, [r7, #12]
 1633 009e 0133     		add	r3, r3, #1
 1634 00a0 FB60     		str	r3, [r7, #12]
 1635              	.L81:
 212:../Sources/main.c **** 	for(i = 0; i <= 48; i++)
 1636              		.loc 1 212 0 is_stmt 0
 1637 00a2 FB68     		ldr	r3, [r7, #12]
 1638 00a4 302B     		cmp	r3, #48
 1639 00a6 B3DD     		ble	.L85
 224:../Sources/main.c **** 		}
 225:../Sources/main.c **** 	}
 226:../Sources/main.c **** 
 227:../Sources/main.c **** 	return old_diff<-20? STDOFFSET : old_diff>20? STDOFFSET+STDLENGTH-1 : 63;
 1640              		.loc 1 227 0 is_stmt 1
 1641 00a8 0D4B     		ldr	r3, .L96
 1642 00aa 1B68     		ldr	r3, [r3]
 1643 00ac 181C     		add	r0, r3, #0
 1644 00ae 0E49     		ldr	r1, .L96+8
 1645 00b0 FFF7FEFF 		bl	__aeabi_fcmplt
 1646 00b4 031C     		mov	r3, r0
 1647 00b6 002B     		cmp	r3, #0
 1648 00b8 01D0     		beq	.L94
 1649              	.L92:
 1650              		.loc 1 227 0 is_stmt 0
 1651 00ba 0523     		mov	r3, #5
 1652 00bc 0BE0     		b	.L88
 1653              	.L94:
 1654              		.loc 1 227 0
 1655 00be 084B     		ldr	r3, .L96
 1656 00c0 1B68     		ldr	r3, [r3]
 1657 00c2 181C     		add	r0, r3, #0
 1658 00c4 0949     		ldr	r1, .L96+12
 1659 00c6 FFF7FEFF 		bl	__aeabi_fcmpgt
 1660 00ca 031C     		mov	r3, r0
 1661 00cc 002B     		cmp	r3, #0
 1662 00ce 01D0     		beq	.L95
 1663              	.L93:
 1664              		.loc 1 227 0
 1665 00d0 6423     		mov	r3, #100
 1666 00d2 00E0     		b	.L91
 1667              	.L95:
 1668              		.loc 1 227 0
 1669 00d4 3F23     		mov	r3, #63
 1670              	.L91:
 1671              	.L88:
 1672              	.L83:
 228:../Sources/main.c **** }
 1673              		.loc 1 228 0 is_stmt 1
 1674 00d6 181C     		mov	r0, r3
 1675 00d8 BD46     		mov	sp, r7
 1676 00da 05B0     		add	sp, sp, #20
 1677              		@ sp needed for prologue
 1678 00dc 90BD     		pop	{r4, r7, pc}
 1679              	.L97:
 1680 00de C046     		.align	2
 1681              	.L96:
 1682 00e0 00000000 		.word	old_diff
 1683 00e4 00007C42 		.word	1115422720
 1684 00e8 0000A0C1 		.word	-1046478848
 1685 00ec 0000A041 		.word	1101004800
 1686              		.cfi_endproc
 1687              	.LFE14:
 1689              		.global	__aeabi_uidivmod
 1690              		.section	.rodata
 1691 0005 000000   		.align	2
 1692              	.LC21:
 1693 0008 4900     		.ascii	"I\000"
 1694 000a 0000     		.align	2
 1695              	.LC23:
 1696 000c 5F00     		.ascii	"_\000"
 1697 000e 0000     		.align	2
 1698              	.LC25:
 1699 0010 2000     		.ascii	" \000"
 1700 0012 0000     		.align	2
 1701              	.LC27:
 1702 0014 20202000 		.ascii	"   \000"
 1703              		.align	2
 1704              	.LC29:
 1705 0018 0D0A0A00 		.ascii	"\015\012\012\000"
 1706              		.section	.text.streamCurrentImageDataInPuttyFormat,"ax",%progbits
 1707              		.align	2
 1708              		.global	streamCurrentImageDataInPuttyFormat
 1709              		.code	16
 1710              		.thumb_func
 1712              	streamCurrentImageDataInPuttyFormat:
 1713              	.LFB15:
 229:../Sources/main.c **** 
 230:../Sources/main.c **** void streamCurrentImageDataInPuttyFormat()
 231:../Sources/main.c **** {
 1714              		.loc 1 231 0
 1715              		.cfi_startproc
 1716 0000 80B5     		push	{r7, lr}
 1717              	.LCFI40:
 1718              		.cfi_def_cfa_offset 8
 1719              		.cfi_offset 7, -8
 1720              		.cfi_offset 14, -4
 1721 0002 82B0     		sub	sp, sp, #8
 1722              	.LCFI41:
 1723              		.cfi_def_cfa_offset 16
 1724 0004 00AF     		add	r7, sp, #0
 1725              	.LCFI42:
 1726              		.cfi_def_cfa_register 7
 232:../Sources/main.c **** 	if(cameraImageCounter % 25 == 0)
 1727              		.loc 1 232 0
 1728 0006 324B     		ldr	r3, .L109
 1729 0008 1B88     		ldrh	r3, [r3]
 1730 000a 181C     		mov	r0, r3
 1731 000c 1921     		mov	r1, #25
 1732 000e FFF7FEFF 		bl	__aeabi_uidivmod
 1733 0012 0B1C     		mov	r3, r1
 1734 0014 9BB2     		uxth	r3, r3
 1735 0016 002B     		cmp	r3, #0
 1736 0018 56D1     		bne	.L98
 1737              	.LBB2:
 233:../Sources/main.c **** 	{
 234:../Sources/main.c **** 		int i;
 235:../Sources/main.c **** 		for(i=0;i<128;i++)
 1738              		.loc 1 235 0
 1739 001a 0023     		mov	r3, #0
 1740 001c 7B60     		str	r3, [r7, #4]
 1741 001e 4DE0     		b	.L100
 1742              	.L108:
 1743              	.LBB3:
 236:../Sources/main.c **** 		{
 237:../Sources/main.c **** 			int image = (int)LineScanImage0[i];
 1744              		.loc 1 237 0
 1745 0020 2C4B     		ldr	r3, .L109+4
 1746 0022 1A68     		ldr	r2, [r3]
 1747 0024 7B68     		ldr	r3, [r7, #4]
 1748 0026 5B00     		lsl	r3, r3, #1
 1749 0028 D318     		add	r3, r2, r3
 1750 002a 1B88     		ldrh	r3, [r3]
 1751 002c 9BB2     		uxth	r3, r3
 1752 002e 3B60     		str	r3, [r7]
 238:../Sources/main.c **** 
 239:../Sources/main.c **** 			if(image < border)
 1753              		.loc 1 239 0
 1754 0030 294B     		ldr	r3, .L109+8
 1755 0032 1B68     		ldr	r3, [r3]
 1756 0034 3A68     		ldr	r2, [r7]
 1757 0036 9A42     		cmp	r2, r3
 1758 0038 0EDA     		bge	.L101
 240:../Sources/main.c **** 				TERMINAL_PRINTF("I", LineScanImage0[i]);
 1759              		.loc 1 240 0
 1760 003a 264B     		ldr	r3, .L109+4
 1761 003c 1A68     		ldr	r2, [r3]
 1762 003e 7B68     		ldr	r3, [r7, #4]
 1763 0040 5B00     		lsl	r3, r3, #1
 1764 0042 D318     		add	r3, r2, r3
 1765 0044 1B88     		ldrh	r3, [r3]
 1766 0046 9BB2     		uxth	r3, r3
 1767 0048 2449     		ldr	r1, .L109+12
 1768 004a 254A     		ldr	r2, .L109+16
 1769 004c 081C     		mov	r0, r1
 1770 004e 111C     		mov	r1, r2
 1771 0050 1A1C     		mov	r2, r3
 1772 0052 FFF7FEFF 		bl	Qprintf
 1773 0056 0DE0     		b	.L102
 1774              	.L101:
 241:../Sources/main.c **** 			else
 242:../Sources/main.c **** 				TERMINAL_PRINTF("_", LineScanImage0[i]);
 1775              		.loc 1 242 0
 1776 0058 1E4B     		ldr	r3, .L109+4
 1777 005a 1A68     		ldr	r2, [r3]
 1778 005c 7B68     		ldr	r3, [r7, #4]
 1779 005e 5B00     		lsl	r3, r3, #1
 1780 0060 D318     		add	r3, r2, r3
 1781 0062 1B88     		ldrh	r3, [r3]
 1782 0064 9BB2     		uxth	r3, r3
 1783 0066 1D49     		ldr	r1, .L109+12
 1784 0068 1E4A     		ldr	r2, .L109+20
 1785 006a 081C     		mov	r0, r1
 1786 006c 111C     		mov	r1, r2
 1787 006e 1A1C     		mov	r2, r3
 1788 0070 FFF7FEFF 		bl	Qprintf
 1789              	.L102:
 243:../Sources/main.c **** 			if(i==62 || i==64)
 1790              		.loc 1 243 0
 1791 0074 7B68     		ldr	r3, [r7, #4]
 1792 0076 3E2B     		cmp	r3, #62
 1793 0078 02D0     		beq	.L103
 1794              		.loc 1 243 0 is_stmt 0
 1795 007a 7B68     		ldr	r3, [r7, #4]
 1796 007c 402B     		cmp	r3, #64
 1797 007e 05D1     		bne	.L104
 1798              	.L103:
 244:../Sources/main.c **** 				TERMINAL_PRINTF(" ");
 1799              		.loc 1 244 0 is_stmt 1
 1800 0080 164A     		ldr	r2, .L109+12
 1801 0082 194B     		ldr	r3, .L109+24
 1802 0084 101C     		mov	r0, r2
 1803 0086 191C     		mov	r1, r3
 1804 0088 FFF7FEFF 		bl	Qprintf
 1805              	.L104:
 245:../Sources/main.c **** 			if(i==STDOFFSET || i==STDOFFSET+STDLENGTH+1)
 1806              		.loc 1 245 0
 1807 008c 7B68     		ldr	r3, [r7, #4]
 1808 008e 052B     		cmp	r3, #5
 1809 0090 02D0     		beq	.L105
 1810              		.loc 1 245 0 is_stmt 0
 1811 0092 7B68     		ldr	r3, [r7, #4]
 1812 0094 662B     		cmp	r3, #102
 1813 0096 05D1     		bne	.L106
 1814              	.L105:
 246:../Sources/main.c **** 				TERMINAL_PRINTF("   ");
 1815              		.loc 1 246 0 is_stmt 1
 1816 0098 104A     		ldr	r2, .L109+12
 1817 009a 144B     		ldr	r3, .L109+28
 1818 009c 101C     		mov	r0, r2
 1819 009e 191C     		mov	r1, r3
 1820 00a0 FFF7FEFF 		bl	Qprintf
 1821              	.L106:
 247:../Sources/main.c **** 			if(i==127)
 1822              		.loc 1 247 0
 1823 00a4 7B68     		ldr	r3, [r7, #4]
 1824 00a6 7F2B     		cmp	r3, #127
 1825 00a8 05D1     		bne	.L107
 248:../Sources/main.c **** 				TERMINAL_PRINTF("\r\n\n");
 1826              		.loc 1 248 0
 1827 00aa 0C4A     		ldr	r2, .L109+12
 1828 00ac 104B     		ldr	r3, .L109+32
 1829 00ae 101C     		mov	r0, r2
 1830 00b0 191C     		mov	r1, r3
 1831 00b2 FFF7FEFF 		bl	Qprintf
 1832              	.L107:
 1833              	.LBE3:
 235:../Sources/main.c **** 		for(i=0;i<128;i++)
 1834              		.loc 1 235 0
 1835 00b6 7B68     		ldr	r3, [r7, #4]
 1836 00b8 0133     		add	r3, r3, #1
 1837 00ba 7B60     		str	r3, [r7, #4]
 1838              	.L100:
 235:../Sources/main.c **** 		for(i=0;i<128;i++)
 1839              		.loc 1 235 0 is_stmt 0
 1840 00bc 7B68     		ldr	r3, [r7, #4]
 1841 00be 7F2B     		cmp	r3, #127
 1842 00c0 AEDD     		ble	.L108
 249:../Sources/main.c **** 		}
 250:../Sources/main.c **** 		cameraImageCounter = 0;
 1843              		.loc 1 250 0 is_stmt 1
 1844 00c2 034B     		ldr	r3, .L109
 1845 00c4 0022     		mov	r2, #0
 1846 00c6 1A80     		strh	r2, [r3]
 1847              	.L98:
 1848              	.LBE2:
 251:../Sources/main.c **** 	}
 252:../Sources/main.c **** }
 1849              		.loc 1 252 0
 1850 00c8 BD46     		mov	sp, r7
 1851 00ca 02B0     		add	sp, sp, #8
 1852              		@ sp needed for prologue
 1853 00cc 80BD     		pop	{r7, pc}
 1854              	.L110:
 1855 00ce C046     		.align	2
 1856              	.L109:
 1857 00d0 00000000 		.word	cameraImageCounter
 1858 00d4 00000000 		.word	LineScanImage0
 1859 00d8 00000000 		.word	border
 1860 00dc 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 1861 00e0 08000000 		.word	.LC21
 1862 00e4 0C000000 		.word	.LC23
 1863 00e8 10000000 		.word	.LC25
 1864 00ec 14000000 		.word	.LC27
 1865 00f0 18000000 		.word	.LC29
 1866              		.cfi_endproc
 1867              	.LFE15:
 1869              		.section	.rodata
 1870              		.align	2
 1871              	.LC33:
 1872 001c 0D0A00   		.ascii	"\015\012\000"
 1873 001f 00       		.align	2
 1874              	.LC35:
 1875 0020 4C3A00   		.ascii	"L:\000"
 1876 0023 00       		.align	2
 1877              	.LC38:
 1878 0024 25692C00 		.ascii	"%i,\000"
 1879              		.align	2
 1880              	.LC41:
 1881 0028 2C00     		.ascii	",\000"
 1882              		.section	.text.print,"ax",%progbits
 1883              		.align	2
 1884              		.global	print
 1885              		.code	16
 1886              		.thumb_func
 1888              	print:
 1889              	.LFB16:
 253:../Sources/main.c **** 
 254:../Sources/main.c **** void print()
 255:../Sources/main.c **** {
 1890              		.loc 1 255 0
 1891              		.cfi_startproc
 1892 0000 80B5     		push	{r7, lr}
 1893              	.LCFI43:
 1894              		.cfi_def_cfa_offset 8
 1895              		.cfi_offset 7, -8
 1896              		.cfi_offset 14, -4
 1897 0002 82B0     		sub	sp, sp, #8
 1898              	.LCFI44:
 1899              		.cfi_def_cfa_offset 16
 1900 0004 00AF     		add	r7, sp, #0
 1901              	.LCFI45:
 1902              		.cfi_def_cfa_register 7
 256:../Sources/main.c **** 
 257:../Sources/main.c **** 	LineScanImageReady=0;
 1903              		.loc 1 257 0
 1904 0006 2C4B     		ldr	r3, .L118
 1905 0008 0022     		mov	r2, #0
 1906 000a 1A70     		strb	r2, [r3]
 258:../Sources/main.c **** 	TERMINAL_PRINTF("\r\n");
 1907              		.loc 1 258 0
 1908 000c 2B4A     		ldr	r2, .L118+4
 1909 000e 2C4B     		ldr	r3, .L118+8
 1910 0010 101C     		mov	r0, r2
 1911 0012 191C     		mov	r1, r3
 1912 0014 FFF7FEFF 		bl	Qprintf
 259:../Sources/main.c **** 	TERMINAL_PRINTF("L:");
 1913              		.loc 1 259 0
 1914 0018 284A     		ldr	r2, .L118+4
 1915 001a 2A4B     		ldr	r3, .L118+12
 1916 001c 101C     		mov	r0, r2
 1917 001e 191C     		mov	r1, r3
 1918 0020 FFF7FEFF 		bl	Qprintf
 260:../Sources/main.c **** 	uint32_t i=0;
 1919              		.loc 1 260 0
 1920 0024 0023     		mov	r3, #0
 1921 0026 7B60     		str	r3, [r7, #4]
 261:../Sources/main.c **** 	for(i=0;i<128;i++)
 1922              		.loc 1 261 0
 1923 0028 0023     		mov	r3, #0
 1924 002a 7B60     		str	r3, [r7, #4]
 1925 002c 15E0     		b	.L112
 1926              	.L113:
 262:../Sources/main.c **** 	{
 263:../Sources/main.c **** 		TERMINAL_PRINTF("%i,", (int)angle);
 1927              		.loc 1 263 0
 1928 002e 264B     		ldr	r3, .L118+16
 1929 0030 1B68     		ldr	r3, [r3]
 1930 0032 181C     		add	r0, r3, #0
 1931 0034 FFF7FEFF 		bl	__aeabi_f2iz
 1932 0038 031C     		mov	r3, r0
 1933 003a 2049     		ldr	r1, .L118+4
 1934 003c 234A     		ldr	r2, .L118+20
 1935 003e 081C     		mov	r0, r1
 1936 0040 111C     		mov	r1, r2
 1937 0042 1A1C     		mov	r2, r3
 1938 0044 FFF7FEFF 		bl	Qprintf
 264:../Sources/main.c **** 		TERMINAL_PRINTF("\r\n");
 1939              		.loc 1 264 0
 1940 0048 1C4A     		ldr	r2, .L118+4
 1941 004a 1D4B     		ldr	r3, .L118+8
 1942 004c 101C     		mov	r0, r2
 1943 004e 191C     		mov	r1, r3
 1944 0050 FFF7FEFF 		bl	Qprintf
 261:../Sources/main.c **** 	for(i=0;i<128;i++)
 1945              		.loc 1 261 0
 1946 0054 7B68     		ldr	r3, [r7, #4]
 1947 0056 0133     		add	r3, r3, #1
 1948 0058 7B60     		str	r3, [r7, #4]
 1949              	.L112:
 261:../Sources/main.c **** 	for(i=0;i<128;i++)
 1950              		.loc 1 261 0 is_stmt 0
 1951 005a 7B68     		ldr	r3, [r7, #4]
 1952 005c 7F2B     		cmp	r3, #127
 1953 005e E6D9     		bls	.L113
 265:../Sources/main.c **** 	}
 266:../Sources/main.c **** 
 267:../Sources/main.c **** 	for(i=0;i<128;i++)
 1954              		.loc 1 267 0 is_stmt 1
 1955 0060 0023     		mov	r3, #0
 1956 0062 7B60     		str	r3, [r7, #4]
 1957 0064 22E0     		b	.L114
 1958              	.L117:
 268:../Sources/main.c **** 	{
 269:../Sources/main.c **** 		//TERMINAL_PRINTF("%X", LineScanImage0[i]);
 270:../Sources/main.c **** 		if(i==127)
 1959              		.loc 1 270 0
 1960 0066 7B68     		ldr	r3, [r7, #4]
 1961 0068 7F2B     		cmp	r3, #127
 1962 006a 0ED1     		bne	.L115
 271:../Sources/main.c **** 			TERMINAL_PRINTF("\r\n", LineScanImage1[i]);
 1963              		.loc 1 271 0
 1964 006c 184B     		ldr	r3, .L118+24
 1965 006e 1A68     		ldr	r2, [r3]
 1966 0070 7B68     		ldr	r3, [r7, #4]
 1967 0072 5B00     		lsl	r3, r3, #1
 1968 0074 D318     		add	r3, r2, r3
 1969 0076 1B88     		ldrh	r3, [r3]
 1970 0078 9BB2     		uxth	r3, r3
 1971 007a 1049     		ldr	r1, .L118+4
 1972 007c 104A     		ldr	r2, .L118+8
 1973 007e 081C     		mov	r0, r1
 1974 0080 111C     		mov	r1, r2
 1975 0082 1A1C     		mov	r2, r3
 1976 0084 FFF7FEFF 		bl	Qprintf
 1977 0088 0DE0     		b	.L116
 1978              	.L115:
 272:../Sources/main.c **** 		else
 273:../Sources/main.c **** 			TERMINAL_PRINTF(",", LineScanImage1[i]);
 1979              		.loc 1 273 0
 1980 008a 114B     		ldr	r3, .L118+24
 1981 008c 1A68     		ldr	r2, [r3]
 1982 008e 7B68     		ldr	r3, [r7, #4]
 1983 0090 5B00     		lsl	r3, r3, #1
 1984 0092 D318     		add	r3, r2, r3
 1985 0094 1B88     		ldrh	r3, [r3]
 1986 0096 9BB2     		uxth	r3, r3
 1987 0098 0849     		ldr	r1, .L118+4
 1988 009a 0E4A     		ldr	r2, .L118+28
 1989 009c 081C     		mov	r0, r1
 1990 009e 111C     		mov	r1, r2
 1991 00a0 1A1C     		mov	r2, r3
 1992 00a2 FFF7FEFF 		bl	Qprintf
 1993              	.L116:
 267:../Sources/main.c **** 	for(i=0;i<128;i++)
 1994              		.loc 1 267 0
 1995 00a6 7B68     		ldr	r3, [r7, #4]
 1996 00a8 0133     		add	r3, r3, #1
 1997 00aa 7B60     		str	r3, [r7, #4]
 1998              	.L114:
 267:../Sources/main.c **** 	for(i=0;i<128;i++)
 1999              		.loc 1 267 0 is_stmt 0
 2000 00ac 7B68     		ldr	r3, [r7, #4]
 2001 00ae 7F2B     		cmp	r3, #127
 2002 00b0 D9D9     		bls	.L117
 274:../Sources/main.c **** 	}
 275:../Sources/main.c **** }
 2003              		.loc 1 275 0 is_stmt 1
 2004 00b2 BD46     		mov	sp, r7
 2005 00b4 02B0     		add	sp, sp, #8
 2006              		@ sp needed for prologue
 2007 00b6 80BD     		pop	{r7, pc}
 2008              	.L119:
 2009              		.align	2
 2010              	.L118:
 2011 00b8 00000000 		.word	LineScanImageReady
 2012 00bc 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 2013 00c0 1C000000 		.word	.LC33
 2014 00c4 20000000 		.word	.LC35
 2015 00c8 00000000 		.word	angle
 2016 00cc 24000000 		.word	.LC38
 2017 00d0 00000000 		.word	LineScanImage1
 2018 00d4 28000000 		.word	.LC41
 2019              		.cfi_endproc
 2020              	.LFE16:
 2022              		.section	.rodata
 2023 002a 0000     		.align	2
 2024              	.LC46:
 2025 002c 4D696E3A 		.ascii	"Min: %d \000"
 2025      20256420 
 2025      00
 2026 0035 000000   		.align	2
 2027              	.LC48:
 2028 0038 426F7264 		.ascii	"Border: %d \015\012\000"
 2028      65723A20 
 2028      2564200D 
 2028      0A00
 2029              		.section	.text.calibrateLightSensor,"ax",%progbits
 2030              		.align	2
 2031              		.global	calibrateLightSensor
 2032              		.code	16
 2033              		.thumb_func
 2035              	calibrateLightSensor:
 2036              	.LFB17:
 276:../Sources/main.c **** 
 277:../Sources/main.c **** void calibrateLightSensor() 
 278:../Sources/main.c **** {
 2037              		.loc 1 278 0
 2038              		.cfi_startproc
 2039 0000 90B5     		push	{r4, r7, lr}
 2040              	.LCFI46:
 2041              		.cfi_def_cfa_offset 12
 2042              		.cfi_offset 4, -12
 2043              		.cfi_offset 7, -8
 2044              		.cfi_offset 14, -4
 2045 0002 83B0     		sub	sp, sp, #12
 2046              	.LCFI47:
 2047              		.cfi_def_cfa_offset 24
 2048 0004 00AF     		add	r7, sp, #0
 2049              	.LCFI48:
 2050              		.cfi_def_cfa_register 7
 279:../Sources/main.c **** 	uint16_t min = 10000;
 2051              		.loc 1 279 0
 2052 0006 BB1D     		add	r3, r7, #6
 2053 0008 2B4A     		ldr	r2, .L124+8
 2054 000a 1A80     		strh	r2, [r3]
 280:../Sources/main.c **** 	uint16_t i;
 281:../Sources/main.c **** 	for (i = 10; i < 118; i++) 
 2055              		.loc 1 281 0
 2056 000c 3B1D     		add	r3, r7, #4
 2057 000e 0A22     		mov	r2, #10
 2058 0010 1A80     		strh	r2, [r3]
 2059 0012 19E0     		b	.L121
 2060              	.L123:
 282:../Sources/main.c **** 	{
 283:../Sources/main.c **** 		if (LineScanImage0[i] < min) 
 2061              		.loc 1 283 0
 2062 0014 294B     		ldr	r3, .L124+12
 2063 0016 1A68     		ldr	r2, [r3]
 2064 0018 3B1D     		add	r3, r7, #4
 2065 001a 1B88     		ldrh	r3, [r3]
 2066 001c 5B00     		lsl	r3, r3, #1
 2067 001e D318     		add	r3, r2, r3
 2068 0020 1B88     		ldrh	r3, [r3]
 2069 0022 9BB2     		uxth	r3, r3
 2070 0024 BA1D     		add	r2, r7, #6
 2071 0026 1288     		ldrh	r2, [r2]
 2072 0028 9A42     		cmp	r2, r3
 2073 002a 08D9     		bls	.L122
 284:../Sources/main.c **** 		{
 285:../Sources/main.c **** 			min = LineScanImage0[i];
 2074              		.loc 1 285 0
 2075 002c 234B     		ldr	r3, .L124+12
 2076 002e 1A68     		ldr	r2, [r3]
 2077 0030 3B1D     		add	r3, r7, #4
 2078 0032 1B88     		ldrh	r3, [r3]
 2079 0034 5B00     		lsl	r3, r3, #1
 2080 0036 D218     		add	r2, r2, r3
 2081 0038 BB1D     		add	r3, r7, #6
 2082 003a 1288     		ldrh	r2, [r2]
 2083 003c 1A80     		strh	r2, [r3]
 2084              	.L122:
 281:../Sources/main.c **** 	for (i = 10; i < 118; i++) 
 2085              		.loc 1 281 0
 2086 003e 3B1D     		add	r3, r7, #4
 2087 0040 3A1D     		add	r2, r7, #4
 2088 0042 1288     		ldrh	r2, [r2]
 2089 0044 0132     		add	r2, r2, #1
 2090 0046 1A80     		strh	r2, [r3]
 2091              	.L121:
 281:../Sources/main.c **** 	for (i = 10; i < 118; i++) 
 2092              		.loc 1 281 0 is_stmt 0
 2093 0048 3B1D     		add	r3, r7, #4
 2094 004a 1B88     		ldrh	r3, [r3]
 2095 004c 752B     		cmp	r3, #117
 2096 004e E1D9     		bls	.L123
 286:../Sources/main.c **** 		}
 287:../Sources/main.c **** 	}
 288:../Sources/main.c **** 	border = (uint16_t) (min * 1.45);
 2097              		.loc 1 288 0 is_stmt 1
 2098 0050 BB1D     		add	r3, r7, #6
 2099 0052 1B88     		ldrh	r3, [r3]
 2100 0054 181C     		mov	r0, r3
 2101 0056 FFF7FEFF 		bl	__aeabi_i2d
 2102 005a 031C     		mov	r3, r0
 2103 005c 0C1C     		mov	r4, r1
 2104 005e 181C     		mov	r0, r3
 2105 0060 211C     		mov	r1, r4
 2106 0062 144B     		ldr	r3, .L124+4
 2107 0064 124A     		ldr	r2, .L124
 2108 0066 FFF7FEFF 		bl	__aeabi_dmul
 2109 006a 031C     		mov	r3, r0
 2110 006c 0C1C     		mov	r4, r1
 2111 006e 181C     		mov	r0, r3
 2112 0070 211C     		mov	r1, r4
 2113 0072 FFF7FEFF 		bl	__aeabi_d2uiz
 2114 0076 031C     		mov	r3, r0
 2115 0078 9BB2     		uxth	r3, r3
 2116 007a 1A1C     		mov	r2, r3
 2117 007c 104B     		ldr	r3, .L124+16
 2118 007e 1A60     		str	r2, [r3]
 289:../Sources/main.c **** 	TERMINAL_PRINTF("Min: %d ", min);
 2119              		.loc 1 289 0
 2120 0080 BB1D     		add	r3, r7, #6
 2121 0082 1B88     		ldrh	r3, [r3]
 2122 0084 0F49     		ldr	r1, .L124+20
 2123 0086 104A     		ldr	r2, .L124+24
 2124 0088 081C     		mov	r0, r1
 2125 008a 111C     		mov	r1, r2
 2126 008c 1A1C     		mov	r2, r3
 2127 008e FFF7FEFF 		bl	Qprintf
 290:../Sources/main.c **** 	TERMINAL_PRINTF("Border: %d \r\n", border);
 2128              		.loc 1 290 0
 2129 0092 0B4B     		ldr	r3, .L124+16
 2130 0094 1B68     		ldr	r3, [r3]
 2131 0096 0B49     		ldr	r1, .L124+20
 2132 0098 0C4A     		ldr	r2, .L124+28
 2133 009a 081C     		mov	r0, r1
 2134 009c 111C     		mov	r1, r2
 2135 009e 1A1C     		mov	r2, r3
 2136 00a0 FFF7FEFF 		bl	Qprintf
 291:../Sources/main.c **** }
 2137              		.loc 1 291 0
 2138 00a4 BD46     		mov	sp, r7
 2139 00a6 03B0     		add	sp, sp, #12
 2140              		@ sp needed for prologue
 2141 00a8 90BD     		pop	{r4, r7, pc}
 2142              	.L125:
 2143 00aa C046C046 		.align	3
 2143      C046
 2144              	.L124:
 2145 00b0 33333333 		.word	858993459
 2146 00b4 3333F73F 		.word	1073165107
 2147 00b8 10270000 		.word	10000
 2148 00bc 00000000 		.word	LineScanImage0
 2149 00c0 00000000 		.word	border
 2150 00c4 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 2151 00c8 2C000000 		.word	.LC46
 2152 00cc 38000000 		.word	.LC48
 2153              		.cfi_endproc
 2154              	.LFE17:
 2156              		.global	__aeabi_d2iz
 2157              		.section	.rodata
 2158 0046 0000     		.align	2
 2159              	.LC53:
 2160 0048 4E657720 		.ascii	"New Border: %d \015\012\000"
 2160      426F7264 
 2160      65723A20 
 2160      2564200D 
 2160      0A00
 2161              		.section	.text.calibrateLightSensorAtPoint,"ax",%progbits
 2162              		.align	2
 2163              		.global	calibrateLightSensorAtPoint
 2164              		.code	16
 2165              		.thumb_func
 2167              	calibrateLightSensorAtPoint:
 2168              	.LFB18:
 292:../Sources/main.c **** 
 293:../Sources/main.c **** void calibrateLightSensorAtPoint(uint16_t index)
 294:../Sources/main.c **** {
 2169              		.loc 1 294 0
 2170              		.cfi_startproc
 2171 0000 90B5     		push	{r4, r7, lr}
 2172              	.LCFI49:
 2173              		.cfi_def_cfa_offset 12
 2174              		.cfi_offset 4, -12
 2175              		.cfi_offset 7, -8
 2176              		.cfi_offset 14, -4
 2177 0002 83B0     		sub	sp, sp, #12
 2178              	.LCFI50:
 2179              		.cfi_def_cfa_offset 24
 2180 0004 00AF     		add	r7, sp, #0
 2181              	.LCFI51:
 2182              		.cfi_def_cfa_register 7
 2183 0006 021C     		mov	r2, r0
 2184 0008 BB1D     		add	r3, r7, #6
 2185 000a 1A80     		strh	r2, [r3]
 295:../Sources/main.c **** 	border = LineScanImage0[index]*1.2;
 2186              		.loc 1 295 0
 2187 000c 164B     		ldr	r3, .L127+8
 2188 000e 1A68     		ldr	r2, [r3]
 2189 0010 BB1D     		add	r3, r7, #6
 2190 0012 1B88     		ldrh	r3, [r3]
 2191 0014 5B00     		lsl	r3, r3, #1
 2192 0016 D318     		add	r3, r2, r3
 2193 0018 1B88     		ldrh	r3, [r3]
 2194 001a 9BB2     		uxth	r3, r3
 2195 001c 181C     		mov	r0, r3
 2196 001e FFF7FEFF 		bl	__aeabi_i2d
 2197 0022 031C     		mov	r3, r0
 2198 0024 0C1C     		mov	r4, r1
 2199 0026 181C     		mov	r0, r3
 2200 0028 211C     		mov	r1, r4
 2201 002a 0E4B     		ldr	r3, .L127+4
 2202 002c 0C4A     		ldr	r2, .L127
 2203 002e FFF7FEFF 		bl	__aeabi_dmul
 2204 0032 031C     		mov	r3, r0
 2205 0034 0C1C     		mov	r4, r1
 2206 0036 181C     		mov	r0, r3
 2207 0038 211C     		mov	r1, r4
 2208 003a FFF7FEFF 		bl	__aeabi_d2iz
 2209 003e 021C     		mov	r2, r0
 2210 0040 0A4B     		ldr	r3, .L127+12
 2211 0042 1A60     		str	r2, [r3]
 296:../Sources/main.c **** 	TERMINAL_PRINTF("New Border: %d \r\n", border);
 2212              		.loc 1 296 0
 2213 0044 094B     		ldr	r3, .L127+12
 2214 0046 1B68     		ldr	r3, [r3]
 2215 0048 0949     		ldr	r1, .L127+16
 2216 004a 0A4A     		ldr	r2, .L127+20
 2217 004c 081C     		mov	r0, r1
 2218 004e 111C     		mov	r1, r2
 2219 0050 1A1C     		mov	r2, r3
 2220 0052 FFF7FEFF 		bl	Qprintf
 297:../Sources/main.c **** }
 2221              		.loc 1 297 0
 2222 0056 BD46     		mov	sp, r7
 2223 0058 03B0     		add	sp, sp, #12
 2224              		@ sp needed for prologue
 2225 005a 90BD     		pop	{r4, r7, pc}
 2226              	.L128:
 2227 005c C046C046 		.align	3
 2228              	.L127:
 2229 0060 33333333 		.word	858993459
 2230 0064 3333F33F 		.word	1072902963
 2231 0068 00000000 		.word	LineScanImage0
 2232 006c 00000000 		.word	border
 2233 0070 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 2234 0074 48000000 		.word	.LC53
 2235              		.cfi_endproc
 2236              	.LFE18:
 2238              		.section	.text.calculateSpeed,"ax",%progbits
 2239              		.align	2
 2240              		.global	calculateSpeed
 2241              		.code	16
 2242              		.thumb_func
 2244              	calculateSpeed:
 2245              	.LFB19:
 298:../Sources/main.c **** 
 299:../Sources/main.c **** float calculateSpeed(float speed, float steer)
 300:../Sources/main.c **** {
 2246              		.loc 1 300 0
 2247              		.cfi_startproc
 2248 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2249              	.LCFI52:
 2250              		.cfi_def_cfa_offset 20
 2251              		.cfi_offset 4, -20
 2252              		.cfi_offset 5, -16
 2253              		.cfi_offset 6, -12
 2254              		.cfi_offset 7, -8
 2255              		.cfi_offset 14, -4
 2256 0002 85B0     		sub	sp, sp, #20
 2257              	.LCFI53:
 2258              		.cfi_def_cfa_offset 40
 2259 0004 00AF     		add	r7, sp, #0
 2260              	.LCFI54:
 2261              		.cfi_def_cfa_register 7
 2262 0006 7860     		str	r0, [r7, #4]
 2263 0008 3960     		str	r1, [r7]
 301:../Sources/main.c **** 	float factor = (steer < 0 ? 1.0 + steer : 1.0 - steer);
 2264              		.loc 1 301 0
 2265 000a 3868     		ldr	r0, [r7]
 2266 000c 0021     		mov	r1, #0
 2267 000e FFF7FEFF 		bl	__aeabi_fcmplt
 2268 0012 031C     		mov	r3, r0
 2269 0014 002B     		cmp	r3, #0
 2270 0016 0DD0     		beq	.L139
 2271              	.L137:
 2272              		.loc 1 301 0 is_stmt 0
 2273 0018 3868     		ldr	r0, [r7]
 2274 001a FFF7FEFF 		bl	__aeabi_f2d
 2275 001e 031C     		mov	r3, r0
 2276 0020 0C1C     		mov	r4, r1
 2277 0022 181C     		mov	r0, r3
 2278 0024 211C     		mov	r1, r4
 2279 0026 2D4B     		ldr	r3, .L141+4
 2280 0028 2B4A     		ldr	r2, .L141
 2281 002a FFF7FEFF 		bl	__aeabi_dadd
 2282 002e 031C     		mov	r3, r0
 2283 0030 0C1C     		mov	r4, r1
 2284 0032 0CE0     		b	.L132
 2285              	.L139:
 2286              		.loc 1 301 0
 2287 0034 3868     		ldr	r0, [r7]
 2288 0036 FFF7FEFF 		bl	__aeabi_f2d
 2289 003a 031C     		mov	r3, r0
 2290 003c 0C1C     		mov	r4, r1
 2291 003e 2749     		ldr	r1, .L141+4
 2292 0040 2548     		ldr	r0, .L141
 2293 0042 1A1C     		mov	r2, r3
 2294 0044 231C     		mov	r3, r4
 2295 0046 FFF7FEFF 		bl	__aeabi_dsub
 2296 004a 031C     		mov	r3, r0
 2297 004c 0C1C     		mov	r4, r1
 2298              	.L132:
 2299              		.loc 1 301 0
 2300 004e 181C     		mov	r0, r3
 2301 0050 211C     		mov	r1, r4
 2302 0052 FFF7FEFF 		bl	__aeabi_d2f
 2303 0056 031C     		add	r3, r0, #0
 2304 0058 BB60     		str	r3, [r7, #8]
 302:../Sources/main.c **** 	float newSpeed;
 303:../Sources/main.c **** 	if (speed > MINCURVESPEED)  
 2305              		.loc 1 303 0 is_stmt 1
 2306 005a 7868     		ldr	r0, [r7, #4]
 2307 005c FFF7FEFF 		bl	__aeabi_f2d
 2308 0060 031C     		mov	r3, r0
 2309 0062 0C1C     		mov	r4, r1
 2310 0064 181C     		mov	r0, r3
 2311 0066 211C     		mov	r1, r4
 2312 0068 1D4A     		ldr	r2, .L141+8
 2313 006a 1E4B     		ldr	r3, .L141+12
 2314 006c FFF7FEFF 		bl	__aeabi_dcmpgt
 2315 0070 031C     		mov	r3, r0
 2316 0072 002B     		cmp	r3, #0
 2317 0074 28D0     		beq	.L140
 2318              	.L138:
 304:../Sources/main.c **** 	{
 305:../Sources/main.c **** 		newSpeed = factor * (speed - MINCURVESPEED) + MINCURVESPEED;
 2319              		.loc 1 305 0
 2320 0076 B868     		ldr	r0, [r7, #8]
 2321 0078 FFF7FEFF 		bl	__aeabi_f2d
 2322 007c 051C     		mov	r5, r0
 2323 007e 0E1C     		mov	r6, r1
 2324 0080 7868     		ldr	r0, [r7, #4]
 2325 0082 FFF7FEFF 		bl	__aeabi_f2d
 2326 0086 031C     		mov	r3, r0
 2327 0088 0C1C     		mov	r4, r1
 2328 008a 181C     		mov	r0, r3
 2329 008c 211C     		mov	r1, r4
 2330 008e 144A     		ldr	r2, .L141+8
 2331 0090 144B     		ldr	r3, .L141+12
 2332 0092 FFF7FEFF 		bl	__aeabi_dsub
 2333 0096 031C     		mov	r3, r0
 2334 0098 0C1C     		mov	r4, r1
 2335 009a 281C     		mov	r0, r5
 2336 009c 311C     		mov	r1, r6
 2337 009e 1A1C     		mov	r2, r3
 2338 00a0 231C     		mov	r3, r4
 2339 00a2 FFF7FEFF 		bl	__aeabi_dmul
 2340 00a6 031C     		mov	r3, r0
 2341 00a8 0C1C     		mov	r4, r1
 2342 00aa 181C     		mov	r0, r3
 2343 00ac 211C     		mov	r1, r4
 2344 00ae 0C4A     		ldr	r2, .L141+8
 2345 00b0 0C4B     		ldr	r3, .L141+12
 2346 00b2 FFF7FEFF 		bl	__aeabi_dadd
 2347 00b6 031C     		mov	r3, r0
 2348 00b8 0C1C     		mov	r4, r1
 2349 00ba 181C     		mov	r0, r3
 2350 00bc 211C     		mov	r1, r4
 2351 00be FFF7FEFF 		bl	__aeabi_d2f
 2352 00c2 031C     		add	r3, r0, #0
 2353 00c4 FB60     		str	r3, [r7, #12]
 2354 00c6 01E0     		b	.L135
 2355              	.L140:
 306:../Sources/main.c **** 	} 
 307:../Sources/main.c **** 	else
 308:../Sources/main.c **** 	{
 309:../Sources/main.c **** 		newSpeed = speed;
 2356              		.loc 1 309 0
 2357 00c8 7B68     		ldr	r3, [r7, #4]
 2358 00ca FB60     		str	r3, [r7, #12]
 2359              	.L135:
 310:../Sources/main.c **** 	}
 311:../Sources/main.c **** 
 312:../Sources/main.c **** 	return newSpeed;
 2360              		.loc 1 312 0
 2361 00cc FB68     		ldr	r3, [r7, #12]
 313:../Sources/main.c **** }
 2362              		.loc 1 313 0
 2363 00ce 181C     		add	r0, r3, #0
 2364 00d0 BD46     		mov	sp, r7
 2365 00d2 05B0     		add	sp, sp, #20
 2366              		@ sp needed for prologue
 2367 00d4 F0BD     		pop	{r4, r5, r6, r7, pc}
 2368              	.L142:
 2369 00d6 C046     		.align	3
 2370              	.L141:
 2371 00d8 00000000 		.word	0
 2372 00dc 0000F03F 		.word	1072693248
 2373 00e0 33333333 		.word	858993459
 2374 00e4 3333E33F 		.word	1071854387
 2375              		.cfi_endproc
 2376              	.LFE19:
 2378              		.global	__aeabi_fcmpeq
 2379              		.section	.text.calculateSpeed_II,"ax",%progbits
 2380              		.align	2
 2381              		.global	calculateSpeed_II
 2382              		.code	16
 2383              		.thumb_func
 2385              	calculateSpeed_II:
 2386              	.LFB20:
 314:../Sources/main.c **** 
 315:../Sources/main.c **** float calculateSpeed_II(float speed, float steer)
 316:../Sources/main.c **** {
 2387              		.loc 1 316 0
 2388              		.cfi_startproc
 2389 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2390              	.LCFI55:
 2391              		.cfi_def_cfa_offset 20
 2392              		.cfi_offset 4, -20
 2393              		.cfi_offset 5, -16
 2394              		.cfi_offset 6, -12
 2395              		.cfi_offset 7, -8
 2396              		.cfi_offset 14, -4
 2397 0002 85B0     		sub	sp, sp, #20
 2398              	.LCFI56:
 2399              		.cfi_def_cfa_offset 40
 2400 0004 00AF     		add	r7, sp, #0
 2401              	.LCFI57:
 2402              		.cfi_def_cfa_register 7
 2403 0006 7860     		str	r0, [r7, #4]
 2404 0008 3960     		str	r1, [r7]
 317:../Sources/main.c **** 	float newSpeed;
 318:../Sources/main.c **** 	if(speed < 0.7) //MINCURVESPEED)
 2405              		.loc 1 318 0
 2406 000a 7868     		ldr	r0, [r7, #4]
 2407 000c FFF7FEFF 		bl	__aeabi_f2d
 2408 0010 031C     		mov	r3, r0
 2409 0012 0C1C     		mov	r4, r1
 2410 0014 181C     		mov	r0, r3
 2411 0016 211C     		mov	r1, r4
 2412 0018 A44B     		ldr	r3, .L179+4
 2413 001a A34A     		ldr	r2, .L179
 2414 001c FFF7FEFF 		bl	__aeabi_dcmplt
 2415 0020 031C     		mov	r3, r0
 2416 0022 002B     		cmp	r3, #0
 2417 0024 01D0     		beq	.L176
 2418              	.L170:
 319:../Sources/main.c **** 		return speed;
 2419              		.loc 1 319 0
 2420 0026 7B68     		ldr	r3, [r7, #4]
 2421 0028 38E1     		b	.L146
 2422              	.L176:
 320:../Sources/main.c **** 		
 321:../Sources/main.c **** 	
 322:../Sources/main.c **** 	if(steer > 1 || steer < -1)
 2423              		.loc 1 322 0
 2424 002a 3868     		ldr	r0, [r7]
 2425 002c FE21     		mov	r1, #254
 2426 002e 8905     		lsl	r1, r1, #22
 2427 0030 FFF7FEFF 		bl	__aeabi_fcmpgt
 2428 0034 031C     		mov	r3, r0
 2429 0036 002B     		cmp	r3, #0
 2430 0038 06D1     		bne	.L147
 2431              		.loc 1 322 0 is_stmt 0
 2432 003a 3868     		ldr	r0, [r7]
 2433 003c A649     		ldr	r1, .L179+48
 2434 003e FFF7FEFF 		bl	__aeabi_fcmplt
 2435 0042 031C     		mov	r3, r0
 2436 0044 002B     		cmp	r3, #0
 2437 0046 52D0     		beq	.L177
 2438              	.L147:
 323:../Sources/main.c **** 	{		
 324:../Sources/main.c **** 		if(brakeCounter < BRAKECOUNTERMAX && straightCounter > straightCounterMax)
 2439              		.loc 1 324 0 is_stmt 1
 2440 0048 A44B     		ldr	r3, .L179+52
 2441 004a 1B88     		ldrh	r3, [r3]
 2442 004c 182B     		cmp	r3, #24
 2443 004e 1ED8     		bhi	.L150
 2444              		.loc 1 324 0 is_stmt 0
 2445 0050 A34B     		ldr	r3, .L179+56
 2446 0052 1A88     		ldrh	r2, [r3]
 2447 0054 A34B     		ldr	r3, .L179+60
 2448 0056 1B88     		ldrh	r3, [r3]
 2449 0058 9A42     		cmp	r2, r3
 2450 005a 18D9     		bls	.L150
 325:../Sources/main.c **** 		{
 326:../Sources/main.c **** 			//TERMINAL_PRINTF("STRAIGHT: %i ", straightCounter);
 327:../Sources/main.c **** 			brakeCounter++;	
 2451              		.loc 1 327 0 is_stmt 1
 2452 005c 9F4B     		ldr	r3, .L179+52
 2453 005e 1B88     		ldrh	r3, [r3]
 2454 0060 0133     		add	r3, r3, #1
 2455 0062 9AB2     		uxth	r2, r3
 2456 0064 9D4B     		ldr	r3, .L179+52
 2457 0066 1A80     		strh	r2, [r3]
 328:../Sources/main.c **** 			newSpeed = 0.4;
 2458              		.loc 1 328 0
 2459 0068 9F4B     		ldr	r3, .L179+64
 2460 006a FB60     		str	r3, [r7, #12]
 329:../Sources/main.c **** 			TFC_BAT_LED0_ON;
 2461              		.loc 1 329 0
 2462 006c 9F4B     		ldr	r3, .L179+68
 2463 006e 8022     		mov	r2, #128
 2464 0070 5200     		lsl	r2, r2, #1
 2465 0072 5A60     		str	r2, [r3, #4]
 330:../Sources/main.c **** 			TFC_BAT_LED1_ON;
 2466              		.loc 1 330 0
 2467 0074 9D4B     		ldr	r3, .L179+68
 2468 0076 8022     		mov	r2, #128
 2469 0078 9200     		lsl	r2, r2, #2
 2470 007a 5A60     		str	r2, [r3, #4]
 331:../Sources/main.c **** 			TFC_BAT_LED2_ON;
 2471              		.loc 1 331 0
 2472 007c 9B4B     		ldr	r3, .L179+68
 2473 007e 8022     		mov	r2, #128
 2474 0080 D200     		lsl	r2, r2, #3
 2475 0082 5A60     		str	r2, [r3, #4]
 332:../Sources/main.c **** 			TFC_BAT_LED3_ON;
 2476              		.loc 1 332 0
 2477 0084 994B     		ldr	r3, .L179+68
 2478 0086 8022     		mov	r2, #128
 2479 0088 1201     		lsl	r2, r2, #4
 2480 008a 5A60     		str	r2, [r3, #4]
 2481 008c 11E0     		b	.L151
 2482              	.L150:
 333:../Sources/main.c **** 		}
 334:../Sources/main.c **** 		else
 335:../Sources/main.c **** 		{
 336:../Sources/main.c **** 			newSpeed = MINCURVESPEED;	
 2483              		.loc 1 336 0
 2484 008e 984B     		ldr	r3, .L179+72
 2485 0090 FB60     		str	r3, [r7, #12]
 337:../Sources/main.c **** 			TFC_BAT_LED0_OFF;
 2486              		.loc 1 337 0
 2487 0092 964B     		ldr	r3, .L179+68
 2488 0094 8022     		mov	r2, #128
 2489 0096 5200     		lsl	r2, r2, #1
 2490 0098 9A60     		str	r2, [r3, #8]
 338:../Sources/main.c **** 			TFC_BAT_LED1_OFF;
 2491              		.loc 1 338 0
 2492 009a 944B     		ldr	r3, .L179+68
 2493 009c 8022     		mov	r2, #128
 2494 009e 9200     		lsl	r2, r2, #2
 2495 00a0 9A60     		str	r2, [r3, #8]
 339:../Sources/main.c **** 			TFC_BAT_LED2_OFF;
 2496              		.loc 1 339 0
 2497 00a2 924B     		ldr	r3, .L179+68
 2498 00a4 8022     		mov	r2, #128
 2499 00a6 D200     		lsl	r2, r2, #3
 2500 00a8 9A60     		str	r2, [r3, #8]
 340:../Sources/main.c **** 			TFC_BAT_LED3_OFF;
 2501              		.loc 1 340 0
 2502 00aa 904B     		ldr	r3, .L179+68
 2503 00ac 8022     		mov	r2, #128
 2504 00ae 1201     		lsl	r2, r2, #4
 2505 00b0 9A60     		str	r2, [r3, #8]
 2506              	.L151:
 341:../Sources/main.c **** 		}
 342:../Sources/main.c **** 	
 343:../Sources/main.c **** 		if(brakeCounter >= BRAKECOUNTERMAX && straightCounter > straightCounterMax)
 2507              		.loc 1 343 0
 2508 00b2 8A4B     		ldr	r3, .L179+52
 2509 00b4 1B88     		ldrh	r3, [r3]
 2510 00b6 182B     		cmp	r3, #24
 2511 00b8 2FD9     		bls	.L178
 2512              		.loc 1 343 0 is_stmt 0
 2513 00ba 894B     		ldr	r3, .L179+56
 2514 00bc 1A88     		ldrh	r2, [r3]
 2515 00be 894B     		ldr	r3, .L179+60
 2516 00c0 1B88     		ldrh	r3, [r3]
 2517 00c2 9A42     		cmp	r2, r3
 2518 00c4 29D9     		bls	.L178
 344:../Sources/main.c **** 		{
 345:../Sources/main.c **** 			straightCounter = 0;
 2519              		.loc 1 345 0 is_stmt 1
 2520 00c6 864B     		ldr	r3, .L179+56
 2521 00c8 0022     		mov	r2, #0
 2522 00ca 1A80     		strh	r2, [r3]
 346:../Sources/main.c **** 			TFC_BAT_LED0_OFF;
 2523              		.loc 1 346 0
 2524 00cc 874B     		ldr	r3, .L179+68
 2525 00ce 8022     		mov	r2, #128
 2526 00d0 5200     		lsl	r2, r2, #1
 2527 00d2 9A60     		str	r2, [r3, #8]
 347:../Sources/main.c **** 			TFC_BAT_LED1_OFF;
 2528              		.loc 1 347 0
 2529 00d4 854B     		ldr	r3, .L179+68
 2530 00d6 8022     		mov	r2, #128
 2531 00d8 9200     		lsl	r2, r2, #2
 2532 00da 9A60     		str	r2, [r3, #8]
 348:../Sources/main.c **** 			TFC_BAT_LED2_OFF;
 2533              		.loc 1 348 0
 2534 00dc 834B     		ldr	r3, .L179+68
 2535 00de 8022     		mov	r2, #128
 2536 00e0 D200     		lsl	r2, r2, #3
 2537 00e2 9A60     		str	r2, [r3, #8]
 349:../Sources/main.c **** 			TFC_BAT_LED3_OFF;
 2538              		.loc 1 349 0
 2539 00e4 814B     		ldr	r3, .L179+68
 2540 00e6 8022     		mov	r2, #128
 2541 00e8 1201     		lsl	r2, r2, #4
 2542 00ea 9A60     		str	r2, [r3, #8]
 343:../Sources/main.c **** 		if(brakeCounter >= BRAKECOUNTERMAX && straightCounter > straightCounterMax)
 2543              		.loc 1 343 0
 2544 00ec 15E0     		b	.L178
 2545              	.L177:
 350:../Sources/main.c **** 		}
 351:../Sources/main.c **** 	}
 352:../Sources/main.c **** 	else
 353:../Sources/main.c **** 	{
 354:../Sources/main.c **** 		newSpeed = speed;
 2546              		.loc 1 354 0
 2547 00ee 7B68     		ldr	r3, [r7, #4]
 2548 00f0 FB60     		str	r3, [r7, #12]
 355:../Sources/main.c **** 		brakeCounter = 0;
 2549              		.loc 1 355 0
 2550 00f2 7A4B     		ldr	r3, .L179+52
 2551 00f4 0022     		mov	r2, #0
 2552 00f6 1A80     		strh	r2, [r3]
 356:../Sources/main.c **** 		TFC_BAT_LED0_OFF;
 2553              		.loc 1 356 0
 2554 00f8 7C4B     		ldr	r3, .L179+68
 2555 00fa 8022     		mov	r2, #128
 2556 00fc 5200     		lsl	r2, r2, #1
 2557 00fe 9A60     		str	r2, [r3, #8]
 357:../Sources/main.c **** 		TFC_BAT_LED1_OFF;
 2558              		.loc 1 357 0
 2559 0100 7A4B     		ldr	r3, .L179+68
 2560 0102 8022     		mov	r2, #128
 2561 0104 9200     		lsl	r2, r2, #2
 2562 0106 9A60     		str	r2, [r3, #8]
 358:../Sources/main.c **** 		TFC_BAT_LED2_OFF;
 2563              		.loc 1 358 0
 2564 0108 784B     		ldr	r3, .L179+68
 2565 010a 8022     		mov	r2, #128
 2566 010c D200     		lsl	r2, r2, #3
 2567 010e 9A60     		str	r2, [r3, #8]
 359:../Sources/main.c **** 		TFC_BAT_LED3_OFF;
 2568              		.loc 1 359 0
 2569 0110 764B     		ldr	r3, .L179+68
 2570 0112 8022     		mov	r2, #128
 2571 0114 1201     		lsl	r2, r2, #4
 2572 0116 9A60     		str	r2, [r3, #8]
 2573 0118 00E0     		b	.L153
 2574              	.L178:
 343:../Sources/main.c **** 		if(brakeCounter >= BRAKECOUNTERMAX && straightCounter > straightCounterMax)
 2575              		.loc 1 343 0
 2576 011a C046     		mov	r8, r8
 2577              	.L153:
 360:../Sources/main.c **** 	}
 361:../Sources/main.c **** 	
 362:../Sources/main.c **** 	if(steer < 0.6 && steer > -0.6) //0.5
 2578              		.loc 1 362 0
 2579 011c 3868     		ldr	r0, [r7]
 2580 011e FFF7FEFF 		bl	__aeabi_f2d
 2581 0122 031C     		mov	r3, r0
 2582 0124 0C1C     		mov	r4, r1
 2583 0126 181C     		mov	r0, r3
 2584 0128 211C     		mov	r1, r4
 2585 012a 614A     		ldr	r2, .L179+8
 2586 012c 614B     		ldr	r3, .L179+12
 2587 012e FFF7FEFF 		bl	__aeabi_dcmplt
 2588 0132 031C     		mov	r3, r0
 2589 0134 002B     		cmp	r3, #0
 2590 0136 13D0     		beq	.L154
 2591              	.L171:
 2592              		.loc 1 362 0 is_stmt 0
 2593 0138 3868     		ldr	r0, [r7]
 2594 013a FFF7FEFF 		bl	__aeabi_f2d
 2595 013e 031C     		mov	r3, r0
 2596 0140 0C1C     		mov	r4, r1
 2597 0142 181C     		mov	r0, r3
 2598 0144 211C     		mov	r1, r4
 2599 0146 5C4A     		ldr	r2, .L179+16
 2600 0148 5C4B     		ldr	r3, .L179+20
 2601 014a FFF7FEFF 		bl	__aeabi_dcmpgt
 2602 014e 031C     		mov	r3, r0
 2603 0150 002B     		cmp	r3, #0
 2604 0152 05D0     		beq	.L154
 2605              	.L172:
 363:../Sources/main.c **** 	{
 364:../Sources/main.c **** 		straightCounter++;
 2606              		.loc 1 364 0 is_stmt 1
 2607 0154 624B     		ldr	r3, .L179+56
 2608 0156 1B88     		ldrh	r3, [r3]
 2609 0158 0133     		add	r3, r3, #1
 2610 015a 9AB2     		uxth	r2, r3
 2611 015c 604B     		ldr	r3, .L179+56
 2612 015e 1A80     		strh	r2, [r3]
 2613              	.L154:
 365:../Sources/main.c **** 	}
 366:../Sources/main.c **** 	
 367:../Sources/main.c **** 	if(((steer > 0.6 || steer < -0.6) && brakeCounter == 0) || speed == 0.0)
 2614              		.loc 1 367 0
 2615 0160 3868     		ldr	r0, [r7]
 2616 0162 FFF7FEFF 		bl	__aeabi_f2d
 2617 0166 031C     		mov	r3, r0
 2618 0168 0C1C     		mov	r4, r1
 2619 016a 181C     		mov	r0, r3
 2620 016c 211C     		mov	r1, r4
 2621 016e 504A     		ldr	r2, .L179+8
 2622 0170 504B     		ldr	r3, .L179+12
 2623 0172 FFF7FEFF 		bl	__aeabi_dcmpgt
 2624 0176 031C     		mov	r3, r0
 2625 0178 002B     		cmp	r3, #0
 2626 017a 0DD1     		bne	.L157
 2627              		.loc 1 367 0 is_stmt 0
 2628 017c 3868     		ldr	r0, [r7]
 2629 017e FFF7FEFF 		bl	__aeabi_f2d
 2630 0182 031C     		mov	r3, r0
 2631 0184 0C1C     		mov	r4, r1
 2632 0186 181C     		mov	r0, r3
 2633 0188 211C     		mov	r1, r4
 2634 018a 4B4A     		ldr	r2, .L179+16
 2635 018c 4B4B     		ldr	r3, .L179+20
 2636 018e FFF7FEFF 		bl	__aeabi_dcmplt
 2637 0192 031C     		mov	r3, r0
 2638 0194 002B     		cmp	r3, #0
 2639 0196 03D0     		beq	.L158
 2640              	.L157:
 2641              		.loc 1 367 0
 2642 0198 504B     		ldr	r3, .L179+52
 2643 019a 1B88     		ldrh	r3, [r3]
 2644 019c 002B     		cmp	r3, #0
 2645 019e 06D0     		beq	.L160
 2646              	.L158:
 2647 01a0 7868     		ldr	r0, [r7, #4]
 2648 01a2 0021     		mov	r1, #0
 2649 01a4 FFF7FEFF 		bl	__aeabi_fcmpeq
 2650 01a8 031C     		mov	r3, r0
 2651 01aa 002B     		cmp	r3, #0
 2652 01ac 02D0     		beq	.L161
 2653              	.L160:
 368:../Sources/main.c **** 	{
 369:../Sources/main.c **** 		straightCounter=0;
 2654              		.loc 1 369 0 is_stmt 1
 2655 01ae 4C4B     		ldr	r3, .L179+56
 2656 01b0 0022     		mov	r2, #0
 2657 01b2 1A80     		strh	r2, [r3]
 2658              	.L161:
 370:../Sources/main.c **** 	}
 371:../Sources/main.c **** 	
 372:../Sources/main.c **** 	if(straightCounter>(straightCounterMax*0.25))
 2659              		.loc 1 372 0
 2660 01b4 4A4B     		ldr	r3, .L179+56
 2661 01b6 1B88     		ldrh	r3, [r3]
 2662 01b8 181C     		mov	r0, r3
 2663 01ba FFF7FEFF 		bl	__aeabi_i2d
 2664 01be 051C     		mov	r5, r0
 2665 01c0 0E1C     		mov	r6, r1
 2666 01c2 484B     		ldr	r3, .L179+60
 2667 01c4 1B88     		ldrh	r3, [r3]
 2668 01c6 181C     		mov	r0, r3
 2669 01c8 FFF7FEFF 		bl	__aeabi_i2d
 2670 01cc 031C     		mov	r3, r0
 2671 01ce 0C1C     		mov	r4, r1
 2672 01d0 181C     		mov	r0, r3
 2673 01d2 211C     		mov	r1, r4
 2674 01d4 3A4A     		ldr	r2, .L179+24
 2675 01d6 3B4B     		ldr	r3, .L179+28
 2676 01d8 FFF7FEFF 		bl	__aeabi_dmul
 2677 01dc 031C     		mov	r3, r0
 2678 01de 0C1C     		mov	r4, r1
 2679 01e0 281C     		mov	r0, r5
 2680 01e2 311C     		mov	r1, r6
 2681 01e4 1A1C     		mov	r2, r3
 2682 01e6 231C     		mov	r3, r4
 2683 01e8 FFF7FEFF 		bl	__aeabi_dcmpgt
 2684 01ec 031C     		mov	r3, r0
 2685 01ee 002B     		cmp	r3, #0
 2686 01f0 03D0     		beq	.L163
 2687              	.L173:
 373:../Sources/main.c **** 			TFC_BAT_LED0_ON;
 2688              		.loc 1 373 0
 2689 01f2 3E4B     		ldr	r3, .L179+68
 2690 01f4 8022     		mov	r2, #128
 2691 01f6 5200     		lsl	r2, r2, #1
 2692 01f8 5A60     		str	r2, [r3, #4]
 2693              	.L163:
 374:../Sources/main.c **** 	if(straightCounter>(straightCounterMax*0.50))
 2694              		.loc 1 374 0
 2695 01fa 394B     		ldr	r3, .L179+56
 2696 01fc 1B88     		ldrh	r3, [r3]
 2697 01fe 181C     		mov	r0, r3
 2698 0200 FFF7FEFF 		bl	__aeabi_i2d
 2699 0204 051C     		mov	r5, r0
 2700 0206 0E1C     		mov	r6, r1
 2701 0208 364B     		ldr	r3, .L179+60
 2702 020a 1B88     		ldrh	r3, [r3]
 2703 020c 181C     		mov	r0, r3
 2704 020e FFF7FEFF 		bl	__aeabi_i2d
 2705 0212 031C     		mov	r3, r0
 2706 0214 0C1C     		mov	r4, r1
 2707 0216 181C     		mov	r0, r3
 2708 0218 211C     		mov	r1, r4
 2709 021a 2B4A     		ldr	r2, .L179+32
 2710 021c 2B4B     		ldr	r3, .L179+36
 2711 021e FFF7FEFF 		bl	__aeabi_dmul
 2712 0222 031C     		mov	r3, r0
 2713 0224 0C1C     		mov	r4, r1
 2714 0226 281C     		mov	r0, r5
 2715 0228 311C     		mov	r1, r6
 2716 022a 1A1C     		mov	r2, r3
 2717 022c 231C     		mov	r3, r4
 2718 022e FFF7FEFF 		bl	__aeabi_dcmpgt
 2719 0232 031C     		mov	r3, r0
 2720 0234 002B     		cmp	r3, #0
 2721 0236 03D0     		beq	.L165
 2722              	.L174:
 375:../Sources/main.c **** 			TFC_BAT_LED1_ON;
 2723              		.loc 1 375 0
 2724 0238 2C4B     		ldr	r3, .L179+68
 2725 023a 8022     		mov	r2, #128
 2726 023c 9200     		lsl	r2, r2, #2
 2727 023e 5A60     		str	r2, [r3, #4]
 2728              	.L165:
 376:../Sources/main.c **** 	if(straightCounter>(straightCounterMax*0.75))
 2729              		.loc 1 376 0
 2730 0240 274B     		ldr	r3, .L179+56
 2731 0242 1B88     		ldrh	r3, [r3]
 2732 0244 181C     		mov	r0, r3
 2733 0246 FFF7FEFF 		bl	__aeabi_i2d
 2734 024a 051C     		mov	r5, r0
 2735 024c 0E1C     		mov	r6, r1
 2736 024e 254B     		ldr	r3, .L179+60
 2737 0250 1B88     		ldrh	r3, [r3]
 2738 0252 181C     		mov	r0, r3
 2739 0254 FFF7FEFF 		bl	__aeabi_i2d
 2740 0258 031C     		mov	r3, r0
 2741 025a 0C1C     		mov	r4, r1
 2742 025c 181C     		mov	r0, r3
 2743 025e 211C     		mov	r1, r4
 2744 0260 1B4A     		ldr	r2, .L179+40
 2745 0262 1C4B     		ldr	r3, .L179+44
 2746 0264 FFF7FEFF 		bl	__aeabi_dmul
 2747 0268 031C     		mov	r3, r0
 2748 026a 0C1C     		mov	r4, r1
 2749 026c 281C     		mov	r0, r5
 2750 026e 311C     		mov	r1, r6
 2751 0270 1A1C     		mov	r2, r3
 2752 0272 231C     		mov	r3, r4
 2753 0274 FFF7FEFF 		bl	__aeabi_dcmpgt
 2754 0278 031C     		mov	r3, r0
 2755 027a 002B     		cmp	r3, #0
 2756 027c 03D0     		beq	.L167
 2757              	.L175:
 377:../Sources/main.c **** 			TFC_BAT_LED2_ON;
 2758              		.loc 1 377 0
 2759 027e 1B4B     		ldr	r3, .L179+68
 2760 0280 8022     		mov	r2, #128
 2761 0282 D200     		lsl	r2, r2, #3
 2762 0284 5A60     		str	r2, [r3, #4]
 2763              	.L167:
 378:../Sources/main.c **** 	if(straightCounter>straightCounterMax)
 2764              		.loc 1 378 0
 2765 0286 164B     		ldr	r3, .L179+56
 2766 0288 1A88     		ldrh	r2, [r3]
 2767 028a 164B     		ldr	r3, .L179+60
 2768 028c 1B88     		ldrh	r3, [r3]
 2769 028e 9A42     		cmp	r2, r3
 2770 0290 03D9     		bls	.L169
 379:../Sources/main.c **** 			TFC_BAT_LED3_ON;
 2771              		.loc 1 379 0
 2772 0292 164B     		ldr	r3, .L179+68
 2773 0294 8022     		mov	r2, #128
 2774 0296 1201     		lsl	r2, r2, #4
 2775 0298 5A60     		str	r2, [r3, #4]
 2776              	.L169:
 380:../Sources/main.c **** 	
 381:../Sources/main.c **** 	//TERMINAL_PRINTF("NewSpeed: %i\r\n",(int)(newSpeed*100));
 382:../Sources/main.c **** 	return newSpeed;
 2777              		.loc 1 382 0
 2778 029a FB68     		ldr	r3, [r7, #12]
 2779              	.L146:
 383:../Sources/main.c **** }
 2780              		.loc 1 383 0
 2781 029c 181C     		add	r0, r3, #0
 2782 029e BD46     		mov	sp, r7
 2783 02a0 05B0     		add	sp, sp, #20
 2784              		@ sp needed for prologue
 2785 02a2 F0BD     		pop	{r4, r5, r6, r7, pc}
 2786              	.L180:
 2787 02a4 C046C046 		.align	3
 2788              	.L179:
 2789 02a8 66666666 		.word	1717986918
 2790 02ac 6666E63F 		.word	1072064102
 2791 02b0 33333333 		.word	858993459
 2792 02b4 3333E33F 		.word	1071854387
 2793 02b8 33333333 		.word	858993459
 2794 02bc 3333E3BF 		.word	-1075629261
 2795 02c0 00000000 		.word	0
 2796 02c4 0000D03F 		.word	1070596096
 2797 02c8 00000000 		.word	0
 2798 02cc 0000E03F 		.word	1071644672
 2799 02d0 00000000 		.word	0
 2800 02d4 0000E83F 		.word	1072168960
 2801 02d8 000080BF 		.word	-1082130432
 2802 02dc 00000000 		.word	brakeCounter
 2803 02e0 00000000 		.word	straightCounter
 2804 02e4 00000000 		.word	straightCounterMax
 2805 02e8 CDCCCC3E 		.word	1053609165
 2806 02ec 40F00F40 		.word	1074786368
 2807 02f0 9A99193F 		.word	1058642330
 2808              		.cfi_endproc
 2809              	.LFE20:
 2811 02f4 C046C046 		.section	.text.getLineMid,"ax",%progbits
 2812              		.align	2
 2813              		.global	getLineMid
 2814              		.code	16
 2815              		.thumb_func
 2817              	getLineMid:
 2818              	.LFB21:
 384:../Sources/main.c **** 
 385:../Sources/main.c **** uint16_t getLineMid(uint16_t index)
 386:../Sources/main.c **** {
 2819              		.loc 1 386 0
 2820              		.cfi_startproc
 2821 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2822              	.LCFI58:
 2823              		.cfi_def_cfa_offset 20
 2824              		.cfi_offset 4, -20
 2825              		.cfi_offset 5, -16
 2826              		.cfi_offset 6, -12
 2827              		.cfi_offset 7, -8
 2828              		.cfi_offset 14, -4
 2829 0002 87B0     		sub	sp, sp, #28
 2830              	.LCFI59:
 2831              		.cfi_def_cfa_offset 48
 2832 0004 00AF     		add	r7, sp, #0
 2833              	.LCFI60:
 2834              		.cfi_def_cfa_register 7
 2835 0006 021C     		mov	r2, r0
 2836 0008 BB1D     		add	r3, r7, #6
 2837 000a 1A80     		strh	r2, [r3]
 387:../Sources/main.c **** 	int i;
 388:../Sources/main.c **** 	uint16_t left = 0, right = 0;
 2838              		.loc 1 388 0
 2839 000c 3B1C     		mov	r3, r7
 2840 000e 1233     		add	r3, r3, #18
 2841 0010 0022     		mov	r2, #0
 2842 0012 1A80     		strh	r2, [r3]
 2843 0014 3B1C     		mov	r3, r7
 2844 0016 1033     		add	r3, r3, #16
 2845 0018 0022     		mov	r2, #0
 2846 001a 1A80     		strh	r2, [r3]
 389:../Sources/main.c **** 
 390:../Sources/main.c **** 	uint16_t length = 7;
 2847              		.loc 1 390 0
 2848 001c 3B1C     		mov	r3, r7
 2849 001e 0E33     		add	r3, r3, #14
 2850 0020 0722     		mov	r2, #7
 2851 0022 1A80     		strh	r2, [r3]
 391:../Sources/main.c **** 
 392:../Sources/main.c **** 	for(i=0; i<length; i++)
 2852              		.loc 1 392 0
 2853 0024 0023     		mov	r3, #0
 2854 0026 7B61     		str	r3, [r7, #20]
 2855 0028 4AE0     		b	.L182
 2856              	.L187:
 393:../Sources/main.c **** 	{
 394:../Sources/main.c **** 		if((index-i) >= STDOFFSET && isWhite(index-i))
 2857              		.loc 1 394 0
 2858 002a BB1D     		add	r3, r7, #6
 2859 002c 1A88     		ldrh	r2, [r3]
 2860 002e 7B69     		ldr	r3, [r7, #20]
 2861 0030 D31A     		sub	r3, r2, r3
 2862 0032 042B     		cmp	r3, #4
 2863 0034 12DD     		ble	.L183
 2864              		.loc 1 394 0 is_stmt 0
 2865 0036 7B69     		ldr	r3, [r7, #20]
 2866 0038 9BB2     		uxth	r3, r3
 2867 003a BA1D     		add	r2, r7, #6
 2868 003c 1288     		ldrh	r2, [r2]
 2869 003e D31A     		sub	r3, r2, r3
 2870 0040 9BB2     		uxth	r3, r3
 2871 0042 181C     		mov	r0, r3
 2872 0044 FFF7FEFF 		bl	isWhite
 2873 0048 031C     		mov	r3, r0
 2874 004a 002B     		cmp	r3, #0
 2875 004c 06D0     		beq	.L183
 395:../Sources/main.c **** 			left++;
 2876              		.loc 1 395 0 is_stmt 1
 2877 004e 3B1C     		mov	r3, r7
 2878 0050 1233     		add	r3, r3, #18
 2879 0052 3A1C     		mov	r2, r7
 2880 0054 1232     		add	r2, r2, #18
 2881 0056 1288     		ldrh	r2, [r2]
 2882 0058 0132     		add	r2, r2, #1
 2883 005a 1A80     		strh	r2, [r3]
 2884              	.L183:
 396:../Sources/main.c **** 		if((index+i) < STDOFFSET+STDLENGTH && isWhite(index+i))
 2885              		.loc 1 396 0
 2886 005c BB1D     		add	r3, r7, #6
 2887 005e 1A88     		ldrh	r2, [r3]
 2888 0060 7B69     		ldr	r3, [r7, #20]
 2889 0062 D318     		add	r3, r2, r3
 2890 0064 642B     		cmp	r3, #100
 2891 0066 12DC     		bgt	.L184
 2892              		.loc 1 396 0 is_stmt 0
 2893 0068 7B69     		ldr	r3, [r7, #20]
 2894 006a 9AB2     		uxth	r2, r3
 2895 006c BB1D     		add	r3, r7, #6
 2896 006e 1B88     		ldrh	r3, [r3]
 2897 0070 D318     		add	r3, r2, r3
 2898 0072 9BB2     		uxth	r3, r3
 2899 0074 181C     		mov	r0, r3
 2900 0076 FFF7FEFF 		bl	isWhite
 2901 007a 031C     		mov	r3, r0
 2902 007c 002B     		cmp	r3, #0
 2903 007e 06D0     		beq	.L184
 397:../Sources/main.c **** 			right++;
 2904              		.loc 1 397 0 is_stmt 1
 2905 0080 3B1C     		mov	r3, r7
 2906 0082 1033     		add	r3, r3, #16
 2907 0084 3A1C     		mov	r2, r7
 2908 0086 1032     		add	r2, r2, #16
 2909 0088 1288     		ldrh	r2, [r2]
 2910 008a 0132     		add	r2, r2, #1
 2911 008c 1A80     		strh	r2, [r3]
 2912              	.L184:
 398:../Sources/main.c **** 		
 399:../Sources/main.c **** 		if((left >= MAXWHITE && right >= MAXWHITE) || (index-i) < STDOFFSET || (index+i) >= (STDOFFSET+ST
 2913              		.loc 1 399 0
 2914 008e 3B1C     		mov	r3, r7
 2915 0090 1233     		add	r3, r3, #18
 2916 0092 1B88     		ldrh	r3, [r3]
 2917 0094 022B     		cmp	r3, #2
 2918 0096 04D9     		bls	.L185
 2919              		.loc 1 399 0 is_stmt 0
 2920 0098 3B1C     		mov	r3, r7
 2921 009a 1033     		add	r3, r3, #16
 2922 009c 1B88     		ldrh	r3, [r3]
 2923 009e 022B     		cmp	r3, #2
 2924 00a0 14D8     		bhi	.L186
 2925              	.L185:
 2926              		.loc 1 399 0
 2927 00a2 BB1D     		add	r3, r7, #6
 2928 00a4 1A88     		ldrh	r2, [r3]
 2929 00a6 7B69     		ldr	r3, [r7, #20]
 2930 00a8 D31A     		sub	r3, r2, r3
 2931 00aa 042B     		cmp	r3, #4
 2932 00ac 0EDD     		ble	.L186
 2933              		.loc 1 399 0
 2934 00ae BB1D     		add	r3, r7, #6
 2935 00b0 1A88     		ldrh	r2, [r3]
 2936 00b2 7B69     		ldr	r3, [r7, #20]
 2937 00b4 D318     		add	r3, r2, r3
 2938 00b6 642B     		cmp	r3, #100
 2939 00b8 08DC     		bgt	.L186
 392:../Sources/main.c **** 	for(i=0; i<length; i++)
 2940              		.loc 1 392 0 is_stmt 1
 2941 00ba 7B69     		ldr	r3, [r7, #20]
 2942 00bc 0133     		add	r3, r3, #1
 2943 00be 7B61     		str	r3, [r7, #20]
 2944              	.L182:
 392:../Sources/main.c **** 	for(i=0; i<length; i++)
 2945              		.loc 1 392 0 is_stmt 0
 2946 00c0 3B1C     		mov	r3, r7
 2947 00c2 0E33     		add	r3, r3, #14
 2948 00c4 1A88     		ldrh	r2, [r3]
 2949 00c6 7B69     		ldr	r3, [r7, #20]
 2950 00c8 9A42     		cmp	r2, r3
 2951 00ca AEDC     		bgt	.L187
 2952              	.L186:
 400:../Sources/main.c **** 			break;
 401:../Sources/main.c **** 	}
 402:../Sources/main.c **** 
 403:../Sources/main.c **** 	return  (int16_t)(index - (float)(right-left)/2.0);
 2953              		.loc 1 403 0 is_stmt 1
 2954 00cc BB1D     		add	r3, r7, #6
 2955 00ce 1B88     		ldrh	r3, [r3]
 2956 00d0 181C     		mov	r0, r3
 2957 00d2 FFF7FEFF 		bl	__aeabi_i2d
 2958 00d6 051C     		mov	r5, r0
 2959 00d8 0E1C     		mov	r6, r1
 2960 00da 3B1C     		mov	r3, r7
 2961 00dc 1033     		add	r3, r3, #16
 2962 00de 1A88     		ldrh	r2, [r3]
 2963 00e0 3B1C     		mov	r3, r7
 2964 00e2 1233     		add	r3, r3, #18
 2965 00e4 1B88     		ldrh	r3, [r3]
 2966 00e6 D31A     		sub	r3, r2, r3
 2967 00e8 181C     		mov	r0, r3
 2968 00ea FFF7FEFF 		bl	__aeabi_i2f
 2969 00ee 031C     		add	r3, r0, #0
 2970 00f0 181C     		add	r0, r3, #0
 2971 00f2 FFF7FEFF 		bl	__aeabi_f2d
 2972 00f6 031C     		mov	r3, r0
 2973 00f8 0C1C     		mov	r4, r1
 2974 00fa 181C     		mov	r0, r3
 2975 00fc 211C     		mov	r1, r4
 2976 00fe 0D4B     		ldr	r3, .L189+4
 2977 0100 0B4A     		ldr	r2, .L189
 2978 0102 FFF7FEFF 		bl	__aeabi_ddiv
 2979 0106 031C     		mov	r3, r0
 2980 0108 0C1C     		mov	r4, r1
 2981 010a 281C     		mov	r0, r5
 2982 010c 311C     		mov	r1, r6
 2983 010e 1A1C     		mov	r2, r3
 2984 0110 231C     		mov	r3, r4
 2985 0112 FFF7FEFF 		bl	__aeabi_dsub
 2986 0116 031C     		mov	r3, r0
 2987 0118 0C1C     		mov	r4, r1
 2988 011a 181C     		mov	r0, r3
 2989 011c 211C     		mov	r1, r4
 2990 011e FFF7FEFF 		bl	__aeabi_d2iz
 2991 0122 031C     		mov	r3, r0
 2992 0124 9BB2     		uxth	r3, r3
 2993 0126 9BB2     		uxth	r3, r3
 404:../Sources/main.c **** }
 2994              		.loc 1 404 0
 2995 0128 181C     		mov	r0, r3
 2996 012a BD46     		mov	sp, r7
 2997 012c 07B0     		add	sp, sp, #28
 2998              		@ sp needed for prologue
 2999 012e F0BD     		pop	{r4, r5, r6, r7, pc}
 3000              	.L190:
 3001              		.align	3
 3002              	.L189:
 3003 0130 00000000 		.word	0
 3004 0134 00000040 		.word	1073741824
 3005              		.cfi_endproc
 3006              	.LFE21:
 3008              		.section	.text.getMiddleIndex,"ax",%progbits
 3009              		.align	2
 3010              		.global	getMiddleIndex
 3011              		.code	16
 3012              		.thumb_func
 3014              	getMiddleIndex:
 3015              	.LFB22:
 405:../Sources/main.c **** 
 406:../Sources/main.c **** uint16_t getMiddleIndex()
 407:../Sources/main.c **** {
 3016              		.loc 1 407 0
 3017              		.cfi_startproc
 3018 0000 90B5     		push	{r4, r7, lr}
 3019              	.LCFI61:
 3020              		.cfi_def_cfa_offset 12
 3021              		.cfi_offset 4, -12
 3022              		.cfi_offset 7, -8
 3023              		.cfi_offset 14, -4
 3024 0002 83B0     		sub	sp, sp, #12
 3025              	.LCFI62:
 3026              		.cfi_def_cfa_offset 24
 3027 0004 00AF     		add	r7, sp, #0
 3028              	.LCFI63:
 3029              		.cfi_def_cfa_register 7
 408:../Sources/main.c **** 	uint16_t startIndex = IMPROVEDfindBlack();//findBlack_IT(STDOFFSET, STDLENGTH);  
 3030              		.loc 1 408 0
 3031 0006 FFF7FEFF 		bl	IMPROVEDfindBlack
 3032 000a 021C     		mov	r2, r0
 3033 000c BB1D     		add	r3, r7, #6
 3034 000e 1A80     		strh	r2, [r3]
 409:../Sources/main.c **** 	//TERMINAL_PRINTF("Start: %i \t", startIndex);
 410:../Sources/main.c **** 	uint16_t middleIndex = getLineMid(startIndex);
 3035              		.loc 1 410 0
 3036 0010 3C1D     		add	r4, r7, #4
 3037 0012 BB1D     		add	r3, r7, #6
 3038 0014 1B88     		ldrh	r3, [r3]
 3039 0016 181C     		mov	r0, r3
 3040 0018 FFF7FEFF 		bl	getLineMid
 3041 001c 031C     		mov	r3, r0
 3042 001e 2380     		strh	r3, [r4]
 411:../Sources/main.c **** 	//TERMINAL_PRINTF("Middle: %i \n\r", middleIndex);
 412:../Sources/main.c **** 	return middleIndex;
 3043              		.loc 1 412 0
 3044 0020 3B1D     		add	r3, r7, #4
 3045 0022 1B88     		ldrh	r3, [r3]
 413:../Sources/main.c **** }
 3046              		.loc 1 413 0
 3047 0024 181C     		mov	r0, r3
 3048 0026 BD46     		mov	sp, r7
 3049 0028 03B0     		add	sp, sp, #12
 3050              		@ sp needed for prologue
 3051 002a 90BD     		pop	{r4, r7, pc}
 3052              		.cfi_endproc
 3053              	.LFE22:
 3055              		.global	__aeabi_fdiv
 3056              		.global	__aeabi_fmul
 3057              		.section	.text.calculateSteering,"ax",%progbits
 3058              		.align	2
 3059              		.global	calculateSteering
 3060              		.code	16
 3061              		.thumb_func
 3063              	calculateSteering:
 3064              	.LFB23:
 414:../Sources/main.c **** 
 415:../Sources/main.c **** float calculateSteering(uint16_t middleIndex)
 416:../Sources/main.c **** {
 3065              		.loc 1 416 0
 3066              		.cfi_startproc
 3067 0000 90B5     		push	{r4, r7, lr}
 3068              	.LCFI64:
 3069              		.cfi_def_cfa_offset 12
 3070              		.cfi_offset 4, -12
 3071              		.cfi_offset 7, -8
 3072              		.cfi_offset 14, -4
 3073 0002 8BB0     		sub	sp, sp, #44
 3074              	.LCFI65:
 3075              		.cfi_def_cfa_offset 56
 3076 0004 00AF     		add	r7, sp, #0
 3077              	.LCFI66:
 3078              		.cfi_def_cfa_register 7
 3079 0006 021C     		mov	r2, r0
 3080 0008 BB1D     		add	r3, r7, #6
 3081 000a 1A80     		strh	r2, [r3]
 417:../Sources/main.c **** 	float kp=0,ki=0,kd=0;
 3082              		.loc 1 417 0
 3083 000c 0023     		mov	r3, #0
 3084 000e 7B62     		str	r3, [r7, #36]
 3085 0010 0023     		mov	r3, #0
 3086 0012 3B62     		str	r3, [r7, #32]
 3087 0014 0023     		mov	r3, #0
 3088 0016 FB61     		str	r3, [r7, #28]
 418:../Sources/main.c **** 	float steer;
 419:../Sources/main.c **** 	float diff;
 420:../Sources/main.c **** 	if (middleIndex == 200) // Event of an error for the case that everything is white. 
 3089              		.loc 1 420 0
 3090 0018 BB1D     		add	r3, r7, #6
 3091 001a 1B88     		ldrh	r3, [r3]
 3092 001c C82B     		cmp	r3, #200
 3093 001e 1BD1     		bne	.L194
 421:../Sources/main.c **** 	{
 422:../Sources/main.c **** 		//diff = old_diff < 0 ? -48 : 48;
 423:../Sources/main.c **** 		old_diff = old_diff<0? -48 : 48;
 3094              		.loc 1 423 0
 3095 0020 994B     		ldr	r3, .L230+24
 3096 0022 1B68     		ldr	r3, [r3]
 3097 0024 181C     		add	r0, r3, #0
 3098 0026 0021     		mov	r1, #0
 3099 0028 FFF7FEFF 		bl	__aeabi_fcmplt
 3100 002c 031C     		mov	r3, r0
 3101 002e 002B     		cmp	r3, #0
 3102 0030 01D0     		beq	.L223
 3103              	.L217:
 3104              		.loc 1 423 0 is_stmt 0
 3105 0032 964B     		ldr	r3, .L230+28
 3106 0034 00E0     		b	.L197
 3107              	.L223:
 3108              		.loc 1 423 0
 3109 0036 964B     		ldr	r3, .L230+32
 3110              	.L197:
 3111              		.loc 1 423 0
 3112 0038 934A     		ldr	r2, .L230+24
 3113 003a 1360     		str	r3, [r2]
 424:../Sources/main.c **** 		return old_diff<0? -1.0 : 1.0;
 3114              		.loc 1 424 0 is_stmt 1
 3115 003c 924B     		ldr	r3, .L230+24
 3116 003e 1B68     		ldr	r3, [r3]
 3117 0040 181C     		add	r0, r3, #0
 3118 0042 0021     		mov	r1, #0
 3119 0044 FFF7FEFF 		bl	__aeabi_fcmplt
 3120 0048 031C     		mov	r3, r0
 3121 004a 002B     		cmp	r3, #0
 3122 004c 01D0     		beq	.L224
 3123              	.L218:
 3124              		.loc 1 424 0 is_stmt 0
 3125 004e 914B     		ldr	r3, .L230+36
 3126 0050 01E0     		b	.L200
 3127              	.L224:
 3128              		.loc 1 424 0
 3129 0052 FE23     		mov	r3, #254
 3130 0054 9B05     		lsl	r3, r3, #22
 3131              	.L200:
 3132              		.loc 1 424 0
 3133 0056 06E1     		b	.L201
 3134              	.L194:
 425:../Sources/main.c **** 	} 
 426:../Sources/main.c **** 	else
 427:../Sources/main.c **** 	{
 428:../Sources/main.c **** 		diff = middleIndex - 63.5;
 3135              		.loc 1 428 0 is_stmt 1
 3136 0058 BB1D     		add	r3, r7, #6
 3137 005a 1B88     		ldrh	r3, [r3]
 3138 005c 181C     		mov	r0, r3
 3139 005e FFF7FEFF 		bl	__aeabi_i2d
 3140 0062 031C     		mov	r3, r0
 3141 0064 0C1C     		mov	r4, r1
 3142 0066 181C     		mov	r0, r3
 3143 0068 211C     		mov	r1, r4
 3144 006a 824B     		ldr	r3, .L230+4
 3145 006c 804A     		ldr	r2, .L230
 3146 006e FFF7FEFF 		bl	__aeabi_dsub
 3147 0072 031C     		mov	r3, r0
 3148 0074 0C1C     		mov	r4, r1
 3149 0076 181C     		mov	r0, r3
 3150 0078 211C     		mov	r1, r4
 3151 007a FFF7FEFF 		bl	__aeabi_d2f
 3152 007e 031C     		add	r3, r0, #0
 3153 0080 7B61     		str	r3, [r7, #20]
 429:../Sources/main.c **** 	}
 430:../Sources/main.c **** 
 431:../Sources/main.c **** 	old_diff = (int16_t)diff;  //diff>0? (float)diff*32.0/26.0 : 
 3154              		.loc 1 431 0
 3155 0082 7869     		ldr	r0, [r7, #20]
 3156 0084 FFF7FEFF 		bl	__aeabi_f2iz
 3157 0088 031C     		mov	r3, r0
 3158 008a 9BB2     		uxth	r3, r3
 3159 008c 1BB2     		sxth	r3, r3
 3160 008e 181C     		mov	r0, r3
 3161 0090 FFF7FEFF 		bl	__aeabi_i2f
 3162 0094 021C     		add	r2, r0, #0
 3163 0096 7C4B     		ldr	r3, .L230+24
 3164 0098 1A60     		str	r2, [r3]
 432:../Sources/main.c **** 	//TERMINAL_PRINTF("diff: %i \t", (int)(diff*1000));
 433:../Sources/main.c **** 	//Calculate steering value
 434:../Sources/main.c **** 	float diffinch = (float) diff / (float) PIXELPERINCH;
 3165              		.loc 1 434 0
 3166 009a 7869     		ldr	r0, [r7, #20]
 3167 009c 7E49     		ldr	r1, .L230+40
 3168 009e FFF7FEFF 		bl	__aeabi_fdiv
 3169 00a2 031C     		add	r3, r0, #0
 3170 00a4 3B61     		str	r3, [r7, #16]
 435:../Sources/main.c **** 	float rad = atan(diffinch / (float) DISTANCE);
 3171              		.loc 1 435 0
 3172 00a6 3869     		ldr	r0, [r7, #16]
 3173 00a8 7C49     		ldr	r1, .L230+44
 3174 00aa FFF7FEFF 		bl	__aeabi_fdiv
 3175 00ae 031C     		add	r3, r0, #0
 3176 00b0 181C     		add	r0, r3, #0
 3177 00b2 FFF7FEFF 		bl	__aeabi_f2d
 3178 00b6 031C     		mov	r3, r0
 3179 00b8 0C1C     		mov	r4, r1
 3180 00ba 181C     		mov	r0, r3
 3181 00bc 211C     		mov	r1, r4
 3182 00be FFF7FEFF 		bl	atan
 3183 00c2 031C     		mov	r3, r0
 3184 00c4 0C1C     		mov	r4, r1
 3185 00c6 181C     		mov	r0, r3
 3186 00c8 211C     		mov	r1, r4
 3187 00ca FFF7FEFF 		bl	__aeabi_d2f
 3188 00ce 031C     		add	r3, r0, #0
 3189 00d0 FB60     		str	r3, [r7, #12]
 436:../Sources/main.c **** 	angle = (float) 180 / 3.14159265 * rad;
 3190              		.loc 1 436 0
 3191 00d2 F868     		ldr	r0, [r7, #12]
 3192 00d4 FFF7FEFF 		bl	__aeabi_f2d
 3193 00d8 031C     		mov	r3, r0
 3194 00da 0C1C     		mov	r4, r1
 3195 00dc 181C     		mov	r0, r3
 3196 00de 211C     		mov	r1, r4
 3197 00e0 654A     		ldr	r2, .L230+8
 3198 00e2 664B     		ldr	r3, .L230+12
 3199 00e4 FFF7FEFF 		bl	__aeabi_dmul
 3200 00e8 031C     		mov	r3, r0
 3201 00ea 0C1C     		mov	r4, r1
 3202 00ec 181C     		mov	r0, r3
 3203 00ee 211C     		mov	r1, r4
 3204 00f0 FFF7FEFF 		bl	__aeabi_d2f
 3205 00f4 021C     		add	r2, r0, #0
 3206 00f6 6A4B     		ldr	r3, .L230+48
 3207 00f8 1A60     		str	r2, [r3]
 437:../Sources/main.c **** 
 438:../Sources/main.c **** 	//pid parameters
 439:../Sources/main.c **** 	if( angle > 15)
 3208              		.loc 1 439 0
 3209 00fa 694B     		ldr	r3, .L230+48
 3210 00fc 1B68     		ldr	r3, [r3]
 3211 00fe 181C     		add	r0, r3, #0
 3212 0100 6849     		ldr	r1, .L230+52
 3213 0102 FFF7FEFF 		bl	__aeabi_fcmpgt
 3214 0106 031C     		mov	r3, r0
 3215 0108 002B     		cmp	r3, #0
 3216 010a 06D0     		beq	.L225
 3217              	.L219:
 440:../Sources/main.c **** 		{
 441:../Sources/main.c **** 			kp=0.027;
 3218              		.loc 1 441 0
 3219 010c 664B     		ldr	r3, .L230+56
 3220 010e 7B62     		str	r3, [r7, #36]
 442:../Sources/main.c **** 			kd=0.01;
 3221              		.loc 1 442 0
 3222 0110 664B     		ldr	r3, .L230+60
 3223 0112 FB61     		str	r3, [r7, #28]
 443:../Sources/main.c **** 			ki=0;
 3224              		.loc 1 443 0
 3225 0114 0023     		mov	r3, #0
 3226 0116 3B62     		str	r3, [r7, #32]
 3227 0118 0DE0     		b	.L204
 3228              	.L225:
 444:../Sources/main.c **** 		}
 445:../Sources/main.c **** 	else if(angle<-15)
 3229              		.loc 1 445 0
 3230 011a 614B     		ldr	r3, .L230+48
 3231 011c 1B68     		ldr	r3, [r3]
 3232 011e 181C     		add	r0, r3, #0
 3233 0120 6349     		ldr	r1, .L230+64
 3234 0122 FFF7FEFF 		bl	__aeabi_fcmplt
 3235 0126 031C     		mov	r3, r0
 3236 0128 002B     		cmp	r3, #0
 3237 012a 02D0     		beq	.L226
 3238              	.L220:
 446:../Sources/main.c **** 		{
 447:../Sources/main.c **** 			kp=0.0185;
 3239              		.loc 1 447 0
 3240 012c 614B     		ldr	r3, .L230+68
 3241 012e 7B62     		str	r3, [r7, #36]
 3242 0130 01E0     		b	.L204
 3243              	.L226:
 448:../Sources/main.c **** 	//		kd=0.0;
 449:../Sources/main.c **** 		//	ki=0;
 450:../Sources/main.c **** 		}
 451:../Sources/main.c **** 	else
 452:../Sources/main.c **** 		kp=0.016;
 3244              		.loc 1 452 0
 3245 0132 614B     		ldr	r3, .L230+72
 3246 0134 7B62     		str	r3, [r7, #36]
 3247              	.L204:
 453:../Sources/main.c **** 	
 454:../Sources/main.c **** 	//kp=angle>10?0.017:angle<-10?0.03:0.02;
 455:../Sources/main.c **** 	
 456:../Sources/main.c **** 		//-------------------------PID Algorithm-----------------------------------
 457:../Sources/main.c **** 		if(angle>5 || angle<-5)	
 3248              		.loc 1 457 0
 3249 0136 5A4B     		ldr	r3, .L230+48
 3250 0138 1B68     		ldr	r3, [r3]
 3251 013a 181C     		add	r0, r3, #0
 3252 013c 5F49     		ldr	r1, .L230+76
 3253 013e FFF7FEFF 		bl	__aeabi_fcmpgt
 3254 0142 031C     		mov	r3, r0
 3255 0144 002B     		cmp	r3, #0
 3256 0146 08D1     		bne	.L207
 3257              		.loc 1 457 0 is_stmt 0
 3258 0148 554B     		ldr	r3, .L230+48
 3259 014a 1B68     		ldr	r3, [r3]
 3260 014c 181C     		add	r0, r3, #0
 3261 014e 5C49     		ldr	r1, .L230+80
 3262 0150 FFF7FEFF 		bl	__aeabi_fcmplt
 3263 0154 031C     		mov	r3, r0
 3264 0156 002B     		cmp	r3, #0
 3265 0158 67D0     		beq	.L227
 3266              	.L207:
 458:../Sources/main.c **** 		{
 459:../Sources/main.c **** 			speed=0.5;
 3267              		.loc 1 459 0 is_stmt 1
 3268 015a 5A4B     		ldr	r3, .L230+84
 3269 015c FC22     		mov	r2, #252
 3270 015e 9205     		lsl	r2, r2, #22
 3271 0160 1A60     		str	r2, [r3]
 460:../Sources/main.c **** 			//-----------------Proportional------------------------
 461:../Sources/main.c **** 			proportional = angle * kp;
 3272              		.loc 1 461 0
 3273 0162 4F4B     		ldr	r3, .L230+48
 3274 0164 1B68     		ldr	r3, [r3]
 3275 0166 181C     		add	r0, r3, #0
 3276 0168 796A     		ldr	r1, [r7, #36]
 3277 016a FFF7FEFF 		bl	__aeabi_fmul
 3278 016e 031C     		add	r3, r0, #0
 3279 0170 1A1C     		add	r2, r3, #0
 3280 0172 554B     		ldr	r3, .L230+88
 3281 0174 1A60     		str	r2, [r3]
 462:../Sources/main.c **** 			//-------------------Integral--------------------------
 463:../Sources/main.c **** 			integral += angle;
 3282              		.loc 1 463 0
 3283 0176 554B     		ldr	r3, .L230+92
 3284 0178 1A68     		ldr	r2, [r3]
 3285 017a 494B     		ldr	r3, .L230+48
 3286 017c 1B68     		ldr	r3, [r3]
 3287 017e 101C     		add	r0, r2, #0
 3288 0180 191C     		add	r1, r3, #0
 3289 0182 FFF7FEFF 		bl	__aeabi_fadd
 3290 0186 031C     		add	r3, r0, #0
 3291 0188 1A1C     		add	r2, r3, #0
 3292 018a 504B     		ldr	r3, .L230+92
 3293 018c 1A60     		str	r2, [r3]
 464:../Sources/main.c **** 			integrald = integral * ki;
 3294              		.loc 1 464 0
 3295 018e 4F4B     		ldr	r3, .L230+92
 3296 0190 1B68     		ldr	r3, [r3]
 3297 0192 181C     		add	r0, r3, #0
 3298 0194 396A     		ldr	r1, [r7, #32]
 3299 0196 FFF7FEFF 		bl	__aeabi_fmul
 3300 019a 031C     		add	r3, r0, #0
 3301 019c 1A1C     		add	r2, r3, #0
 3302 019e 4C4B     		ldr	r3, .L230+96
 3303 01a0 1A60     		str	r2, [r3]
 465:../Sources/main.c **** 			//------------------Derivative-------------------------
 466:../Sources/main.c **** 			rate = -prevposition + angle;
 3304              		.loc 1 466 0
 3305 01a2 3F4B     		ldr	r3, .L230+48
 3306 01a4 1A68     		ldr	r2, [r3]
 3307 01a6 4B4B     		ldr	r3, .L230+100
 3308 01a8 1B68     		ldr	r3, [r3]
 3309 01aa 101C     		add	r0, r2, #0
 3310 01ac 191C     		add	r1, r3, #0
 3311 01ae FFF7FEFF 		bl	__aeabi_fsub
 3312 01b2 031C     		add	r3, r0, #0
 3313 01b4 1A1C     		add	r2, r3, #0
 3314 01b6 484B     		ldr	r3, .L230+104
 3315 01b8 1A60     		str	r2, [r3]
 467:../Sources/main.c **** 			derivative = rate * kd;
 3316              		.loc 1 467 0
 3317 01ba 474B     		ldr	r3, .L230+104
 3318 01bc 1B68     		ldr	r3, [r3]
 3319 01be 181C     		add	r0, r3, #0
 3320 01c0 F969     		ldr	r1, [r7, #28]
 3321 01c2 FFF7FEFF 		bl	__aeabi_fmul
 3322 01c6 031C     		add	r3, r0, #0
 3323 01c8 1A1C     		add	r2, r3, #0
 3324 01ca 444B     		ldr	r3, .L230+108
 3325 01cc 1A60     		str	r2, [r3]
 468:../Sources/main.c **** 			//--------------------Control--------------------------
 469:../Sources/main.c **** 			control = proportional+derivative+integrald;
 3326              		.loc 1 469 0
 3327 01ce 3E4B     		ldr	r3, .L230+88
 3328 01d0 1A68     		ldr	r2, [r3]
 3329 01d2 424B     		ldr	r3, .L230+108
 3330 01d4 1B68     		ldr	r3, [r3]
 3331 01d6 101C     		add	r0, r2, #0
 3332 01d8 191C     		add	r1, r3, #0
 3333 01da FFF7FEFF 		bl	__aeabi_fadd
 3334 01de 031C     		add	r3, r0, #0
 3335 01e0 1A1C     		add	r2, r3, #0
 3336 01e2 3B4B     		ldr	r3, .L230+96
 3337 01e4 1B68     		ldr	r3, [r3]
 3338 01e6 101C     		add	r0, r2, #0
 3339 01e8 191C     		add	r1, r3, #0
 3340 01ea FFF7FEFF 		bl	__aeabi_fadd
 3341 01ee 031C     		add	r3, r0, #0
 3342 01f0 1A1C     		add	r2, r3, #0
 3343 01f2 3B4B     		ldr	r3, .L230+112
 3344 01f4 1A60     		str	r2, [r3]
 470:../Sources/main.c **** 			integral /= 1.3;
 3345              		.loc 1 470 0
 3346 01f6 354B     		ldr	r3, .L230+92
 3347 01f8 1B68     		ldr	r3, [r3]
 3348 01fa 181C     		add	r0, r3, #0
 3349 01fc FFF7FEFF 		bl	__aeabi_f2d
 3350 0200 031C     		mov	r3, r0
 3351 0202 0C1C     		mov	r4, r1
 3352 0204 181C     		mov	r0, r3
 3353 0206 211C     		mov	r1, r4
 3354 0208 1D4A     		ldr	r2, .L230+16
 3355 020a 1E4B     		ldr	r3, .L230+20
 3356 020c FFF7FEFF 		bl	__aeabi_ddiv
 3357 0210 031C     		mov	r3, r0
 3358 0212 0C1C     		mov	r4, r1
 3359 0214 181C     		mov	r0, r3
 3360 0216 211C     		mov	r1, r4
 3361 0218 FFF7FEFF 		bl	__aeabi_d2f
 3362 021c 021C     		add	r2, r0, #0
 3363 021e 2B4B     		ldr	r3, .L230+92
 3364 0220 1A60     		str	r2, [r3]
 471:../Sources/main.c **** 			//-----------------------------------------------------		
 472:../Sources/main.c **** 			steer=control;	
 3365              		.loc 1 472 0
 3366 0222 2F4B     		ldr	r3, .L230+112
 3367 0224 1B68     		ldr	r3, [r3]
 3368 0226 BB61     		str	r3, [r7, #24]
 3369 0228 04E0     		b	.L210
 3370              	.L227:
 473:../Sources/main.c **** 			//if(steer<0)
 474:../Sources/main.c **** 				//steer=steer-0.05;
 475:../Sources/main.c **** 			//--------------------PID Ends-------------------------
 476:../Sources/main.c **** 		}	     
 477:../Sources/main.c **** 		else
 478:../Sources/main.c **** 		{
 479:../Sources/main.c **** 			speed=0.6;
 3371              		.loc 1 479 0
 3372 022a 264B     		ldr	r3, .L230+84
 3373 022c 2D4A     		ldr	r2, .L230+116
 3374 022e 1A60     		str	r2, [r3]
 480:../Sources/main.c **** 			steer=0;
 3375              		.loc 1 480 0
 3376 0230 0023     		mov	r3, #0
 3377 0232 BB61     		str	r3, [r7, #24]
 3378              	.L210:
 481:../Sources/main.c **** 		}   
 482:../Sources/main.c **** 		prevposition=angle;
 3379              		.loc 1 482 0
 3380 0234 1A4B     		ldr	r3, .L230+48
 3381 0236 1A68     		ldr	r2, [r3]
 3382 0238 264B     		ldr	r3, .L230+100
 3383 023a 1A60     		str	r2, [r3]
 483:../Sources/main.c **** 		return steer<-1.0? -1.0 : steer>1.0? 1.0 : steer;
 3384              		.loc 1 483 0
 3385 023c B869     		ldr	r0, [r7, #24]
 3386 023e 1549     		ldr	r1, .L230+36
 3387 0240 FFF7FEFF 		bl	__aeabi_fcmplt
 3388 0244 031C     		mov	r3, r0
 3389 0246 002B     		cmp	r3, #0
 3390 0248 01D0     		beq	.L228
 3391              	.L221:
 3392              		.loc 1 483 0 is_stmt 0
 3393 024a 124B     		ldr	r3, .L230+36
 3394 024c 0BE0     		b	.L213
 3395              	.L228:
 3396              		.loc 1 483 0
 3397 024e B869     		ldr	r0, [r7, #24]
 3398 0250 FE21     		mov	r1, #254
 3399 0252 8905     		lsl	r1, r1, #22
 3400 0254 FFF7FEFF 		bl	__aeabi_fcmpgt
 3401 0258 031C     		mov	r3, r0
 3402 025a 002B     		cmp	r3, #0
 3403 025c 02D0     		beq	.L229
 3404              	.L222:
 3405              		.loc 1 483 0
 3406 025e FE23     		mov	r3, #254
 3407 0260 9B05     		lsl	r3, r3, #22
 3408 0262 00E0     		b	.L216
 3409              	.L229:
 3410              		.loc 1 483 0
 3411 0264 BB69     		ldr	r3, [r7, #24]
 3412              	.L216:
 3413              	.L213:
 3414              	.L201:
 484:../Sources/main.c **** 
 485:../Sources/main.c **** 	
 486:../Sources/main.c **** 	/*	float steer = angle > 0 ? angle / 47.5 : angle / 55.5;
 487:../Sources/main.c **** 	
 488:../Sources/main.c **** 		if(angle>15 && angle<-18)
 489:../Sources/main.c **** 			steer=old_steer;
 490:../Sources/main.c **** 	
 491:../Sources/main.c **** 		old_steer=steer;
 492:../Sources/main.c **** 	//steer = angle > 55.5 ? 1 : angle < -70.5 ? -1 : steer;
 493:../Sources/main.c **** 	//float steer = angle > 25.5 ? 1 : angle < -25.5 ? -1 : angle / 45.5;
 494:../Sources/main.c **** 	//float steer = angle > 32 ? 1 : angle < -25.5 ? -1 : angle < 0 ? angle / 25.5 : angle / 32.0;
 495:../Sources/main.c **** 	//TERMINAL_PRINTF("steer: %i\r\n", (int)(steer*100));
 496:../Sources/main.c **** 	
 497:../Sources/main.c **** 	if(steer < 0.2 && steer > -0.2)
 498:../Sources/main.c **** 	{
 499:../Sources/main.c **** 		steer = steer/2;
 500:../Sources/main.c **** 		//steer = steer*steer*2.5;
 501:../Sources/main.c **** 	}
 502:../Sources/main.c **** 	return steer<-1.0? -1.0 : steer>1.0? 1.0 : steer;*/
 503:../Sources/main.c **** }
 3415              		.loc 1 503 0 is_stmt 1
 3416 0266 181C     		add	r0, r3, #0
 3417 0268 BD46     		mov	sp, r7
 3418 026a 0BB0     		add	sp, sp, #44
 3419              		@ sp needed for prologue
 3420 026c 90BD     		pop	{r4, r7, pc}
 3421              	.L231:
 3422 026e C046     		.align	3
 3423              	.L230:
 3424 0270 00000000 		.word	0
 3425 0274 00C04F40 		.word	1078968320
 3426 0278 775AF01A 		.word	451959415
 3427 027c DCA54C40 		.word	1078765020
 3428 0280 CDCCCCCC 		.word	-858993459
 3429 0284 CCCCF43F 		.word	1073007820
 3430 0288 00000000 		.word	old_diff
 3431 028c 000040C2 		.word	-1035993088
 3432 0290 00004042 		.word	1111490560
 3433 0294 000080BF 		.word	-1082130432
 3434 0298 0000E040 		.word	1088421888
 3435 029c 00006041 		.word	1096810496
 3436 02a0 00000000 		.word	angle
 3437 02a4 00007041 		.word	1097859072
 3438 02a8 1B2FDD3C 		.word	1021128475
 3439 02ac 0AD7233C 		.word	1008981770
 3440 02b0 000070C1 		.word	-1049624576
 3441 02b4 508D973C 		.word	1016565072
 3442 02b8 6F12833C 		.word	1015222895
 3443 02bc 0000A040 		.word	1084227584
 3444 02c0 0000A0C0 		.word	-1063256064
 3445 02c4 00000000 		.word	speed
 3446 02c8 00000000 		.word	proportional
 3447 02cc 00000000 		.word	integral
 3448 02d0 00000000 		.word	integrald
 3449 02d4 00000000 		.word	prevposition
 3450 02d8 00000000 		.word	rate
 3451 02dc 00000000 		.word	derivative
 3452 02e0 00000000 		.word	control
 3453 02e4 9A99193F 		.word	1058642330
 3454              		.cfi_endproc
 3455              	.LFE23:
 3457              		.section	.text.checkStart,"ax",%progbits
 3458              		.align	2
 3459              		.global	checkStart
 3460              		.code	16
 3461              		.thumb_func
 3463              	checkStart:
 3464              	.LFB24:
 504:../Sources/main.c **** 
 505:../Sources/main.c **** 
 506:../Sources/main.c **** void checkStart(middleIndex)
 507:../Sources/main.c **** {
 3465              		.loc 1 507 0
 3466              		.cfi_startproc
 3467 0000 80B5     		push	{r7, lr}
 3468              	.LCFI67:
 3469              		.cfi_def_cfa_offset 8
 3470              		.cfi_offset 7, -8
 3471              		.cfi_offset 14, -4
 3472 0002 82B0     		sub	sp, sp, #8
 3473              	.LCFI68:
 3474              		.cfi_def_cfa_offset 16
 3475 0004 00AF     		add	r7, sp, #0
 3476              	.LCFI69:
 3477              		.cfi_def_cfa_register 7
 3478 0006 7860     		str	r0, [r7, #4]
 508:../Sources/main.c **** 	if (isCentrical(middleIndex) && isStart(middleIndex))
 3479              		.loc 1 508 0
 3480 0008 7B68     		ldr	r3, [r7, #4]
 3481 000a 9BB2     		uxth	r3, r3
 3482 000c 181C     		mov	r0, r3
 3483 000e FFF7FEFF 		bl	isCentrical
 3484 0012 031C     		mov	r3, r0
 3485 0014 002B     		cmp	r3, #0
 3486 0016 0AD0     		beq	.L232
 3487              		.loc 1 508 0 is_stmt 0
 3488 0018 7B68     		ldr	r3, [r7, #4]
 3489 001a 9BB2     		uxth	r3, r3
 3490 001c 181C     		mov	r0, r3
 3491 001e FFF7FEFF 		bl	isStart
 3492 0022 031C     		mov	r3, r0
 3493 0024 002B     		cmp	r3, #0
 3494 0026 02D0     		beq	.L232
 509:../Sources/main.c **** 	{
 510:../Sources/main.c **** 		overStart = true;
 3495              		.loc 1 510 0 is_stmt 1
 3496 0028 024B     		ldr	r3, .L234
 3497 002a 0122     		mov	r2, #1
 3498 002c 1A70     		strb	r2, [r3]
 3499              	.L232:
 511:../Sources/main.c **** 	}
 512:../Sources/main.c **** //	if (isStart(middleIndex))
 513:../Sources/main.c **** //	{
 514:../Sources/main.c **** //		overStart = true;
 515:../Sources/main.c **** //	}
 516:../Sources/main.c **** }
 3500              		.loc 1 516 0
 3501 002e BD46     		mov	sp, r7
 3502 0030 02B0     		add	sp, sp, #8
 3503              		@ sp needed for prologue
 3504 0032 80BD     		pop	{r7, pc}
 3505              	.L235:
 3506              		.align	2
 3507              	.L234:
 3508 0034 00000000 		.word	overStart
 3509              		.cfi_endproc
 3510              	.LFE24:
 3512              		.section	.text.drive,"ax",%progbits
 3513              		.align	2
 3514              		.global	drive
 3515              		.code	16
 3516              		.thumb_func
 3518              	drive:
 3519              	.LFB25:
 517:../Sources/main.c **** 
 518:../Sources/main.c **** void drive(float speed)
 519:../Sources/main.c **** {
 3520              		.loc 1 519 0
 3521              		.cfi_startproc
 3522 0000 90B5     		push	{r4, r7, lr}
 3523              	.LCFI70:
 3524              		.cfi_def_cfa_offset 12
 3525              		.cfi_offset 4, -12
 3526              		.cfi_offset 7, -8
 3527              		.cfi_offset 14, -4
 3528 0002 87B0     		sub	sp, sp, #28
 3529              	.LCFI71:
 3530              		.cfi_def_cfa_offset 40
 3531 0004 00AF     		add	r7, sp, #0
 3532              	.LCFI72:
 3533              		.cfi_def_cfa_register 7
 3534 0006 7860     		str	r0, [r7, #4]
 520:../Sources/main.c **** 	//float border=0;
 521:../Sources/main.c **** 	
 522:../Sources/main.c **** 	uint16_t middleIndex = getMiddleIndex();
 3535              		.loc 1 522 0
 3536 0008 3C1C     		mov	r4, r7
 3537 000a 1234     		add	r4, r4, #18
 3538 000c FFF7FEFF 		bl	getMiddleIndex
 3539 0010 031C     		mov	r3, r0
 3540 0012 2380     		strh	r3, [r4]
 523:../Sources/main.c **** 	//if(middleIndex >50 && middleIndex < 70)
 524:../Sources/main.c **** 		//calibrateLightSensorAtPoint(middleIndex);
 525:../Sources/main.c **** 	//checkStart(middleIndex);
 526:../Sources/main.c **** 	float steer = calculateSteering(middleIndex);
 3541              		.loc 1 526 0
 3542 0014 3B1C     		mov	r3, r7
 3543 0016 1233     		add	r3, r3, #18
 3544 0018 1B88     		ldrh	r3, [r3]
 3545 001a 181C     		mov	r0, r3
 3546 001c FFF7FEFF 		bl	calculateSteering
 3547 0020 031C     		add	r3, r0, #0
 3548 0022 FB60     		str	r3, [r7, #12]
 527:../Sources/main.c **** 	
 528:../Sources/main.c **** 	//TFC_SetServo(0, steer * (steer < 0 ? -steer : steer));
 529:../Sources/main.c **** 	if(TFC_Ticker[1]>=20)
 3549              		.loc 1 529 0
 3550 0024 254B     		ldr	r3, .L245
 3551 0026 5B68     		ldr	r3, [r3, #4]
 3552 0028 132B     		cmp	r3, #19
 3553 002a 07D9     		bls	.L237
 530:../Sources/main.c **** 	{
 531:../Sources/main.c **** 		TFC_SetServo(0, steer);
 3554              		.loc 1 531 0
 3555 002c FB68     		ldr	r3, [r7, #12]
 3556 002e 0020     		mov	r0, #0
 3557 0030 191C     		add	r1, r3, #0
 3558 0032 FFF7FEFF 		bl	TFC_SetServo
 532:../Sources/main.c **** 		TFC_Ticker[1] = 0;
 3559              		.loc 1 532 0
 3560 0036 214B     		ldr	r3, .L245
 3561 0038 0022     		mov	r2, #0
 3562 003a 5A60     		str	r2, [r3, #4]
 3563              	.L237:
 533:../Sources/main.c **** 	}
 534:../Sources/main.c **** 	
 535:../Sources/main.c **** 	float newSpeed;
 536:../Sources/main.c **** 	
 537:../Sources/main.c **** 	if(startCounter)//<60)
 3564              		.loc 1 537 0
 3565 003c 204B     		ldr	r3, .L245+4
 3566 003e 1B88     		ldrh	r3, [r3]
 3567 0040 002B     		cmp	r3, #0
 3568 0042 09D0     		beq	.L238
 538:../Sources/main.c **** 	{
 539:../Sources/main.c **** 		startCounter++;
 3569              		.loc 1 539 0
 3570 0044 1E4B     		ldr	r3, .L245+4
 3571 0046 1B88     		ldrh	r3, [r3]
 3572 0048 0133     		add	r3, r3, #1
 3573 004a 9AB2     		uxth	r2, r3
 3574 004c 1C4B     		ldr	r3, .L245+4
 3575 004e 1A80     		strh	r2, [r3]
 540:../Sources/main.c **** 		newSpeed = 1.0;
 3576              		.loc 1 540 0
 3577 0050 FE23     		mov	r3, #254
 3578 0052 9B05     		lsl	r3, r3, #22
 3579 0054 7B61     		str	r3, [r7, #20]
 3580 0056 07E0     		b	.L239
 3581              	.L238:
 541:../Sources/main.c **** 	}
 542:../Sources/main.c **** 	else 
 543:../Sources/main.c **** 	{
 544:../Sources/main.c **** 		newSpeed = calculateSpeed_II(speed, steer);	
 3582              		.loc 1 544 0
 3583 0058 7A68     		ldr	r2, [r7, #4]
 3584 005a FB68     		ldr	r3, [r7, #12]
 3585 005c 101C     		add	r0, r2, #0
 3586 005e 191C     		add	r1, r3, #0
 3587 0060 FFF7FEFF 		bl	calculateSpeed_II
 3588 0064 031C     		add	r3, r0, #0
 3589 0066 7B61     		str	r3, [r7, #20]
 3590              	.L239:
 545:../Sources/main.c **** 	}
 546:../Sources/main.c **** 	
 547:../Sources/main.c **** 	if (angle > 0)
 3591              		.loc 1 547 0
 3592 0068 164B     		ldr	r3, .L245+8
 3593 006a 1B68     		ldr	r3, [r3]
 3594 006c 181C     		add	r0, r3, #0
 3595 006e 0021     		mov	r1, #0
 3596 0070 FFF7FEFF 		bl	__aeabi_fcmpgt
 3597 0074 031C     		mov	r3, r0
 3598 0076 002B     		cmp	r3, #0
 3599 0078 0DD0     		beq	.L244
 3600              	.L243:
 548:../Sources/main.c **** 	{
 549:../Sources/main.c **** 		TFC_SetMotorPWM(getInnerSpeed(newSpeed, angle), newSpeed);
 3601              		.loc 1 549 0
 3602 007a 124B     		ldr	r3, .L245+8
 3603 007c 1B68     		ldr	r3, [r3]
 3604 007e 7A69     		ldr	r2, [r7, #20]
 3605 0080 101C     		add	r0, r2, #0
 3606 0082 191C     		add	r1, r3, #0
 3607 0084 FFF7FEFF 		bl	getInnerSpeed
 3608 0088 021C     		add	r2, r0, #0
 3609 008a 7B69     		ldr	r3, [r7, #20]
 3610 008c 101C     		add	r0, r2, #0
 3611 008e 191C     		add	r1, r3, #0
 3612 0090 FFF7FEFF 		bl	TFC_SetMotorPWM
 3613 0094 0FE0     		b	.L236
 3614              	.L244:
 550:../Sources/main.c **** 	} 
 551:../Sources/main.c **** 	else
 552:../Sources/main.c **** 	{
 553:../Sources/main.c **** 		TFC_SetMotorPWM(newSpeed, getInnerSpeed(newSpeed, -angle));
 3615              		.loc 1 553 0
 3616 0096 0B4B     		ldr	r3, .L245+8
 3617 0098 1B68     		ldr	r3, [r3]
 3618 009a 8022     		mov	r2, #128
 3619 009c 1206     		lsl	r2, r2, #24
 3620 009e 5340     		eor	r3, r2
 3621 00a0 7A69     		ldr	r2, [r7, #20]
 3622 00a2 101C     		add	r0, r2, #0
 3623 00a4 191C     		add	r1, r3, #0
 3624 00a6 FFF7FEFF 		bl	getInnerSpeed
 3625 00aa 031C     		add	r3, r0, #0
 3626 00ac 7A69     		ldr	r2, [r7, #20]
 3627 00ae 101C     		add	r0, r2, #0
 3628 00b0 191C     		add	r1, r3, #0
 3629 00b2 FFF7FEFF 		bl	TFC_SetMotorPWM
 3630              	.L236:
 554:../Sources/main.c **** 	}
 555:../Sources/main.c **** }
 3631              		.loc 1 555 0
 3632 00b6 BD46     		mov	sp, r7
 3633 00b8 07B0     		add	sp, sp, #28
 3634              		@ sp needed for prologue
 3635 00ba 90BD     		pop	{r4, r7, pc}
 3636              	.L246:
 3637              		.align	2
 3638              	.L245:
 3639 00bc 00000000 		.word	TFC_Ticker
 3640 00c0 00000000 		.word	startCounter
 3641 00c4 00000000 		.word	angle
 3642              		.cfi_endproc
 3643              	.LFE25:
 3645              		.section	.text.driveWithHillRecognition,"ax",%progbits
 3646              		.align	2
 3647              		.global	driveWithHillRecognition
 3648              		.code	16
 3649              		.thumb_func
 3651              	driveWithHillRecognition:
 3652              	.LFB26:
 556:../Sources/main.c **** 
 557:../Sources/main.c **** void driveWithHillRecognition(float speed)
 558:../Sources/main.c **** {
 3653              		.loc 1 558 0
 3654              		.cfi_startproc
 3655 0000 90B5     		push	{r4, r7, lr}
 3656              	.LCFI73:
 3657              		.cfi_def_cfa_offset 12
 3658              		.cfi_offset 4, -12
 3659              		.cfi_offset 7, -8
 3660              		.cfi_offset 14, -4
 3661 0002 87B0     		sub	sp, sp, #28
 3662              	.LCFI74:
 3663              		.cfi_def_cfa_offset 40
 3664 0004 00AF     		add	r7, sp, #0
 3665              	.LCFI75:
 3666              		.cfi_def_cfa_register 7
 3667 0006 7860     		str	r0, [r7, #4]
 559:../Sources/main.c **** 	uint16_t middleIndex = getMiddleIndex();
 3668              		.loc 1 559 0
 3669 0008 3C1C     		mov	r4, r7
 3670 000a 1234     		add	r4, r4, #18
 3671 000c FFF7FEFF 		bl	getMiddleIndex
 3672 0010 031C     		mov	r3, r0
 3673 0012 2380     		strh	r3, [r4]
 560:../Sources/main.c **** 	//if(middleIndex >50 && middleIndex < 70)
 561:../Sources/main.c **** 		//calibrateLightSensorAtPoint(middleIndex);
 562:../Sources/main.c **** 	checkStart(middleIndex);
 3674              		.loc 1 562 0
 3675 0014 3B1C     		mov	r3, r7
 3676 0016 1233     		add	r3, r3, #18
 3677 0018 1B88     		ldrh	r3, [r3]
 3678 001a 181C     		mov	r0, r3
 3679 001c FFF7FEFF 		bl	checkStart
 563:../Sources/main.c **** 	float steer = calculateSteering(middleIndex);
 3680              		.loc 1 563 0
 3681 0020 3B1C     		mov	r3, r7
 3682 0022 1233     		add	r3, r3, #18
 3683 0024 1B88     		ldrh	r3, [r3]
 3684 0026 181C     		mov	r0, r3
 3685 0028 FFF7FEFF 		bl	calculateSteering
 3686 002c 031C     		add	r3, r0, #0
 3687 002e FB60     		str	r3, [r7, #12]
 564:../Sources/main.c **** 	
 565:../Sources/main.c **** 	//TFC_SetServo(0, steer * (steer < 0 ? -steer : steer));
 566:../Sources/main.c **** 	if(TFC_Ticker[1]>=20)
 3688              		.loc 1 566 0
 3689 0030 374B     		ldr	r3, .L258
 3690 0032 5B68     		ldr	r3, [r3, #4]
 3691 0034 132B     		cmp	r3, #19
 3692 0036 07D9     		bls	.L248
 567:../Sources/main.c **** 	{
 568:../Sources/main.c **** 		TFC_SetServo(0, steer);
 3693              		.loc 1 568 0
 3694 0038 FB68     		ldr	r3, [r7, #12]
 3695 003a 0020     		mov	r0, #0
 3696 003c 191C     		add	r1, r3, #0
 3697 003e FFF7FEFF 		bl	TFC_SetServo
 569:../Sources/main.c **** 		TFC_Ticker[1] = 0;
 3698              		.loc 1 569 0
 3699 0042 334B     		ldr	r3, .L258
 3700 0044 0022     		mov	r2, #0
 3701 0046 5A60     		str	r2, [r3, #4]
 3702              	.L248:
 570:../Sources/main.c **** 	}
 571:../Sources/main.c **** 	float newSpeed;
 572:../Sources/main.c **** 	if(isHill() && hillCounter > 4)
 3703              		.loc 1 572 0
 3704 0048 FFF7FEFF 		bl	isHill
 3705 004c 031C     		mov	r3, r0
 3706 004e 002B     		cmp	r3, #0
 3707 0050 06D0     		beq	.L249
 3708              		.loc 1 572 0 is_stmt 0
 3709 0052 304B     		ldr	r3, .L258+4
 3710 0054 1B88     		ldrh	r3, [r3]
 3711 0056 042B     		cmp	r3, #4
 3712 0058 02D9     		bls	.L249
 573:../Sources/main.c **** 	{
 574:../Sources/main.c **** 		hill=true;
 3713              		.loc 1 574 0 is_stmt 1
 3714 005a 2F4B     		ldr	r3, .L258+8
 3715 005c 0122     		mov	r2, #1
 3716 005e 1A70     		strb	r2, [r3]
 3717              	.L249:
 575:../Sources/main.c **** 	}
 576:../Sources/main.c **** 	
 577:../Sources/main.c **** 	if(startCounter<20)
 3718              		.loc 1 577 0
 3719 0060 2E4B     		ldr	r3, .L258+12
 3720 0062 1B88     		ldrh	r3, [r3]
 3721 0064 132B     		cmp	r3, #19
 3722 0066 09D8     		bhi	.L250
 578:../Sources/main.c **** 	{
 579:../Sources/main.c **** 		startCounter++;
 3723              		.loc 1 579 0
 3724 0068 2C4B     		ldr	r3, .L258+12
 3725 006a 1B88     		ldrh	r3, [r3]
 3726 006c 0133     		add	r3, r3, #1
 3727 006e 9AB2     		uxth	r2, r3
 3728 0070 2A4B     		ldr	r3, .L258+12
 3729 0072 1A80     		strh	r2, [r3]
 580:../Sources/main.c **** 		newSpeed = 1.0;
 3730              		.loc 1 580 0
 3731 0074 FE23     		mov	r3, #254
 3732 0076 9B05     		lsl	r3, r3, #22
 3733 0078 7B61     		str	r3, [r7, #20]
 3734 007a 1EE0     		b	.L251
 3735              	.L250:
 581:../Sources/main.c **** 	}
 582:../Sources/main.c **** 	else if(hill && hillBrakeCounter < 10)
 3736              		.loc 1 582 0
 3737 007c 264B     		ldr	r3, .L258+8
 3738 007e 1B78     		ldrb	r3, [r3]
 3739 0080 002B     		cmp	r3, #0
 3740 0082 0CD0     		beq	.L252
 3741              		.loc 1 582 0 is_stmt 0
 3742 0084 264B     		ldr	r3, .L258+16
 3743 0086 1B88     		ldrh	r3, [r3]
 3744 0088 092B     		cmp	r3, #9
 3745 008a 08D8     		bhi	.L252
 583:../Sources/main.c **** 	{
 584:../Sources/main.c **** 		newSpeed = -1.0;
 3746              		.loc 1 584 0 is_stmt 1
 3747 008c 254B     		ldr	r3, .L258+20
 3748 008e 7B61     		str	r3, [r7, #20]
 585:../Sources/main.c **** 		hillBrakeCounter++;
 3749              		.loc 1 585 0
 3750 0090 234B     		ldr	r3, .L258+16
 3751 0092 1B88     		ldrh	r3, [r3]
 3752 0094 0133     		add	r3, r3, #1
 3753 0096 9AB2     		uxth	r2, r3
 3754 0098 214B     		ldr	r3, .L258+16
 3755 009a 1A80     		strh	r2, [r3]
 3756 009c 0DE0     		b	.L251
 3757              	.L252:
 586:../Sources/main.c **** 	}
 587:../Sources/main.c **** 	else
 588:../Sources/main.c **** 	{
 589:../Sources/main.c **** 		newSpeed = calculateSpeed_II(speed, steer);
 3758              		.loc 1 589 0
 3759 009e 7A68     		ldr	r2, [r7, #4]
 3760 00a0 FB68     		ldr	r3, [r7, #12]
 3761 00a2 101C     		add	r0, r2, #0
 3762 00a4 191C     		add	r1, r3, #0
 3763 00a6 FFF7FEFF 		bl	calculateSpeed_II
 3764 00aa 031C     		add	r3, r0, #0
 3765 00ac 7B61     		str	r3, [r7, #20]
 590:../Sources/main.c **** 		hillBrakeCounter = 0;
 3766              		.loc 1 590 0
 3767 00ae 1C4B     		ldr	r3, .L258+16
 3768 00b0 0022     		mov	r2, #0
 3769 00b2 1A80     		strh	r2, [r3]
 591:../Sources/main.c **** 		hill = false;
 3770              		.loc 1 591 0
 3771 00b4 184B     		ldr	r3, .L258+8
 3772 00b6 0022     		mov	r2, #0
 3773 00b8 1A70     		strb	r2, [r3]
 3774              	.L251:
 592:../Sources/main.c **** 	}
 593:../Sources/main.c **** 	
 594:../Sources/main.c **** 	if (angle > 0)
 3775              		.loc 1 594 0
 3776 00ba 1B4B     		ldr	r3, .L258+24
 3777 00bc 1B68     		ldr	r3, [r3]
 3778 00be 181C     		add	r0, r3, #0
 3779 00c0 0021     		mov	r1, #0
 3780 00c2 FFF7FEFF 		bl	__aeabi_fcmpgt
 3781 00c6 031C     		mov	r3, r0
 3782 00c8 002B     		cmp	r3, #0
 3783 00ca 0DD0     		beq	.L257
 3784              	.L256:
 595:../Sources/main.c **** 	{
 596:../Sources/main.c **** 		TFC_SetMotorPWM(getInnerSpeed(newSpeed, angle), newSpeed);
 3785              		.loc 1 596 0
 3786 00cc 164B     		ldr	r3, .L258+24
 3787 00ce 1B68     		ldr	r3, [r3]
 3788 00d0 7A69     		ldr	r2, [r7, #20]
 3789 00d2 101C     		add	r0, r2, #0
 3790 00d4 191C     		add	r1, r3, #0
 3791 00d6 FFF7FEFF 		bl	getInnerSpeed
 3792 00da 021C     		add	r2, r0, #0
 3793 00dc 7B69     		ldr	r3, [r7, #20]
 3794 00de 101C     		add	r0, r2, #0
 3795 00e0 191C     		add	r1, r3, #0
 3796 00e2 FFF7FEFF 		bl	TFC_SetMotorPWM
 3797 00e6 0FE0     		b	.L247
 3798              	.L257:
 597:../Sources/main.c **** 	} 
 598:../Sources/main.c **** 	else
 599:../Sources/main.c **** 	{
 600:../Sources/main.c **** 		TFC_SetMotorPWM(newSpeed, getInnerSpeed(newSpeed, -angle));
 3799              		.loc 1 600 0
 3800 00e8 0F4B     		ldr	r3, .L258+24
 3801 00ea 1B68     		ldr	r3, [r3]
 3802 00ec 8022     		mov	r2, #128
 3803 00ee 1206     		lsl	r2, r2, #24
 3804 00f0 5340     		eor	r3, r2
 3805 00f2 7A69     		ldr	r2, [r7, #20]
 3806 00f4 101C     		add	r0, r2, #0
 3807 00f6 191C     		add	r1, r3, #0
 3808 00f8 FFF7FEFF 		bl	getInnerSpeed
 3809 00fc 031C     		add	r3, r0, #0
 3810 00fe 7A69     		ldr	r2, [r7, #20]
 3811 0100 101C     		add	r0, r2, #0
 3812 0102 191C     		add	r1, r3, #0
 3813 0104 FFF7FEFF 		bl	TFC_SetMotorPWM
 3814              	.L247:
 601:../Sources/main.c **** 	}
 602:../Sources/main.c **** }
 3815              		.loc 1 602 0
 3816 0108 BD46     		mov	sp, r7
 3817 010a 07B0     		add	sp, sp, #28
 3818              		@ sp needed for prologue
 3819 010c 90BD     		pop	{r4, r7, pc}
 3820              	.L259:
 3821 010e C046     		.align	2
 3822              	.L258:
 3823 0110 00000000 		.word	TFC_Ticker
 3824 0114 00000000 		.word	hillCounter
 3825 0118 00000000 		.word	hill
 3826 011c 00000000 		.word	startCounter
 3827 0120 00000000 		.word	hillBrakeCounter
 3828 0124 000080BF 		.word	-1082130432
 3829 0128 00000000 		.word	angle
 3830              		.cfi_endproc
 3831              	.LFE26:
 3833              		.section	.text.setEndOfRound,"ax",%progbits
 3834              		.align	2
 3835              		.global	setEndOfRound
 3836              		.code	16
 3837              		.thumb_func
 3839              	setEndOfRound:
 3840              	.LFB27:
 603:../Sources/main.c **** 
 604:../Sources/main.c **** 
 605:../Sources/main.c **** float setEndOfRound()
 606:../Sources/main.c **** {
 3841              		.loc 1 606 0
 3842              		.cfi_startproc
 3843 0000 80B5     		push	{r7, lr}
 3844              	.LCFI76:
 3845              		.cfi_def_cfa_offset 8
 3846              		.cfi_offset 7, -8
 3847              		.cfi_offset 14, -4
 3848 0002 82B0     		sub	sp, sp, #8
 3849              	.LCFI77:
 3850              		.cfi_def_cfa_offset 16
 3851 0004 00AF     		add	r7, sp, #0
 3852              	.LCFI78:
 3853              		.cfi_def_cfa_register 7
 607:../Sources/main.c **** 	float speed =0;
 3854              		.loc 1 607 0
 3855 0006 0023     		mov	r3, #0
 3856 0008 7B60     		str	r3, [r7, #4]
 608:../Sources/main.c **** 	if(brakeDelayCounter < 80)
 3857              		.loc 1 608 0
 3858 000a 124B     		ldr	r3, .L265
 3859 000c 1B88     		ldrh	r3, [r3]
 3860 000e 4F2B     		cmp	r3, #79
 3861 0010 06D8     		bhi	.L261
 609:../Sources/main.c **** 	{
 610:../Sources/main.c **** 		brakeDelayCounter++;
 3862              		.loc 1 610 0
 3863 0012 104B     		ldr	r3, .L265
 3864 0014 1B88     		ldrh	r3, [r3]
 3865 0016 0133     		add	r3, r3, #1
 3866 0018 9AB2     		uxth	r2, r3
 3867 001a 0E4B     		ldr	r3, .L265
 3868 001c 1A80     		strh	r2, [r3]
 3869 001e 14E0     		b	.L262
 3870              	.L261:
 611:../Sources/main.c **** 	}
 612:../Sources/main.c **** 	else if(brakeDelayCounter >= 80 && endOfRoundCounter < 50)
 3871              		.loc 1 612 0
 3872 0020 0C4B     		ldr	r3, .L265
 3873 0022 1B88     		ldrh	r3, [r3]
 3874 0024 4F2B     		cmp	r3, #79
 3875 0026 0CD9     		bls	.L263
 3876              		.loc 1 612 0 is_stmt 0
 3877 0028 0B4B     		ldr	r3, .L265+4
 3878 002a 1B88     		ldrh	r3, [r3]
 3879 002c 312B     		cmp	r3, #49
 3880 002e 08D8     		bhi	.L263
 613:../Sources/main.c **** 	{
 614:../Sources/main.c **** 		speed = -1;
 3881              		.loc 1 614 0 is_stmt 1
 3882 0030 0A4B     		ldr	r3, .L265+8
 3883 0032 7B60     		str	r3, [r7, #4]
 615:../Sources/main.c **** 		endOfRoundCounter++;
 3884              		.loc 1 615 0
 3885 0034 084B     		ldr	r3, .L265+4
 3886 0036 1B88     		ldrh	r3, [r3]
 3887 0038 0133     		add	r3, r3, #1
 3888 003a 9AB2     		uxth	r2, r3
 3889 003c 064B     		ldr	r3, .L265+4
 3890 003e 1A80     		strh	r2, [r3]
 3891 0040 03E0     		b	.L262
 3892              	.L263:
 616:../Sources/main.c **** 	}
 617:../Sources/main.c **** 	else
 618:../Sources/main.c **** 	{
 619:../Sources/main.c **** 		speed = 0;
 3893              		.loc 1 619 0
 3894 0042 0023     		mov	r3, #0
 3895 0044 7B60     		str	r3, [r7, #4]
 620:../Sources/main.c **** 		disableMotor();	
 3896              		.loc 1 620 0
 3897 0046 FFF7FEFF 		bl	disableMotor
 3898              	.L262:
 621:../Sources/main.c **** 	}
 622:../Sources/main.c **** 	return speed;
 3899              		.loc 1 622 0
 3900 004a 7B68     		ldr	r3, [r7, #4]
 623:../Sources/main.c **** }
 3901              		.loc 1 623 0
 3902 004c 181C     		add	r0, r3, #0
 3903 004e BD46     		mov	sp, r7
 3904 0050 02B0     		add	sp, sp, #8
 3905              		@ sp needed for prologue
 3906 0052 80BD     		pop	{r7, pc}
 3907              	.L266:
 3908              		.align	2
 3909              	.L265:
 3910 0054 00000000 		.word	brakeDelayCounter
 3911 0058 00000000 		.word	endOfRoundCounter
 3912 005c 000080BF 		.word	-1082130432
 3913              		.cfi_endproc
 3914              	.LFE27:
 3916              		.global	__aeabi_ui2f
 3917              		.global	__aeabi_f2uiz
 3918              		.section	.text.threshold,"ax",%progbits
 3919              		.align	2
 3920              		.global	threshold
 3921              		.code	16
 3922              		.thumb_func
 3924              	threshold:
 3925              	.LFB28:
 624:../Sources/main.c **** 
 625:../Sources/main.c **** int threshold(void)
 626:../Sources/main.c **** {
 3926              		.loc 1 626 0
 3927              		.cfi_startproc
 3928 0000 90B5     		push	{r4, r7, lr}
 3929              	.LCFI79:
 3930              		.cfi_def_cfa_offset 12
 3931              		.cfi_offset 4, -12
 3932              		.cfi_offset 7, -8
 3933              		.cfi_offset 14, -4
 3934 0002 7E4C     		ldr	r4, .L274
 3935 0004 A544     		add	sp, sp, r4
 3936              	.LCFI80:
 3937              		.cfi_def_cfa_offset 560
 3938 0006 00AF     		add	r7, sp, #0
 3939              	.LCFI81:
 3940              		.cfi_def_cfa_register 7
 627:../Sources/main.c **** 	float Result[128],mean,sum,sd,temp1,k=0.64,r=2000;
 3941              		.loc 1 627 0
 3942 0008 7D4B     		ldr	r3, .L274+4
 3943 000a 8420     		mov	r0, #132
 3944 000c 8000     		lsl	r0, r0, #2
 3945 000e C019     		add	r0, r0, r7
 3946 0010 0360     		str	r3, [r0]
 3947 0012 7C4B     		ldr	r3, .L274+8
 3948 0014 8321     		mov	r1, #131
 3949 0016 8900     		lsl	r1, r1, #2
 3950 0018 C919     		add	r1, r1, r7
 3951 001a 0B60     		str	r3, [r1]
 628:../Sources/main.c **** 	int i;
 629:../Sources/main.c **** 	uint16_t thr;
 630:../Sources/main.c **** 	
 631:../Sources/main.c **** 	for(i=0;i<128;i++)
 3952              		.loc 1 631 0
 3953 001c 0023     		mov	r3, #0
 3954 001e 8522     		mov	r2, #133
 3955 0020 9200     		lsl	r2, r2, #2
 3956 0022 D219     		add	r2, r2, r7
 3957 0024 1360     		str	r3, [r2]
 3958 0026 48E0     		b	.L268
 3959              	.L270:
 632:../Sources/main.c **** 	{
 633:../Sources/main.c **** 		Result[i]=LineScanImage0Buffer[1][i];
 3960              		.loc 1 633 0
 3961 0028 774B     		ldr	r3, .L274+12
 3962 002a 8520     		mov	r0, #133
 3963 002c 8000     		lsl	r0, r0, #2
 3964 002e C019     		add	r0, r0, r7
 3965 0030 0268     		ldr	r2, [r0]
 3966 0032 8032     		add	r2, r2, #128
 3967 0034 5200     		lsl	r2, r2, #1
 3968 0036 D35A     		ldrh	r3, [r2, r3]
 3969 0038 9BB2     		uxth	r3, r3
 3970 003a 181C     		mov	r0, r3
 3971 003c FFF7FEFF 		bl	__aeabi_ui2f
 3972 0040 011C     		add	r1, r0, #0
 3973 0042 724B     		ldr	r3, .L274+16
 3974 0044 8822     		mov	r2, #136
 3975 0046 9200     		lsl	r2, r2, #2
 3976 0048 D219     		add	r2, r2, r7
 3977 004a D318     		add	r3, r2, r3
 3978 004c 8520     		mov	r0, #133
 3979 004e 8000     		lsl	r0, r0, #2
 3980 0050 C019     		add	r0, r0, r7
 3981 0052 0268     		ldr	r2, [r0]
 3982 0054 9200     		lsl	r2, r2, #2
 3983 0056 D150     		str	r1, [r2, r3]
 634:../Sources/main.c **** 		if(i>9 && i<120)
 3984              		.loc 1 634 0
 3985 0058 8521     		mov	r1, #133
 3986 005a 8900     		lsl	r1, r1, #2
 3987 005c C919     		add	r1, r1, r7
 3988 005e 0B68     		ldr	r3, [r1]
 3989 0060 092B     		cmp	r3, #9
 3990 0062 21DD     		ble	.L269
 3991              		.loc 1 634 0 is_stmt 0
 3992 0064 8522     		mov	r2, #133
 3993 0066 9200     		lsl	r2, r2, #2
 3994 0068 D219     		add	r2, r2, r7
 3995 006a 1368     		ldr	r3, [r2]
 3996 006c 772B     		cmp	r3, #119
 3997 006e 1BDC     		bgt	.L269
 635:../Sources/main.c **** 		mean+=Result[i]/110;
 3998              		.loc 1 635 0 is_stmt 1
 3999 0070 664B     		ldr	r3, .L274+16
 4000 0072 8820     		mov	r0, #136
 4001 0074 8000     		lsl	r0, r0, #2
 4002 0076 C019     		add	r0, r0, r7
 4003 0078 C318     		add	r3, r0, r3
 4004 007a 8521     		mov	r1, #133
 4005 007c 8900     		lsl	r1, r1, #2
 4006 007e C919     		add	r1, r1, r7
 4007 0080 0A68     		ldr	r2, [r1]
 4008 0082 9200     		lsl	r2, r2, #2
 4009 0084 D358     		ldr	r3, [r2, r3]
 4010 0086 181C     		add	r0, r3, #0
 4011 0088 6149     		ldr	r1, .L274+20
 4012 008a FFF7FEFF 		bl	__aeabi_fdiv
 4013 008e 031C     		add	r3, r0, #0
 4014 0090 8722     		mov	r2, #135
 4015 0092 9200     		lsl	r2, r2, #2
 4016 0094 D219     		add	r2, r2, r7
 4017 0096 1068     		ldr	r0, [r2]
 4018 0098 191C     		add	r1, r3, #0
 4019 009a FFF7FEFF 		bl	__aeabi_fadd
 4020 009e 031C     		add	r3, r0, #0
 4021 00a0 8720     		mov	r0, #135
 4022 00a2 8000     		lsl	r0, r0, #2
 4023 00a4 C019     		add	r0, r0, r7
 4024 00a6 0360     		str	r3, [r0]
 4025              	.L269:
 631:../Sources/main.c **** 	for(i=0;i<128;i++)
 4026              		.loc 1 631 0
 4027 00a8 8521     		mov	r1, #133
 4028 00aa 8900     		lsl	r1, r1, #2
 4029 00ac C919     		add	r1, r1, r7
 4030 00ae 0B68     		ldr	r3, [r1]
 4031 00b0 0133     		add	r3, r3, #1
 4032 00b2 8522     		mov	r2, #133
 4033 00b4 9200     		lsl	r2, r2, #2
 4034 00b6 D219     		add	r2, r2, r7
 4035 00b8 1360     		str	r3, [r2]
 4036              	.L268:
 631:../Sources/main.c **** 	for(i=0;i<128;i++)
 4037              		.loc 1 631 0 is_stmt 0
 4038 00ba 8520     		mov	r0, #133
 4039 00bc 8000     		lsl	r0, r0, #2
 4040 00be C019     		add	r0, r0, r7
 4041 00c0 0368     		ldr	r3, [r0]
 4042 00c2 7F2B     		cmp	r3, #127
 4043 00c4 B0DD     		ble	.L270
 636:../Sources/main.c **** 		//mean+=temp1;		
 637:../Sources/main.c **** 	}	
 638:../Sources/main.c **** 	sum=0;	
 4044              		.loc 1 638 0 is_stmt 1
 4045 00c6 0023     		mov	r3, #0
 4046 00c8 8621     		mov	r1, #134
 4047 00ca 8900     		lsl	r1, r1, #2
 4048 00cc C919     		add	r1, r1, r7
 4049 00ce 0B60     		str	r3, [r1]
 639:../Sources/main.c **** 	for(i=10;i<120;i++)
 4050              		.loc 1 639 0
 4051 00d0 0A23     		mov	r3, #10
 4052 00d2 8522     		mov	r2, #133
 4053 00d4 9200     		lsl	r2, r2, #2
 4054 00d6 D219     		add	r2, r2, r7
 4055 00d8 1360     		str	r3, [r2]
 4056 00da 3BE0     		b	.L271
 4057              	.L272:
 640:../Sources/main.c **** 	{
 641:../Sources/main.c **** 		temp1=mean-Result[i];
 4058              		.loc 1 641 0
 4059 00dc 4B4B     		ldr	r3, .L274+16
 4060 00de 8820     		mov	r0, #136
 4061 00e0 8000     		lsl	r0, r0, #2
 4062 00e2 C019     		add	r0, r0, r7
 4063 00e4 C318     		add	r3, r0, r3
 4064 00e6 8521     		mov	r1, #133
 4065 00e8 8900     		lsl	r1, r1, #2
 4066 00ea C919     		add	r1, r1, r7
 4067 00ec 0A68     		ldr	r2, [r1]
 4068 00ee 9200     		lsl	r2, r2, #2
 4069 00f0 D358     		ldr	r3, [r2, r3]
 4070 00f2 8722     		mov	r2, #135
 4071 00f4 9200     		lsl	r2, r2, #2
 4072 00f6 D219     		add	r2, r2, r7
 4073 00f8 1068     		ldr	r0, [r2]
 4074 00fa 191C     		add	r1, r3, #0
 4075 00fc FFF7FEFF 		bl	__aeabi_fsub
 4076 0100 031C     		add	r3, r0, #0
 4077 0102 8220     		mov	r0, #130
 4078 0104 8000     		lsl	r0, r0, #2
 4079 0106 C019     		add	r0, r0, r7
 4080 0108 0360     		str	r3, [r0]
 642:../Sources/main.c **** 		sum+=temp1*temp1/110;
 4081              		.loc 1 642 0
 4082 010a 8221     		mov	r1, #130
 4083 010c 8900     		lsl	r1, r1, #2
 4084 010e C919     		add	r1, r1, r7
 4085 0110 0868     		ldr	r0, [r1]
 4086 0112 8222     		mov	r2, #130
 4087 0114 9200     		lsl	r2, r2, #2
 4088 0116 D219     		add	r2, r2, r7
 4089 0118 1168     		ldr	r1, [r2]
 4090 011a FFF7FEFF 		bl	__aeabi_fmul
 4091 011e 031C     		add	r3, r0, #0
 4092 0120 181C     		add	r0, r3, #0
 4093 0122 3B49     		ldr	r1, .L274+20
 4094 0124 FFF7FEFF 		bl	__aeabi_fdiv
 4095 0128 031C     		add	r3, r0, #0
 4096 012a 8621     		mov	r1, #134
 4097 012c 8900     		lsl	r1, r1, #2
 4098 012e C919     		add	r1, r1, r7
 4099 0130 0868     		ldr	r0, [r1]
 4100 0132 191C     		add	r1, r3, #0
 4101 0134 FFF7FEFF 		bl	__aeabi_fadd
 4102 0138 031C     		add	r3, r0, #0
 4103 013a 8622     		mov	r2, #134
 4104 013c 9200     		lsl	r2, r2, #2
 4105 013e D219     		add	r2, r2, r7
 4106 0140 1360     		str	r3, [r2]
 639:../Sources/main.c **** 	for(i=10;i<120;i++)
 4107              		.loc 1 639 0
 4108 0142 8520     		mov	r0, #133
 4109 0144 8000     		lsl	r0, r0, #2
 4110 0146 C019     		add	r0, r0, r7
 4111 0148 0368     		ldr	r3, [r0]
 4112 014a 0133     		add	r3, r3, #1
 4113 014c 8521     		mov	r1, #133
 4114 014e 8900     		lsl	r1, r1, #2
 4115 0150 C919     		add	r1, r1, r7
 4116 0152 0B60     		str	r3, [r1]
 4117              	.L271:
 639:../Sources/main.c **** 	for(i=10;i<120;i++)
 4118              		.loc 1 639 0 is_stmt 0
 4119 0154 8522     		mov	r2, #133
 4120 0156 9200     		lsl	r2, r2, #2
 4121 0158 D219     		add	r2, r2, r7
 4122 015a 1368     		ldr	r3, [r2]
 4123 015c 772B     		cmp	r3, #119
 4124 015e BDDD     		ble	.L272
 643:../Sources/main.c **** 	}
 644:../Sources/main.c **** 	sd=sqrt(sum);
 4125              		.loc 1 644 0 is_stmt 1
 4126 0160 8623     		mov	r3, #134
 4127 0162 9B00     		lsl	r3, r3, #2
 4128 0164 DB19     		add	r3, r3, r7
 4129 0166 1868     		ldr	r0, [r3]
 4130 0168 FFF7FEFF 		bl	__aeabi_f2d
 4131 016c 031C     		mov	r3, r0
 4132 016e 0C1C     		mov	r4, r1
 4133 0170 181C     		mov	r0, r3
 4134 0172 211C     		mov	r1, r4
 4135 0174 FFF7FEFF 		bl	sqrt
 4136 0178 031C     		mov	r3, r0
 4137 017a 0C1C     		mov	r4, r1
 4138 017c 181C     		mov	r0, r3
 4139 017e 211C     		mov	r1, r4
 4140 0180 FFF7FEFF 		bl	__aeabi_d2f
 4141 0184 031C     		add	r3, r0, #0
 4142 0186 8120     		mov	r0, #129
 4143 0188 8000     		lsl	r0, r0, #2
 4144 018a C019     		add	r0, r0, r7
 4145 018c 0360     		str	r3, [r0]
 645:../Sources/main.c **** 	thr=(uint16_t)(mean*(1+k*(sd/r-1)));
 4146              		.loc 1 645 0
 4147 018e 8121     		mov	r1, #129
 4148 0190 8900     		lsl	r1, r1, #2
 4149 0192 C919     		add	r1, r1, r7
 4150 0194 0868     		ldr	r0, [r1]
 4151 0196 8322     		mov	r2, #131
 4152 0198 9200     		lsl	r2, r2, #2
 4153 019a D219     		add	r2, r2, r7
 4154 019c 1168     		ldr	r1, [r2]
 4155 019e FFF7FEFF 		bl	__aeabi_fdiv
 4156 01a2 031C     		add	r3, r0, #0
 4157 01a4 181C     		add	r0, r3, #0
 4158 01a6 FE21     		mov	r1, #254
 4159 01a8 8905     		lsl	r1, r1, #22
 4160 01aa FFF7FEFF 		bl	__aeabi_fsub
 4161 01ae 031C     		add	r3, r0, #0
 4162 01b0 181C     		add	r0, r3, #0
 4163 01b2 8423     		mov	r3, #132
 4164 01b4 9B00     		lsl	r3, r3, #2
 4165 01b6 DB19     		add	r3, r3, r7
 4166 01b8 1968     		ldr	r1, [r3]
 4167 01ba FFF7FEFF 		bl	__aeabi_fmul
 4168 01be 031C     		add	r3, r0, #0
 4169 01c0 181C     		add	r0, r3, #0
 4170 01c2 FE21     		mov	r1, #254
 4171 01c4 8905     		lsl	r1, r1, #22
 4172 01c6 FFF7FEFF 		bl	__aeabi_fadd
 4173 01ca 031C     		add	r3, r0, #0
 4174 01cc 181C     		add	r0, r3, #0
 4175 01ce 8722     		mov	r2, #135
 4176 01d0 9200     		lsl	r2, r2, #2
 4177 01d2 D219     		add	r2, r2, r7
 4178 01d4 1168     		ldr	r1, [r2]
 4179 01d6 FFF7FEFF 		bl	__aeabi_fmul
 4180 01da 031C     		add	r3, r0, #0
 4181 01dc 0D48     		ldr	r0, .L274+24
 4182 01de 3C18     		add	r4, r7, r0
 4183 01e0 181C     		add	r0, r3, #0
 4184 01e2 FFF7FEFF 		bl	__aeabi_f2uiz
 4185 01e6 031C     		mov	r3, r0
 4186 01e8 2380     		strh	r3, [r4]
 646:../Sources/main.c **** 	return thr;
 4187              		.loc 1 646 0
 4188 01ea 0A49     		ldr	r1, .L274+24
 4189 01ec 7B18     		add	r3, r7, r1
 4190 01ee 1B88     		ldrh	r3, [r3]
 647:../Sources/main.c **** }
 4191              		.loc 1 647 0
 4192 01f0 181C     		mov	r0, r3
 4193 01f2 BD46     		mov	sp, r7
 4194 01f4 8923     		mov	r3, #137
 4195 01f6 9B00     		lsl	r3, r3, #2
 4196 01f8 9D44     		add	sp, sp, r3
 4197              		@ sp needed for prologue
 4198 01fa 90BD     		pop	{r4, r7, pc}
 4199              	.L275:
 4200              		.align	2
 4201              	.L274:
 4202 01fc DCFDFFFF 		.word	-548
 4203 0200 0AD7233F 		.word	1059313418
 4204 0204 0000FA44 		.word	1157234688
 4205 0208 00000000 		.word	LineScanImage0Buffer
 4206 020c E0FDFFFF 		.word	-544
 4207 0210 0000DC42 		.word	1121714176
 4208 0214 02020000 		.word	514
 4209              		.cfi_endproc
 4210              	.LFE28:
 4212              		.section	.rodata
 4213 005a 0000     		.align	2
 4214              	.LC94:
 4215 005c 2569200D 		.ascii	"%i \015\012\000"
 4215      0A00
 4216 0062 0000     		.align	2
 4217              	.LC98:
 4218 0064 454E445F 		.ascii	"END_OF_ROUND!!!!!!!!!!!!!!!!\015\012\000"
 4218      4F465F52 
 4218      4F554E44 
 4218      21212121 
 4218      21212121 
 4219 0083 00       		.section	.text.main,"ax",%progbits
 4220              		.align	2
 4221              		.global	main
 4222              		.code	16
 4223              		.thumb_func
 4225              	main:
 4226              	.LFB29:
 648:../Sources/main.c **** 
 649:../Sources/main.c **** int main(void)
 650:../Sources/main.c **** {
 4227              		.loc 1 650 0
 4228              		.cfi_startproc
 4229 0000 90B5     		push	{r4, r7, lr}
 4230              	.LCFI82:
 4231              		.cfi_def_cfa_offset 12
 4232              		.cfi_offset 4, -12
 4233              		.cfi_offset 7, -8
 4234              		.cfi_offset 14, -4
 4235 0002 85B0     		sub	sp, sp, #20
 4236              	.LCFI83:
 4237              		.cfi_def_cfa_offset 32
 4238 0004 00AF     		add	r7, sp, #0
 4239              	.LCFI84:
 4240              		.cfi_def_cfa_register 7
 651:../Sources/main.c **** 	
 652:../Sources/main.c **** 	int t = 0;
 4241              		.loc 1 652 0
 4242 0006 0023     		mov	r3, #0
 4243 0008 FB60     		str	r3, [r7, #12]
 653:../Sources/main.c **** 	TFC_Init();
 4244              		.loc 1 653 0
 4245 000a FFF7FEFF 		bl	TFC_Init
 654:../Sources/main.c **** 	disableMotor();
 4246              		.loc 1 654 0
 4247 000e FFF7FEFF 		bl	disableMotor
 4248              	.L321:
 4249              	.LBB4:
 655:../Sources/main.c **** 
 656:../Sources/main.c **** 	for(;;)
 657:../Sources/main.c **** 	{	   
 658:../Sources/main.c **** 		//TFC_Task must be called in your main loop.
 659:../Sources/main.c **** 		TFC_Task();
 4250              		.loc 1 659 0
 4251 0012 FFF7FEFF 		bl	TFC_Task
 660:../Sources/main.c **** 
 661:../Sources/main.c **** 		//This Demo program will look at the middle 2 switch to select one of 4 demo modes.
 662:../Sources/main.c **** 		//Let's look at the middle 2 switches
 663:../Sources/main.c **** 		uint_t mode = TFC_GetDIP_Switch()&0x0F;
 4252              		.loc 1 663 0
 4253 0016 FFF7FEFF 		bl	TFC_GetDIP_Switch
 4254 001a 031C     		mov	r3, r0
 4255 001c 1A1C     		mov	r2, r3
 4256 001e 0F23     		mov	r3, #15
 4257 0020 1340     		and	r3, r2
 4258 0022 7B60     		str	r3, [r7, #4]
 664:../Sources/main.c **** 		
 665:../Sources/main.c **** 		//set current Poti value as speed, when Button0 is pressed
 666:../Sources/main.c **** 		if(TFC_PUSH_BUTTON_0_PRESSED)
 4259              		.loc 1 666 0
 4260 0024 DB4B     		ldr	r3, .L331
 4261 0026 1A69     		ldr	r2, [r3, #16]
 4262 0028 8023     		mov	r3, #128
 4263 002a 9B01     		lsl	r3, r3, #6
 4264 002c 1340     		and	r3, r2
 4265 002e 24D0     		beq	.L277
 667:../Sources/main.c **** 		{
 668:../Sources/main.c **** 			speed = 0.6;
 4266              		.loc 1 668 0
 4267 0030 D94B     		ldr	r3, .L331+4
 4268 0032 DA4A     		ldr	r2, .L331+8
 4269 0034 1A60     		str	r2, [r3]
 669:../Sources/main.c **** 			startCounter=0;
 4270              		.loc 1 669 0
 4271 0036 DA4B     		ldr	r3, .L331+12
 4272 0038 0022     		mov	r2, #0
 4273 003a 1A80     		strh	r2, [r3]
 670:../Sources/main.c **** 			straightCounterMax = (int)(STRAIGHTCOUNTERINIT / speed);
 4274              		.loc 1 670 0
 4275 003c D64B     		ldr	r3, .L331+4
 4276 003e 1B68     		ldr	r3, [r3]
 4277 0040 D848     		ldr	r0, .L331+16
 4278 0042 191C     		add	r1, r3, #0
 4279 0044 FFF7FEFF 		bl	__aeabi_fdiv
 4280 0048 031C     		add	r3, r0, #0
 4281 004a 181C     		add	r0, r3, #0
 4282 004c FFF7FEFF 		bl	__aeabi_f2iz
 4283 0050 031C     		mov	r3, r0
 4284 0052 9AB2     		uxth	r2, r3
 4285 0054 D44B     		ldr	r3, .L331+20
 4286 0056 1A80     		strh	r2, [r3]
 671:../Sources/main.c **** 			enableMotor();
 4287              		.loc 1 671 0
 4288 0058 FFF7FEFF 		bl	enableMotor
 672:../Sources/main.c **** 			brakeCounter = 0;
 4289              		.loc 1 672 0
 4290 005c D34B     		ldr	r3, .L331+24
 4291 005e 0022     		mov	r2, #0
 4292 0060 1A80     		strh	r2, [r3]
 673:../Sources/main.c **** 			straightCounter = 0;
 4293              		.loc 1 673 0
 4294 0062 D34B     		ldr	r3, .L331+28
 4295 0064 0022     		mov	r2, #0
 4296 0066 1A80     		strh	r2, [r3]
 674:../Sources/main.c **** 			cameraImageCounter = 0;
 4297              		.loc 1 674 0
 4298 0068 D24B     		ldr	r3, .L331+32
 4299 006a 0022     		mov	r2, #0
 4300 006c 1A80     		strh	r2, [r3]
 675:../Sources/main.c **** 			endOfRoundCounter = 0;
 4301              		.loc 1 675 0
 4302 006e D24B     		ldr	r3, .L331+36
 4303 0070 0022     		mov	r2, #0
 4304 0072 1A80     		strh	r2, [r3]
 676:../Sources/main.c **** 			brakeDelayCounter = 0;
 4305              		.loc 1 676 0
 4306 0074 D14B     		ldr	r3, .L331+40
 4307 0076 0022     		mov	r2, #0
 4308 0078 1A80     		strh	r2, [r3]
 4309              	.L277:
 677:../Sources/main.c **** 		}
 678:../Sources/main.c **** 		//set speed 0, when Button1 is pressed
 679:../Sources/main.c **** 		if(TFC_PUSH_BUTTON_1_PRESSED)
 4310              		.loc 1 679 0
 4311 007a C64B     		ldr	r3, .L331
 4312 007c 1A69     		ldr	r2, [r3, #16]
 4313 007e 8023     		mov	r3, #128
 4314 0080 9B02     		lsl	r3, r3, #10
 4315 0082 1340     		and	r3, r2
 4316 0084 04D0     		beq	.L278
 680:../Sources/main.c **** 		{
 681:../Sources/main.c **** 			speed = 0;
 4317              		.loc 1 681 0
 4318 0086 C44B     		ldr	r3, .L331+4
 4319 0088 0022     		mov	r2, #0
 4320 008a 1A60     		str	r2, [r3]
 682:../Sources/main.c **** 			disableMotor();
 4321              		.loc 1 682 0
 4322 008c FFF7FEFF 		bl	disableMotor
 4323              	.L278:
 683:../Sources/main.c **** 		}
 684:../Sources/main.c **** 		checkModeChange(mode);
 4324              		.loc 1 684 0
 4325 0090 7B68     		ldr	r3, [r7, #4]
 4326 0092 9BB2     		uxth	r3, r3
 4327 0094 181C     		mov	r0, r3
 4328 0096 FFF7FEFF 		bl	checkModeChange
 685:../Sources/main.c **** 		switch(mode)
 4329              		.loc 1 685 0
 4330 009a 7B68     		ldr	r3, [r7, #4]
 4331 009c 0E2B     		cmp	r3, #14
 4332 009e 05D8     		bhi	.L279
 4333 00a0 7B68     		ldr	r3, [r7, #4]
 4334 00a2 9A00     		lsl	r2, r3, #2
 4335 00a4 C64B     		ldr	r3, .L331+44
 4336 00a6 D318     		add	r3, r2, r3
 4337 00a8 1B68     		ldr	r3, [r3]
 4338 00aa 9F46     		mov	pc, r3
 4339              		.section	.rodata.main,"a",%progbits
 4340              		.align	2
 4341              	.L290:
 4342 0000 B2000000 		.word	.L280
 4343 0004 E8000000 		.word	.L281
 4344 0008 4E010000 		.word	.L282
 4345 000c 7E010000 		.word	.L283
 4346 0010 AA010000 		.word	.L284
 4347 0014 F6010000 		.word	.L285
 4348 0018 AC000000 		.word	.L279
 4349 001c AC000000 		.word	.L279
 4350 0020 14040000 		.word	.L286
 4351 0024 7A040000 		.word	.L287
 4352 0028 A6040000 		.word	.L288
 4353 002c AC000000 		.word	.L279
 4354 0030 AC000000 		.word	.L279
 4355 0034 AC000000 		.word	.L279
 4356 0038 00050000 		.word	.L289
 4357              		.section	.text.main
 4358              	.L279:
 686:../Sources/main.c **** 		{
 687:../Sources/main.c **** 		default:
 688:../Sources/main.c **** 			disableMotor();
 4359              		.loc 1 688 0
 4360 00ac FFF7FEFF 		bl	disableMotor
 689:../Sources/main.c **** 			break;
 4361              		.loc 1 689 0
 4362 00b0 48E2     		b	.L291
 4363              	.L280:
 690:../Sources/main.c **** 		case 0 :
 691:../Sources/main.c **** 			disableMotor();
 4364              		.loc 1 691 0
 4365 00b2 FFF7FEFF 		bl	disableMotor
 692:../Sources/main.c **** 			if(LineScanImageReady==1)
 4366              		.loc 1 692 0
 4367 00b6 C34B     		ldr	r3, .L331+48
 4368 00b8 1B78     		ldrb	r3, [r3]
 4369 00ba DBB2     		uxtb	r3, r3
 4370 00bc 012B     		cmp	r3, #1
 4371 00be 00D0     		beq	.LCB3777
 4372 00c0 2FE2     		b	.L322	@long jump
 4373              	.LCB3777:
 693:../Sources/main.c **** 			{	border=threshold();
 4374              		.loc 1 693 0
 4375 00c2 FFF7FEFF 		bl	threshold
 4376 00c6 021C     		mov	r2, r0
 4377 00c8 BF4B     		ldr	r3, .L331+52
 4378 00ca 1A60     		str	r2, [r3]
 694:../Sources/main.c **** 				TFC_SetServo(0, 0); 
 4379              		.loc 1 694 0
 4380 00cc 0023     		mov	r3, #0
 4381 00ce 0020     		mov	r0, #0
 4382 00d0 191C     		add	r1, r3, #0
 4383 00d2 FFF7FEFF 		bl	TFC_SetServo
 695:../Sources/main.c **** 				TFC_Ticker[0] = 0;
 4384              		.loc 1 695 0
 4385 00d6 BD4B     		ldr	r3, .L331+56
 4386 00d8 0022     		mov	r2, #0
 4387 00da 1A60     		str	r2, [r3]
 696:../Sources/main.c **** 				LineScanImageReady=0;	
 4388              		.loc 1 696 0
 4389 00dc B94B     		ldr	r3, .L331+48
 4390 00de 0022     		mov	r2, #0
 4391 00e0 1A70     		strb	r2, [r3]
 697:../Sources/main.c **** 				print();
 4392              		.loc 1 697 0
 4393 00e2 FFF7FEFF 		bl	print
 698:../Sources/main.c **** 			}
 699:../Sources/main.c **** 			break;
 4394              		.loc 1 699 0
 4395 00e6 1CE2     		b	.L322
 4396              	.L281:
 700:../Sources/main.c **** 
 701:../Sources/main.c **** 		case 1:
 702:../Sources/main.c **** 			if(TFC_Ticker[0] >= 10000)
 4397              		.loc 1 702 0
 4398 00e8 B84B     		ldr	r3, .L331+56
 4399 00ea 1A68     		ldr	r2, [r3]
 4400 00ec B84B     		ldr	r3, .L331+60
 4401 00ee 9A42     		cmp	r2, r3
 4402 00f0 00D8     		bhi	.LCB3801
 4403 00f2 18E2     		b	.L323	@long jump
 4404              	.LCB3801:
 703:../Sources/main.c **** 			{
 704:../Sources/main.c **** 				enableMotor();
 4405              		.loc 1 704 0
 4406 00f4 FFF7FEFF 		bl	enableMotor
 705:../Sources/main.c **** 				t++;
 4407              		.loc 1 705 0
 4408 00f8 FB68     		ldr	r3, [r7, #12]
 4409 00fa 0133     		add	r3, r3, #1
 4410 00fc FB60     		str	r3, [r7, #12]
 706:../Sources/main.c **** 				if(t%2 == 1)
 4411              		.loc 1 706 0
 4412 00fe FA68     		ldr	r2, [r7, #12]
 4413 0100 B44B     		ldr	r3, .L331+64
 4414 0102 1340     		and	r3, r2
 4415 0104 04D5     		bpl	.L294
 4416 0106 013B     		sub	r3, r3, #1
 4417 0108 0222     		mov	r2, #2
 4418 010a 5242     		neg	r2, r2
 4419 010c 1343     		orr	r3, r2
 4420 010e 0133     		add	r3, r3, #1
 4421              	.L294:
 4422 0110 012B     		cmp	r3, #1
 4423 0112 0CD1     		bne	.L295
 707:../Sources/main.c **** 				{
 708:../Sources/main.c **** 					TFC_SetServo(0, -1);
 4424              		.loc 1 708 0
 4425 0114 B04B     		ldr	r3, .L331+68
 4426 0116 0020     		mov	r0, #0
 4427 0118 191C     		add	r1, r3, #0
 4428 011a FFF7FEFF 		bl	TFC_SetServo
 709:../Sources/main.c **** 					TFC_SetMotorPWM(0.5, 0);
 4429              		.loc 1 709 0
 4430 011e FC22     		mov	r2, #252
 4431 0120 9205     		lsl	r2, r2, #22
 4432 0122 0023     		mov	r3, #0
 4433 0124 101C     		add	r0, r2, #0
 4434 0126 191C     		add	r1, r3, #0
 4435 0128 FFF7FEFF 		bl	TFC_SetMotorPWM
 4436 012c 0CE0     		b	.L296
 4437              	.L295:
 710:../Sources/main.c **** 				}
 711:../Sources/main.c **** 				else
 712:../Sources/main.c **** 				{
 713:../Sources/main.c **** 					TFC_SetServo(0, 1);
 4438              		.loc 1 713 0
 4439 012e FE23     		mov	r3, #254
 4440 0130 9B05     		lsl	r3, r3, #22
 4441 0132 0020     		mov	r0, #0
 4442 0134 191C     		add	r1, r3, #0
 4443 0136 FFF7FEFF 		bl	TFC_SetServo
 714:../Sources/main.c **** 					TFC_SetMotorPWM(0, 0.5);
 4444              		.loc 1 714 0
 4445 013a 0022     		mov	r2, #0
 4446 013c FC23     		mov	r3, #252
 4447 013e 9B05     		lsl	r3, r3, #22
 4448 0140 101C     		add	r0, r2, #0
 4449 0142 191C     		add	r1, r3, #0
 4450 0144 FFF7FEFF 		bl	TFC_SetMotorPWM
 4451              	.L296:
 715:../Sources/main.c **** 				}
 716:../Sources/main.c **** 				resetTicker();
 4452              		.loc 1 716 0
 4453 0148 FFF7FEFF 		bl	resetTicker
 717:../Sources/main.c **** 			}
 718:../Sources/main.c **** 			break;
 4454              		.loc 1 718 0
 4455 014c EBE1     		b	.L323
 4456              	.L282:
 719:../Sources/main.c **** 
 720:../Sources/main.c **** 		case 2 :
 721:../Sources/main.c **** 			disableMotor();
 4457              		.loc 1 721 0
 4458 014e FFF7FEFF 		bl	disableMotor
 722:../Sources/main.c **** 			if(TFC_Ticker[0] > 2000 && LineScanImageReady==1)
 4459              		.loc 1 722 0
 4460 0152 9E4B     		ldr	r3, .L331+56
 4461 0154 1A68     		ldr	r2, [r3]
 4462 0156 FA23     		mov	r3, #250
 4463 0158 DB00     		lsl	r3, r3, #3
 4464 015a 9A42     		cmp	r2, r3
 4465 015c 00D8     		bhi	.LCB3858
 4466 015e E4E1     		b	.L324	@long jump
 4467              	.LCB3858:
 4468              		.loc 1 722 0 is_stmt 0
 4469 0160 984B     		ldr	r3, .L331+48
 4470 0162 1B78     		ldrb	r3, [r3]
 4471 0164 DBB2     		uxtb	r3, r3
 4472 0166 012B     		cmp	r3, #1
 4473 0168 00D0     		beq	.LCB3863
 4474 016a DEE1     		b	.L324	@long jump
 4475              	.LCB3863:
 723:../Sources/main.c **** 			{
 724:../Sources/main.c **** 				TFC_Ticker[0] = 0;
 4476              		.loc 1 724 0 is_stmt 1
 4477 016c 974B     		ldr	r3, .L331+56
 4478 016e 0022     		mov	r2, #0
 4479 0170 1A60     		str	r2, [r3]
 725:../Sources/main.c **** 				LineScanImageReady = 0;
 4480              		.loc 1 725 0
 4481 0172 944B     		ldr	r3, .L331+48
 4482 0174 0022     		mov	r2, #0
 4483 0176 1A70     		strb	r2, [r3]
 726:../Sources/main.c **** 				calibrateLightSensor();
 4484              		.loc 1 726 0
 4485 0178 FFF7FEFF 		bl	calibrateLightSensor
 727:../Sources/main.c **** 			}
 728:../Sources/main.c **** 			break;	
 4486              		.loc 1 728 0
 4487 017c D5E1     		b	.L324
 4488              	.L283:
 729:../Sources/main.c **** 			
 730:../Sources/main.c **** 		case 3:
 731:../Sources/main.c **** 			disableMotor();
 4489              		.loc 1 731 0
 4490 017e FFF7FEFF 		bl	disableMotor
 732:../Sources/main.c **** 			if(TFC_Ticker[0]>=100 && LineScanImageReady==1)
 4491              		.loc 1 732 0
 4492 0182 924B     		ldr	r3, .L331+56
 4493 0184 1B68     		ldr	r3, [r3]
 4494 0186 632B     		cmp	r3, #99
 4495 0188 00D8     		bhi	.LCB3879
 4496 018a D0E1     		b	.L325	@long jump
 4497              	.LCB3879:
 4498              		.loc 1 732 0 is_stmt 0
 4499 018c 8D4B     		ldr	r3, .L331+48
 4500 018e 1B78     		ldrb	r3, [r3]
 4501 0190 DBB2     		uxtb	r3, r3
 4502 0192 012B     		cmp	r3, #1
 4503 0194 00D0     		beq	.LCB3884
 4504 0196 CAE1     		b	.L325	@long jump
 4505              	.LCB3884:
 733:../Sources/main.c **** 			{
 734:../Sources/main.c **** 				TFC_Ticker[0] = 0;
 4506              		.loc 1 734 0 is_stmt 1
 4507 0198 8C4B     		ldr	r3, .L331+56
 4508 019a 0022     		mov	r2, #0
 4509 019c 1A60     		str	r2, [r3]
 735:../Sources/main.c **** 				LineScanImageReady=0;
 4510              		.loc 1 735 0
 4511 019e 894B     		ldr	r3, .L331+48
 4512 01a0 0022     		mov	r2, #0
 4513 01a2 1A70     		strb	r2, [r3]
 736:../Sources/main.c **** 				print();
 4514              		.loc 1 736 0
 4515 01a4 FFF7FEFF 		bl	print
 737:../Sources/main.c **** 			}
 738:../Sources/main.c **** 			break;
 4516              		.loc 1 738 0
 4517 01a8 C1E1     		b	.L325
 4518              	.L284:
 739:../Sources/main.c **** 			
 740:../Sources/main.c **** 		case 4:
 741:../Sources/main.c **** 			disableMotor();
 4519              		.loc 1 741 0
 4520 01aa FFF7FEFF 		bl	disableMotor
 742:../Sources/main.c **** 			TFC_SetServo(0, TFC_ReadPot(0));
 4521              		.loc 1 742 0
 4522 01ae 0020     		mov	r0, #0
 4523 01b0 FFF7FEFF 		bl	TFC_ReadPot
 4524 01b4 031C     		add	r3, r0, #0
 4525 01b6 0020     		mov	r0, #0
 4526 01b8 191C     		add	r1, r3, #0
 4527 01ba FFF7FEFF 		bl	TFC_SetServo
 743:../Sources/main.c **** 			if(TFC_Ticker[0] >= 10)
 4528              		.loc 1 743 0
 4529 01be 834B     		ldr	r3, .L331+56
 4530 01c0 1B68     		ldr	r3, [r3]
 4531 01c2 092B     		cmp	r3, #9
 4532 01c4 00D8     		bhi	.LCB3906
 4533 01c6 B4E1     		b	.L326	@long jump
 4534              	.LCB3906:
 744:../Sources/main.c **** 			{
 745:../Sources/main.c **** 				TERMINAL_PRINTF("%i \r\n", (int)(TFC_ReadPot(0)*1000));
 4535              		.loc 1 745 0
 4536 01c8 0020     		mov	r0, #0
 4537 01ca FFF7FEFF 		bl	TFC_ReadPot
 4538 01ce 031C     		add	r3, r0, #0
 4539 01d0 181C     		add	r0, r3, #0
 4540 01d2 8249     		ldr	r1, .L331+72
 4541 01d4 FFF7FEFF 		bl	__aeabi_fmul
 4542 01d8 031C     		add	r3, r0, #0
 4543 01da 181C     		add	r0, r3, #0
 4544 01dc FFF7FEFF 		bl	__aeabi_f2iz
 4545 01e0 031C     		mov	r3, r0
 4546 01e2 7F49     		ldr	r1, .L331+76
 4547 01e4 7F4A     		ldr	r2, .L331+80
 4548 01e6 081C     		mov	r0, r1
 4549 01e8 111C     		mov	r1, r2
 4550 01ea 1A1C     		mov	r2, r3
 4551 01ec FFF7FEFF 		bl	Qprintf
 746:../Sources/main.c **** 				resetTicker();
 4552              		.loc 1 746 0
 4553 01f0 FFF7FEFF 		bl	resetTicker
 747:../Sources/main.c **** 			}
 748:../Sources/main.c **** 			break;
 4554              		.loc 1 748 0
 4555 01f4 9DE1     		b	.L326
 4556              	.L285:
 749:../Sources/main.c **** 		case 5:
 750:../Sources/main.c **** 			if(LineScanImageReady==1)
 4557              		.loc 1 750 0
 4558 01f6 734B     		ldr	r3, .L331+48
 4559 01f8 1B78     		ldrb	r3, [r3]
 4560 01fa DBB2     		uxtb	r3, r3
 4561 01fc 012B     		cmp	r3, #1
 4562 01fe 00D0     		beq	.LCB3932
 4563 0200 99E1     		b	.L327	@long jump
 4564              	.LCB3932:
 4565              	.LBB5:
 751:../Sources/main.c **** 			{
 752:../Sources/main.c **** 				uint16 i = 1;
 4566              		.loc 1 752 0
 4567 0202 3B1C     		mov	r3, r7
 4568 0204 0A33     		add	r3, r3, #10
 4569 0206 0122     		mov	r2, #1
 4570 0208 1A80     		strh	r2, [r3]
 753:../Sources/main.c **** 				uint16 mid = getMiddleIndex();
 4571              		.loc 1 753 0
 4572 020a BC1C     		add	r4, r7, #2
 4573 020c FFF7FEFF 		bl	getMiddleIndex
 4574 0210 031C     		mov	r3, r0
 4575 0212 2380     		strh	r3, [r4]
 754:../Sources/main.c **** 				uint16 count = 1;
 4576              		.loc 1 754 0
 4577 0214 3B1C     		mov	r3, r7
 4578 0216 0833     		add	r3, r3, #8
 4579 0218 0122     		mov	r2, #1
 4580 021a 1A80     		strh	r2, [r3]
 755:../Sources/main.c **** 				for(i=1;i<=7;i++)
 4581              		.loc 1 755 0
 4582 021c 3B1C     		mov	r3, r7
 4583 021e 0A33     		add	r3, r3, #10
 4584 0220 0122     		mov	r2, #1
 4585 0222 1A80     		strh	r2, [r3]
 4586 0224 2EE0     		b	.L301
 4587              	.L304:
 756:../Sources/main.c **** 				{
 757:../Sources/main.c **** 					if(isBlack(mid-i))		//changed from + to -
 4588              		.loc 1 757 0
 4589 0226 BA1C     		add	r2, r7, #2
 4590 0228 3B1C     		mov	r3, r7
 4591 022a 0A33     		add	r3, r3, #10
 4592 022c 1288     		ldrh	r2, [r2]
 4593 022e 1B88     		ldrh	r3, [r3]
 4594 0230 D31A     		sub	r3, r2, r3
 4595 0232 9BB2     		uxth	r3, r3
 4596 0234 181C     		mov	r0, r3
 4597 0236 FFF7FEFF 		bl	isBlack
 4598 023a 031C     		mov	r3, r0
 4599 023c 002B     		cmp	r3, #0
 4600 023e 06D0     		beq	.L302
 758:../Sources/main.c **** 					{
 759:../Sources/main.c **** 						count++;
 4601              		.loc 1 759 0
 4602 0240 3B1C     		mov	r3, r7
 4603 0242 0833     		add	r3, r3, #8
 4604 0244 3A1C     		mov	r2, r7
 4605 0246 0832     		add	r2, r2, #8
 4606 0248 1288     		ldrh	r2, [r2]
 4607 024a 0132     		add	r2, r2, #1
 4608 024c 1A80     		strh	r2, [r3]
 4609              	.L302:
 760:../Sources/main.c **** 					}
 761:../Sources/main.c **** 					if(isBlack(mid+i))
 4610              		.loc 1 761 0
 4611 024e BA1C     		add	r2, r7, #2
 4612 0250 3B1C     		mov	r3, r7
 4613 0252 0A33     		add	r3, r3, #10
 4614 0254 1288     		ldrh	r2, [r2]
 4615 0256 1B88     		ldrh	r3, [r3]
 4616 0258 D318     		add	r3, r2, r3
 4617 025a 9BB2     		uxth	r3, r3
 4618 025c 181C     		mov	r0, r3
 4619 025e FFF7FEFF 		bl	isBlack
 4620 0262 031C     		mov	r3, r0
 4621 0264 002B     		cmp	r3, #0
 4622 0266 06D0     		beq	.L303
 762:../Sources/main.c **** 					{
 763:../Sources/main.c **** 						count++;
 4623              		.loc 1 763 0
 4624 0268 3B1C     		mov	r3, r7
 4625 026a 0833     		add	r3, r3, #8
 4626 026c 3A1C     		mov	r2, r7
 4627 026e 0832     		add	r2, r2, #8
 4628 0270 1288     		ldrh	r2, [r2]
 4629 0272 0132     		add	r2, r2, #1
 4630 0274 1A80     		strh	r2, [r3]
 4631              	.L303:
 755:../Sources/main.c **** 				for(i=1;i<=7;i++)
 4632              		.loc 1 755 0
 4633 0276 3B1C     		mov	r3, r7
 4634 0278 0A33     		add	r3, r3, #10
 4635 027a 3A1C     		mov	r2, r7
 4636 027c 0A32     		add	r2, r2, #10
 4637 027e 1288     		ldrh	r2, [r2]
 4638 0280 0132     		add	r2, r2, #1
 4639 0282 1A80     		strh	r2, [r3]
 4640              	.L301:
 755:../Sources/main.c **** 				for(i=1;i<=7;i++)
 4641              		.loc 1 755 0 is_stmt 0
 4642 0284 3B1C     		mov	r3, r7
 4643 0286 0A33     		add	r3, r3, #10
 4644 0288 1B88     		ldrh	r3, [r3]
 4645 028a 072B     		cmp	r3, #7
 4646 028c CBD9     		bls	.L304
 764:../Sources/main.c **** 					}
 765:../Sources/main.c **** 				}
 766:../Sources/main.c **** 				switch (count) {
 4647              		.loc 1 766 0 is_stmt 1
 4648 028e 3B1C     		mov	r3, r7
 4649 0290 0833     		add	r3, r3, #8
 4650 0292 1B88     		ldrh	r3, [r3]
 4651 0294 033B     		sub	r3, r3, #3
 4652 0296 062B     		cmp	r3, #6
 4653 0298 00D9     		bls	.LCB4015
 4654 029a A9E0     		b	.L305	@long jump
 4655              	.LCB4015:
 4656 029c 9A00     		lsl	r2, r3, #2
 4657 029e 524B     		ldr	r3, .L331+84
 4658 02a0 D318     		add	r3, r2, r3
 4659 02a2 1B68     		ldr	r3, [r3]
 4660 02a4 9F46     		mov	pc, r3
 4661              		.section	.rodata.main
 4662              		.align	2
 4663              	.L313:
 4664 003c A6020000 		.word	.L306
 4665 0040 C8020000 		.word	.L307
 4666 0044 EA020000 		.word	.L308
 4667 0048 0C030000 		.word	.L309
 4668 004c 2E030000 		.word	.L310
 4669 0050 50030000 		.word	.L311
 4670 0054 72030000 		.word	.L312
 4671              		.section	.text.main
 4672              	.L306:
 767:../Sources/main.c **** 					case 3:
 768:../Sources/main.c **** 						TFC_BAT_LED0_ON;
 4673              		.loc 1 768 0
 4674 02a6 514B     		ldr	r3, .L331+88
 4675 02a8 8022     		mov	r2, #128
 4676 02aa 5200     		lsl	r2, r2, #1
 4677 02ac 5A60     		str	r2, [r3, #4]
 769:../Sources/main.c **** 						TFC_BAT_LED1_ON;
 4678              		.loc 1 769 0
 4679 02ae 4F4B     		ldr	r3, .L331+88
 4680 02b0 8022     		mov	r2, #128
 4681 02b2 9200     		lsl	r2, r2, #2
 4682 02b4 5A60     		str	r2, [r3, #4]
 770:../Sources/main.c **** 						TFC_BAT_LED2_OFF;
 4683              		.loc 1 770 0
 4684 02b6 4D4B     		ldr	r3, .L331+88
 4685 02b8 8022     		mov	r2, #128
 4686 02ba D200     		lsl	r2, r2, #3
 4687 02bc 9A60     		str	r2, [r3, #8]
 771:../Sources/main.c **** 						TFC_BAT_LED3_OFF;
 4688              		.loc 1 771 0
 4689 02be 4B4B     		ldr	r3, .L331+88
 4690 02c0 8022     		mov	r2, #128
 4691 02c2 1201     		lsl	r2, r2, #4
 4692 02c4 9A60     		str	r2, [r3, #8]
 772:../Sources/main.c **** 						break;
 4693              		.loc 1 772 0
 4694 02c6 A4E0     		b	.L300
 4695              	.L307:
 773:../Sources/main.c **** 					case 4:
 774:../Sources/main.c **** 						TFC_BAT_LED0_OFF;
 4696              		.loc 1 774 0
 4697 02c8 484B     		ldr	r3, .L331+88
 4698 02ca 8022     		mov	r2, #128
 4699 02cc 5200     		lsl	r2, r2, #1
 4700 02ce 9A60     		str	r2, [r3, #8]
 775:../Sources/main.c **** 						TFC_BAT_LED1_OFF;
 4701              		.loc 1 775 0
 4702 02d0 464B     		ldr	r3, .L331+88
 4703 02d2 8022     		mov	r2, #128
 4704 02d4 9200     		lsl	r2, r2, #2
 4705 02d6 9A60     		str	r2, [r3, #8]
 776:../Sources/main.c **** 						TFC_BAT_LED2_ON;
 4706              		.loc 1 776 0
 4707 02d8 444B     		ldr	r3, .L331+88
 4708 02da 8022     		mov	r2, #128
 4709 02dc D200     		lsl	r2, r2, #3
 4710 02de 5A60     		str	r2, [r3, #4]
 777:../Sources/main.c **** 						TFC_BAT_LED3_OFF;
 4711              		.loc 1 777 0
 4712 02e0 424B     		ldr	r3, .L331+88
 4713 02e2 8022     		mov	r2, #128
 4714 02e4 1201     		lsl	r2, r2, #4
 4715 02e6 9A60     		str	r2, [r3, #8]
 778:../Sources/main.c **** 						break;
 4716              		.loc 1 778 0
 4717 02e8 93E0     		b	.L300
 4718              	.L308:
 779:../Sources/main.c **** 					case 5:
 780:../Sources/main.c **** 						TFC_BAT_LED0_ON;
 4719              		.loc 1 780 0
 4720 02ea 404B     		ldr	r3, .L331+88
 4721 02ec 8022     		mov	r2, #128
 4722 02ee 5200     		lsl	r2, r2, #1
 4723 02f0 5A60     		str	r2, [r3, #4]
 781:../Sources/main.c **** 						TFC_BAT_LED1_OFF;
 4724              		.loc 1 781 0
 4725 02f2 3E4B     		ldr	r3, .L331+88
 4726 02f4 8022     		mov	r2, #128
 4727 02f6 9200     		lsl	r2, r2, #2
 4728 02f8 9A60     		str	r2, [r3, #8]
 782:../Sources/main.c **** 						TFC_BAT_LED2_ON;
 4729              		.loc 1 782 0
 4730 02fa 3C4B     		ldr	r3, .L331+88
 4731 02fc 8022     		mov	r2, #128
 4732 02fe D200     		lsl	r2, r2, #3
 4733 0300 5A60     		str	r2, [r3, #4]
 783:../Sources/main.c **** 						TFC_BAT_LED3_OFF;
 4734              		.loc 1 783 0
 4735 0302 3A4B     		ldr	r3, .L331+88
 4736 0304 8022     		mov	r2, #128
 4737 0306 1201     		lsl	r2, r2, #4
 4738 0308 9A60     		str	r2, [r3, #8]
 784:../Sources/main.c **** 						break;
 4739              		.loc 1 784 0
 4740 030a 82E0     		b	.L300
 4741              	.L309:
 785:../Sources/main.c **** 					case 6:
 786:../Sources/main.c **** 						TFC_BAT_LED0_OFF;
 4742              		.loc 1 786 0
 4743 030c 374B     		ldr	r3, .L331+88
 4744 030e 8022     		mov	r2, #128
 4745 0310 5200     		lsl	r2, r2, #1
 4746 0312 9A60     		str	r2, [r3, #8]
 787:../Sources/main.c **** 						TFC_BAT_LED1_ON;
 4747              		.loc 1 787 0
 4748 0314 354B     		ldr	r3, .L331+88
 4749 0316 8022     		mov	r2, #128
 4750 0318 9200     		lsl	r2, r2, #2
 4751 031a 5A60     		str	r2, [r3, #4]
 788:../Sources/main.c **** 						TFC_BAT_LED2_ON;
 4752              		.loc 1 788 0
 4753 031c 334B     		ldr	r3, .L331+88
 4754 031e 8022     		mov	r2, #128
 4755 0320 D200     		lsl	r2, r2, #3
 4756 0322 5A60     		str	r2, [r3, #4]
 789:../Sources/main.c **** 						TFC_BAT_LED3_OFF;
 4757              		.loc 1 789 0
 4758 0324 314B     		ldr	r3, .L331+88
 4759 0326 8022     		mov	r2, #128
 4760 0328 1201     		lsl	r2, r2, #4
 4761 032a 9A60     		str	r2, [r3, #8]
 790:../Sources/main.c **** 						break;
 4762              		.loc 1 790 0
 4763 032c 71E0     		b	.L300
 4764              	.L310:
 791:../Sources/main.c **** 					case 7:
 792:../Sources/main.c **** 						TFC_BAT_LED0_ON;
 4765              		.loc 1 792 0
 4766 032e 2F4B     		ldr	r3, .L331+88
 4767 0330 8022     		mov	r2, #128
 4768 0332 5200     		lsl	r2, r2, #1
 4769 0334 5A60     		str	r2, [r3, #4]
 793:../Sources/main.c **** 						TFC_BAT_LED1_ON;
 4770              		.loc 1 793 0
 4771 0336 2D4B     		ldr	r3, .L331+88
 4772 0338 8022     		mov	r2, #128
 4773 033a 9200     		lsl	r2, r2, #2
 4774 033c 5A60     		str	r2, [r3, #4]
 794:../Sources/main.c **** 						TFC_BAT_LED2_ON;
 4775              		.loc 1 794 0
 4776 033e 2B4B     		ldr	r3, .L331+88
 4777 0340 8022     		mov	r2, #128
 4778 0342 D200     		lsl	r2, r2, #3
 4779 0344 5A60     		str	r2, [r3, #4]
 795:../Sources/main.c **** 						TFC_BAT_LED3_OFF;
 4780              		.loc 1 795 0
 4781 0346 294B     		ldr	r3, .L331+88
 4782 0348 8022     		mov	r2, #128
 4783 034a 1201     		lsl	r2, r2, #4
 4784 034c 9A60     		str	r2, [r3, #8]
 796:../Sources/main.c **** 						break;
 4785              		.loc 1 796 0
 4786 034e 60E0     		b	.L300
 4787              	.L311:
 797:../Sources/main.c **** 					case 8:
 798:../Sources/main.c **** 						TFC_BAT_LED0_OFF;
 4788              		.loc 1 798 0
 4789 0350 264B     		ldr	r3, .L331+88
 4790 0352 8022     		mov	r2, #128
 4791 0354 5200     		lsl	r2, r2, #1
 4792 0356 9A60     		str	r2, [r3, #8]
 799:../Sources/main.c **** 						TFC_BAT_LED1_OFF;
 4793              		.loc 1 799 0
 4794 0358 244B     		ldr	r3, .L331+88
 4795 035a 8022     		mov	r2, #128
 4796 035c 9200     		lsl	r2, r2, #2
 4797 035e 9A60     		str	r2, [r3, #8]
 800:../Sources/main.c **** 						TFC_BAT_LED2_OFF;
 4798              		.loc 1 800 0
 4799 0360 224B     		ldr	r3, .L331+88
 4800 0362 8022     		mov	r2, #128
 4801 0364 D200     		lsl	r2, r2, #3
 4802 0366 9A60     		str	r2, [r3, #8]
 801:../Sources/main.c **** 						TFC_BAT_LED3_ON;
 4803              		.loc 1 801 0
 4804 0368 204B     		ldr	r3, .L331+88
 4805 036a 8022     		mov	r2, #128
 4806 036c 1201     		lsl	r2, r2, #4
 4807 036e 5A60     		str	r2, [r3, #4]
 802:../Sources/main.c **** 						break;
 4808              		.loc 1 802 0
 4809 0370 4FE0     		b	.L300
 4810              	.L312:
 803:../Sources/main.c **** 					case 9:
 804:../Sources/main.c **** 						TFC_BAT_LED0_ON;
 4811              		.loc 1 804 0
 4812 0372 1E4B     		ldr	r3, .L331+88
 4813 0374 8022     		mov	r2, #128
 4814 0376 5200     		lsl	r2, r2, #1
 4815 0378 5A60     		str	r2, [r3, #4]
 805:../Sources/main.c **** 						TFC_BAT_LED1_OFF;
 4816              		.loc 1 805 0
 4817 037a 1C4B     		ldr	r3, .L331+88
 4818 037c 8022     		mov	r2, #128
 4819 037e 9200     		lsl	r2, r2, #2
 4820 0380 9A60     		str	r2, [r3, #8]
 806:../Sources/main.c **** 						TFC_BAT_LED2_OFF;
 4821              		.loc 1 806 0
 4822 0382 1A4B     		ldr	r3, .L331+88
 4823 0384 8022     		mov	r2, #128
 4824 0386 D200     		lsl	r2, r2, #3
 4825 0388 9A60     		str	r2, [r3, #8]
 807:../Sources/main.c **** 						TFC_BAT_LED3_ON;
 4826              		.loc 1 807 0
 4827 038a 184B     		ldr	r3, .L331+88
 4828 038c 8022     		mov	r2, #128
 4829 038e 1201     		lsl	r2, r2, #4
 4830 0390 5A60     		str	r2, [r3, #4]
 808:../Sources/main.c **** 						break;
 4831              		.loc 1 808 0
 4832 0392 3EE0     		b	.L300
 4833              	.L332:
 4834              		.align	2
 4835              	.L331:
 4836 0394 80F00F40 		.word	1074786432
 4837 0398 00000000 		.word	speed
 4838 039c 9A99193F 		.word	1058642330
 4839 03a0 00000000 		.word	startCounter
 4840 03a4 00008C42 		.word	1116471296
 4841 03a8 00000000 		.word	straightCounterMax
 4842 03ac 00000000 		.word	brakeCounter
 4843 03b0 00000000 		.word	straightCounter
 4844 03b4 00000000 		.word	cameraImageCounter
 4845 03b8 00000000 		.word	endOfRoundCounter
 4846 03bc 00000000 		.word	brakeDelayCounter
 4847 03c0 00000000 		.word	.L290
 4848 03c4 00000000 		.word	LineScanImageReady
 4849 03c8 00000000 		.word	border
 4850 03cc 00000000 		.word	TFC_Ticker
 4851 03d0 0F270000 		.word	9999
 4852 03d4 01000080 		.word	-2147483647
 4853 03d8 000080BF 		.word	-1082130432
 4854 03dc 00007A44 		.word	1148846080
 4855 03e0 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 4856 03e4 5C000000 		.word	.LC94
 4857 03e8 3C000000 		.word	.L313
 4858 03ec 40F00F40 		.word	1074786368
 4859              	.L305:
 809:../Sources/main.c **** 					default:
 810:../Sources/main.c **** 						TFC_BAT_LED0_OFF;
 4860              		.loc 1 810 0
 4861 03f0 554B     		ldr	r3, .L333
 4862 03f2 8022     		mov	r2, #128
 4863 03f4 5200     		lsl	r2, r2, #1
 4864 03f6 9A60     		str	r2, [r3, #8]
 811:../Sources/main.c **** 						TFC_BAT_LED1_OFF;
 4865              		.loc 1 811 0
 4866 03f8 534B     		ldr	r3, .L333
 4867 03fa 8022     		mov	r2, #128
 4868 03fc 9200     		lsl	r2, r2, #2
 4869 03fe 9A60     		str	r2, [r3, #8]
 812:../Sources/main.c **** 						TFC_BAT_LED2_OFF;
 4870              		.loc 1 812 0
 4871 0400 514B     		ldr	r3, .L333
 4872 0402 8022     		mov	r2, #128
 4873 0404 D200     		lsl	r2, r2, #3
 4874 0406 9A60     		str	r2, [r3, #8]
 813:../Sources/main.c **** 						TFC_BAT_LED3_OFF;
 4875              		.loc 1 813 0
 4876 0408 4F4B     		ldr	r3, .L333
 4877 040a 8022     		mov	r2, #128
 4878 040c 1201     		lsl	r2, r2, #4
 4879 040e 9A60     		str	r2, [r3, #8]
 814:../Sources/main.c **** 						break;
 4880              		.loc 1 814 0
 4881 0410 C046     		mov	r8, r8
 4882              	.L300:
 4883              	.LBE5:
 815:../Sources/main.c **** 				}
 816:../Sources/main.c **** 			}
 817:../Sources/main.c **** 			
 818:../Sources/main.c **** 			break;
 4884              		.loc 1 818 0
 4885 0412 90E0     		b	.L327
 4886              	.L286:
 819:../Sources/main.c **** 		case 8:
 820:../Sources/main.c **** 			if(LineScanImageReady==1) //TFC_Ticker[0] >= 20 && 
 4887              		.loc 1 820 0
 4888 0414 4D4B     		ldr	r3, .L333+4
 4889 0416 1B78     		ldrb	r3, [r3]
 4890 0418 DBB2     		uxtb	r3, r3
 4891 041a 012B     		cmp	r3, #1
 4892 041c 00D0     		beq	.LCB4224
 4893 041e 8CE0     		b	.L328	@long jump
 4894              	.LCB4224:
 821:../Sources/main.c **** 			{
 822:../Sources/main.c **** 				border=threshold();
 4895              		.loc 1 822 0
 4896 0420 FFF7FEFF 		bl	threshold
 4897 0424 021C     		mov	r2, r0
 4898 0426 4A4B     		ldr	r3, .L333+8
 4899 0428 1A60     		str	r2, [r3]
 823:../Sources/main.c **** 				if(overStart)
 4900              		.loc 1 823 0
 4901 042a 4A4B     		ldr	r3, .L333+12
 4902 042c 1B78     		ldrb	r3, [r3]
 4903 042e 002B     		cmp	r3, #0
 4904 0430 17D0     		beq	.L315
 824:../Sources/main.c **** 				{
 825:../Sources/main.c **** 					speed = setEndOfRound();
 4905              		.loc 1 825 0
 4906 0432 FFF7FEFF 		bl	setEndOfRound
 4907 0436 021C     		add	r2, r0, #0
 4908 0438 474B     		ldr	r3, .L333+16
 4909 043a 1A60     		str	r2, [r3]
 826:../Sources/main.c **** 					TERMINAL_PRINTF("END_OF_ROUND!!!!!!!!!!!!!!!!\r\n");
 4910              		.loc 1 826 0
 4911 043c 474A     		ldr	r2, .L333+20
 4912 043e 484B     		ldr	r3, .L333+24
 4913 0440 101C     		mov	r0, r2
 4914 0442 191C     		mov	r1, r3
 4915 0444 FFF7FEFF 		bl	Qprintf
 827:../Sources/main.c **** 
 828:../Sources/main.c **** 						t++;
 4916              		.loc 1 828 0
 4917 0448 FB68     		ldr	r3, [r7, #12]
 4918 044a 0133     		add	r3, r3, #1
 4919 044c FB60     		str	r3, [r7, #12]
 829:../Sources/main.c **** 						if(t>4)
 4920              		.loc 1 829 0
 4921 044e FB68     		ldr	r3, [r7, #12]
 4922 0450 042B     		cmp	r3, #4
 4923 0452 01DD     		ble	.L316
 830:../Sources/main.c **** 						{
 831:../Sources/main.c **** 							t=0;
 4924              		.loc 1 831 0
 4925 0454 0023     		mov	r3, #0
 4926 0456 FB60     		str	r3, [r7, #12]
 4927              	.L316:
 832:../Sources/main.c **** 						}			
 833:../Sources/main.c **** 						TFC_SetBatteryLED_Level(t);
 4928              		.loc 1 833 0
 4929 0458 FB68     		ldr	r3, [r7, #12]
 4930 045a DBB2     		uxtb	r3, r3
 4931 045c 181C     		mov	r0, r3
 4932 045e FFF7FEFF 		bl	TFC_SetBatteryLED_Level
 4933              	.L315:
 834:../Sources/main.c **** 				}
 835:../Sources/main.c **** 				drive(speed);
 4934              		.loc 1 835 0
 4935 0462 3D4B     		ldr	r3, .L333+16
 4936 0464 1B68     		ldr	r3, [r3]
 4937 0466 181C     		add	r0, r3, #0
 4938 0468 FFF7FEFF 		bl	drive
 836:../Sources/main.c **** //				streamCurrentImageDataInPuttyFormat();
 837:../Sources/main.c **** 				TFC_Ticker[0] = 0;
 4939              		.loc 1 837 0
 4940 046c 3D4B     		ldr	r3, .L333+28
 4941 046e 0022     		mov	r2, #0
 4942 0470 1A60     		str	r2, [r3]
 838:../Sources/main.c **** 				LineScanImageReady=0;
 4943              		.loc 1 838 0
 4944 0472 364B     		ldr	r3, .L333+4
 4945 0474 0022     		mov	r2, #0
 4946 0476 1A70     		strb	r2, [r3]
 839:../Sources/main.c **** 			}
 840:../Sources/main.c **** 			break;
 4947              		.loc 1 840 0
 4948 0478 5FE0     		b	.L328
 4949              	.L287:
 841:../Sources/main.c **** 		case 9:
 842:../Sources/main.c **** 			if(LineScanImageReady==1) //TFC_Ticker[0] >= 20 && 
 4950              		.loc 1 842 0
 4951 047a 344B     		ldr	r3, .L333+4
 4952 047c 1B78     		ldrb	r3, [r3]
 4953 047e DBB2     		uxtb	r3, r3
 4954 0480 012B     		cmp	r3, #1
 4955 0482 5CD1     		bne	.L329
 843:../Sources/main.c **** 			{
 844:../Sources/main.c **** 				border=threshold();
 4956              		.loc 1 844 0
 4957 0484 FFF7FEFF 		bl	threshold
 4958 0488 021C     		mov	r2, r0
 4959 048a 314B     		ldr	r3, .L333+8
 4960 048c 1A60     		str	r2, [r3]
 845:../Sources/main.c **** 				drive(speed);
 4961              		.loc 1 845 0
 4962 048e 324B     		ldr	r3, .L333+16
 4963 0490 1B68     		ldr	r3, [r3]
 4964 0492 181C     		add	r0, r3, #0
 4965 0494 FFF7FEFF 		bl	drive
 846:../Sources/main.c **** 				//print();
 847:../Sources/main.c **** 				
 848:../Sources/main.c **** 				//streamCurrentImageDataInPuttyFormat();
 849:../Sources/main.c **** 				TFC_Ticker[0] = 0;
 4966              		.loc 1 849 0
 4967 0498 324B     		ldr	r3, .L333+28
 4968 049a 0022     		mov	r2, #0
 4969 049c 1A60     		str	r2, [r3]
 850:../Sources/main.c **** 				LineScanImageReady=0;
 4970              		.loc 1 850 0
 4971 049e 2B4B     		ldr	r3, .L333+4
 4972 04a0 0022     		mov	r2, #0
 4973 04a2 1A70     		strb	r2, [r3]
 851:../Sources/main.c **** 			}
 852:../Sources/main.c **** 			break;
 4974              		.loc 1 852 0
 4975 04a4 4BE0     		b	.L329
 4976              	.L288:
 853:../Sources/main.c **** 		case 10: // integrated hill detection
 854:../Sources/main.c **** 			if(LineScanImageReady==1) //TFC_Ticker[0] >= 20 && 
 4977              		.loc 1 854 0
 4978 04a6 294B     		ldr	r3, .L333+4
 4979 04a8 1B78     		ldrb	r3, [r3]
 4980 04aa DBB2     		uxtb	r3, r3
 4981 04ac 012B     		cmp	r3, #1
 4982 04ae 48D1     		bne	.L330
 855:../Sources/main.c **** 			{
 856:../Sources/main.c **** 				if(overStart)
 4983              		.loc 1 856 0
 4984 04b0 284B     		ldr	r3, .L333+12
 4985 04b2 1B78     		ldrb	r3, [r3]
 4986 04b4 002B     		cmp	r3, #0
 4987 04b6 17D0     		beq	.L319
 857:../Sources/main.c **** 				{
 858:../Sources/main.c **** 					speed = setEndOfRound();
 4988              		.loc 1 858 0
 4989 04b8 FFF7FEFF 		bl	setEndOfRound
 4990 04bc 021C     		add	r2, r0, #0
 4991 04be 264B     		ldr	r3, .L333+16
 4992 04c0 1A60     		str	r2, [r3]
 859:../Sources/main.c **** 					TERMINAL_PRINTF("END_OF_ROUND!!!!!!!!!!!!!!!!\r\n");
 4993              		.loc 1 859 0
 4994 04c2 264A     		ldr	r2, .L333+20
 4995 04c4 264B     		ldr	r3, .L333+24
 4996 04c6 101C     		mov	r0, r2
 4997 04c8 191C     		mov	r1, r3
 4998 04ca FFF7FEFF 		bl	Qprintf
 860:../Sources/main.c **** 
 861:../Sources/main.c **** 					t++;
 4999              		.loc 1 861 0
 5000 04ce FB68     		ldr	r3, [r7, #12]
 5001 04d0 0133     		add	r3, r3, #1
 5002 04d2 FB60     		str	r3, [r7, #12]
 862:../Sources/main.c **** 					if(t>4)
 5003              		.loc 1 862 0
 5004 04d4 FB68     		ldr	r3, [r7, #12]
 5005 04d6 042B     		cmp	r3, #4
 5006 04d8 01DD     		ble	.L320
 863:../Sources/main.c **** 					{
 864:../Sources/main.c **** 						t=0;
 5007              		.loc 1 864 0
 5008 04da 0023     		mov	r3, #0
 5009 04dc FB60     		str	r3, [r7, #12]
 5010              	.L320:
 865:../Sources/main.c **** 					}			
 866:../Sources/main.c **** 					TFC_SetBatteryLED_Level(t);
 5011              		.loc 1 866 0
 5012 04de FB68     		ldr	r3, [r7, #12]
 5013 04e0 DBB2     		uxtb	r3, r3
 5014 04e2 181C     		mov	r0, r3
 5015 04e4 FFF7FEFF 		bl	TFC_SetBatteryLED_Level
 5016              	.L319:
 867:../Sources/main.c **** 				}
 868:../Sources/main.c **** 				driveWithHillRecognition(speed);
 5017              		.loc 1 868 0
 5018 04e8 1B4B     		ldr	r3, .L333+16
 5019 04ea 1B68     		ldr	r3, [r3]
 5020 04ec 181C     		add	r0, r3, #0
 5021 04ee FFF7FEFF 		bl	driveWithHillRecognition
 869:../Sources/main.c **** //				streamCurrentImageDataInPuttyFormat();
 870:../Sources/main.c **** 				
 871:../Sources/main.c **** 				TFC_Ticker[0] = 0;
 5022              		.loc 1 871 0
 5023 04f2 1C4B     		ldr	r3, .L333+28
 5024 04f4 0022     		mov	r2, #0
 5025 04f6 1A60     		str	r2, [r3]
 872:../Sources/main.c **** 				LineScanImageReady=0;
 5026              		.loc 1 872 0
 5027 04f8 144B     		ldr	r3, .L333+4
 5028 04fa 0022     		mov	r2, #0
 5029 04fc 1A70     		strb	r2, [r3]
 873:../Sources/main.c **** 			}
 874:../Sources/main.c **** 			break;
 5030              		.loc 1 874 0
 5031 04fe 20E0     		b	.L330
 5032              	.L289:
 875:../Sources/main.c **** 		case 14:
 876:../Sources/main.c **** 			TFC_SetMotorPWM(speed,-speed);
 5033              		.loc 1 876 0
 5034 0500 154B     		ldr	r3, .L333+16
 5035 0502 1A68     		ldr	r2, [r3]
 5036 0504 144B     		ldr	r3, .L333+16
 5037 0506 1B68     		ldr	r3, [r3]
 5038 0508 8021     		mov	r1, #128
 5039 050a 0906     		lsl	r1, r1, #24
 5040 050c 4B40     		eor	r3, r1
 5041 050e 101C     		add	r0, r2, #0
 5042 0510 191C     		add	r1, r3, #0
 5043 0512 FFF7FEFF 		bl	TFC_SetMotorPWM
 877:../Sources/main.c **** 			TFC_SetServo(0,-1);
 5044              		.loc 1 877 0
 5045 0516 144B     		ldr	r3, .L333+32
 5046 0518 0020     		mov	r0, #0
 5047 051a 191C     		add	r1, r3, #0
 5048 051c FFF7FEFF 		bl	TFC_SetServo
 5049              	.LBE4:
 878:../Sources/main.c **** 		}
 879:../Sources/main.c **** 	}
 5050              		.loc 1 879 0
 5051 0520 77E5     		b	.L321
 5052              	.L322:
 5053              	.LBB6:
 699:../Sources/main.c **** 			break;
 5054              		.loc 1 699 0
 5055 0522 C046     		mov	r8, r8
 5056 0524 0EE0     		b	.L291
 5057              	.L323:
 718:../Sources/main.c **** 			break;
 5058              		.loc 1 718 0
 5059 0526 C046     		mov	r8, r8
 5060 0528 0CE0     		b	.L291
 5061              	.L324:
 728:../Sources/main.c **** 			break;	
 5062              		.loc 1 728 0
 5063 052a C046     		mov	r8, r8
 5064 052c 0AE0     		b	.L291
 5065              	.L325:
 738:../Sources/main.c **** 			break;
 5066              		.loc 1 738 0
 5067 052e C046     		mov	r8, r8
 5068 0530 08E0     		b	.L291
 5069              	.L326:
 748:../Sources/main.c **** 			break;
 5070              		.loc 1 748 0
 5071 0532 C046     		mov	r8, r8
 5072 0534 06E0     		b	.L291
 5073              	.L327:
 818:../Sources/main.c **** 			break;
 5074              		.loc 1 818 0
 5075 0536 C046     		mov	r8, r8
 5076 0538 04E0     		b	.L291
 5077              	.L328:
 840:../Sources/main.c **** 			break;
 5078              		.loc 1 840 0
 5079 053a C046     		mov	r8, r8
 5080 053c 02E0     		b	.L291
 5081              	.L329:
 852:../Sources/main.c **** 			break;
 5082              		.loc 1 852 0
 5083 053e C046     		mov	r8, r8
 5084 0540 00E0     		b	.L291
 5085              	.L330:
 874:../Sources/main.c **** 			break;
 5086              		.loc 1 874 0
 5087 0542 C046     		mov	r8, r8
 5088              	.L291:
 5089              	.LBE6:
 5090              		.loc 1 879 0
 5091 0544 65E5     		b	.L321
 5092              	.L334:
 5093 0546 C046     		.align	2
 5094              	.L333:
 5095 0548 40F00F40 		.word	1074786368
 5096 054c 00000000 		.word	LineScanImageReady
 5097 0550 00000000 		.word	border
 5098 0554 00000000 		.word	overStart
 5099 0558 00000000 		.word	speed
 5100 055c 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 5101 0560 64000000 		.word	.LC98
 5102 0564 00000000 		.word	TFC_Ticker
 5103 0568 000080BF 		.word	-1082130432
 5104              		.cfi_endproc
 5105              	.LFE29:
 5107              		.text
 5108              	.Letext0:
 5109              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 5110              		.file 3 "D:/guarder workspace/FRDM-TFC/Project_Headers/MKL25Z4.h"
 5111              		.file 4 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/ewl_misra_types.h"
 5112              		.file 5 "D:/guarder workspace/FRDM-TFC/Project_Headers/TFC\\TFC_arm_cm0.h"
 5113              		.file 6 "D:/guarder workspace/FRDM-TFC/Project_Headers/TFC\\TFC_Queue.h"
 5114              		.file 7 "D:/guarder workspace/FRDM-TFC/Project_Headers/TFC\\TFC.h"
 5115              		.file 8 "D:/guarder workspace/FRDM-TFC/Project_Headers/TFC\\TFC_ARM_SysTick.h"
 5116              		.file 9 "D:/guarder workspace/FRDM-TFC/Project_Headers/TFC\\TFC_LineScanCamera.h"
 5117              		.file 10 "D:/guarder workspace/FRDM-TFC/Project_Headers/TFC\\TFC_UART.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:22     .bss.old_diff:00000000 old_diff
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:19     .bss.old_diff:00000000 $d
                            *COM*:00000004 old_steer
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:30     .data.border:00000000 border
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:27     .data.border:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:37     .bss.derivative:00000000 derivative
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:34     .bss.derivative:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:44     .bss.proportional:00000000 proportional
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:41     .bss.proportional:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:51     .bss.integral:00000000 integral
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:48     .bss.integral:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:58     .bss.integrald:00000000 integrald
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:55     .bss.integrald:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:65     .bss.rate:00000000 rate
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:62     .bss.rate:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:72     .bss.prevposition:00000000 prevposition
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:69     .bss.prevposition:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:79     .bss.control:00000000 control
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:76     .bss.control:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:86     .bss.speed:00000000 speed
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:83     .bss.speed:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:92     .bss.overStart:00000000 overStart
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:93     .bss.overStart:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:99     .bss.lastMode:00000000 lastMode
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:96     .bss.lastMode:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:106    .data.ttl:00000000 ttl
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:103    .data.ttl:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:113    .bss.angle:00000000 angle
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:110    .bss.angle:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:119    .bss.slowdown:00000000 slowdown
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:120    .bss.slowdown:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:125    .bss.hill:00000000 hill
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:126    .bss.hill:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:132    .bss.startCounter:00000000 startCounter
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:129    .bss.startCounter:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:139    .bss.hillCounter:00000000 hillCounter
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:136    .bss.hillCounter:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:146    .bss.hillBrakeCounter:00000000 hillBrakeCounter
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:143    .bss.hillBrakeCounter:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:153    .bss.brakeCounter:00000000 brakeCounter
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:150    .bss.brakeCounter:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:160    .bss.straightCounter:00000000 straightCounter
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:157    .bss.straightCounter:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:167    .bss.cameraImageCounter:00000000 cameraImageCounter
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:164    .bss.cameraImageCounter:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:174    .bss.endOfRoundCounter:00000000 endOfRoundCounter
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:171    .bss.endOfRoundCounter:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:181    .bss.brakeDelayCounter:00000000 brakeDelayCounter
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:178    .bss.brakeDelayCounter:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:187    .bss.startLeft:00000000 startLeft
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:188    .bss.startLeft:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:193    .bss.startRight:00000000 startRight
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:194    .bss.startRight:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:200    .bss.straightCounterMax:00000000 straightCounterMax
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:197    .bss.straightCounterMax:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:203    .text.isBlack:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:208    .text.isBlack:00000000 isBlack
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:254    .text.isBlack:00000034 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:260    .text.isWhite:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:265    .text.isWhite:00000000 isWhite
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:302    .text.isCentrical:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:307    .text.isCentrical:00000000 isCentrical
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:354    .rodata:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:358    .text.isHill:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:363    .text.isHill:00000000 isHill
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:485    .text.isHill:000000ac $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:492    .text.isStart:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:497    .text.isStart:00000000 isStart
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:647    .text.isStart:000000e0 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:653    .text.checkModeChange:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:658    .text.checkModeChange:00000000 checkModeChange
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:709    .text.checkModeChange:00000038 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:717    .text.disableMotor:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:722    .text.disableMotor:00000000 disableMotor
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:752    .text.disableMotor:0000001c $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:757    .text.enableMotor:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:762    .text.enableMotor:00000000 enableMotor
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:786    .text.enableMotor:00000010 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:791    .text.resetImage:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:796    .text.resetImage:00000000 resetImage
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:819    .text.resetImage:00000010 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:824    .text.resetTicker:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:829    .text.resetTicker:00000000 resetTicker
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:852    .text.resetTicker:00000010 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:857    .text.checkImageReadiness:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:862    .text.checkImageReadiness:00000000 checkImageReadiness
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:890    .text.checkImageReadiness:00000018 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:901    .text.getInnerSpeed:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:906    .text.getInnerSpeed:00000000 getInnerSpeed
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1009   .text.getInnerSpeed:000000b0 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1026   .text.findBlack_IT:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1031   .text.findBlack_IT:00000000 findBlack_IT
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1347   .text.findBlack_IT:00000260 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1356   .text.findBlack:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1361   .text.findBlack:00000000 findBlack
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1520   .text.findBlack:00000108 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1532   .text.IMPROVEDfindBlack:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1537   .text.IMPROVEDfindBlack:00000000 IMPROVEDfindBlack
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1682   .text.IMPROVEDfindBlack:000000e0 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1707   .text.streamCurrentImageDataInPuttyFormat:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1712   .text.streamCurrentImageDataInPuttyFormat:00000000 streamCurrentImageDataInPuttyFormat
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1857   .text.streamCurrentImageDataInPuttyFormat:000000d0 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1883   .text.print:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1888   .text.print:00000000 print
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2011   .text.print:000000b8 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2030   .text.calibrateLightSensor:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2035   .text.calibrateLightSensor:00000000 calibrateLightSensor
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2145   .text.calibrateLightSensor:000000b0 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2162   .text.calibrateLightSensorAtPoint:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2167   .text.calibrateLightSensorAtPoint:00000000 calibrateLightSensorAtPoint
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2229   .text.calibrateLightSensorAtPoint:00000060 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2239   .text.calculateSpeed:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2244   .text.calculateSpeed:00000000 calculateSpeed
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2371   .text.calculateSpeed:000000d8 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2380   .text.calculateSpeed_II:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2385   .text.calculateSpeed_II:00000000 calculateSpeed_II
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2789   .text.calculateSpeed_II:000002a8 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2812   .text.getLineMid:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2817   .text.getLineMid:00000000 getLineMid
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3003   .text.getLineMid:00000130 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3009   .text.getMiddleIndex:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3014   .text.getMiddleIndex:00000000 getMiddleIndex
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3058   .text.calculateSteering:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3063   .text.calculateSteering:00000000 calculateSteering
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3424   .text.calculateSteering:00000270 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3458   .text.checkStart:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3463   .text.checkStart:00000000 checkStart
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3508   .text.checkStart:00000034 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3513   .text.drive:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3518   .text.drive:00000000 drive
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3639   .text.drive:000000bc $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3646   .text.driveWithHillRecognition:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3651   .text.driveWithHillRecognition:00000000 driveWithHillRecognition
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3823   .text.driveWithHillRecognition:00000110 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3834   .text.setEndOfRound:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3839   .text.setEndOfRound:00000000 setEndOfRound
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3910   .text.setEndOfRound:00000054 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3919   .text.threshold:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:3924   .text.threshold:00000000 threshold
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:4202   .text.threshold:000001fc $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:4220   .text.main:00000000 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:4225   .text.main:00000000 main
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:4340   .rodata.main:00000000 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:4836   .text.main:00000394 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:4861   .text.main:000003f0 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:5095   .text.main:00000548 $d
                     .debug_frame:00000010 $d
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:1355   .text.findBlack_IT:00000274 $t
C:\Users\Shalin\AppData\Local\Temp\ccWTosoa.s:2811   .text.calculateSpeed_II:000002f4 $t

UNDEFINED SYMBOLS
LineScanImage0
Qprintf
SDA_SERIAL_OUTGOING_QUEUE
TFC_SetMotorPWM
LineScanImageReady
TFC_Ticker
__aeabi_f2d
__aeabi_dcmplt
__aeabi_dcmpgt
__aeabi_dadd
__aeabi_dmul
__aeabi_d2f
cos
__aeabi_i2d
__aeabi_ddiv
__aeabi_d2uiz
__aeabi_fcmple
__aeabi_dsub
pow
__aeabi_fadd
__aeabi_i2f
__aeabi_fsub
__aeabi_f2iz
__aeabi_fcmplt
__aeabi_fcmpgt
__aeabi_uidivmod
LineScanImage1
__aeabi_d2iz
__aeabi_fcmpeq
__aeabi_fdiv
__aeabi_fmul
atan
TFC_SetServo
__aeabi_ui2f
__aeabi_f2uiz
sqrt
LineScanImage0Buffer
TFC_Init
TFC_Task
TFC_GetDIP_Switch
TFC_ReadPot
TFC_SetBatteryLED_Level
